
AVRASM ver. 2.1.30  D:\Uni\Term-8\riz-lab\Project\Debug\List\final-project.asm Mon Jul 03 19:24:18 2023

D:\Uni\Term-8\riz-lab\Project\Debug\List\final-project.asm(1089): warning: Register r4 already defined by the .DEF directive
D:\Uni\Term-8\riz-lab\Project\Debug\List\final-project.asm(1090): warning: Register r5 already defined by the .DEF directive
D:\Uni\Term-8\riz-lab\Project\Debug\List\final-project.asm(1091): warning: Register r6 already defined by the .DEF directive
D:\Uni\Term-8\riz-lab\Project\Debug\List\final-project.asm(1092): warning: Register r7 already defined by the .DEF directive
D:\Uni\Term-8\riz-lab\Project\Debug\List\final-project.asm(1093): warning: Register r8 already defined by the .DEF directive
D:\Uni\Term-8\riz-lab\Project\Debug\List\final-project.asm(1094): warning: Register r9 already defined by the .DEF directive
D:\Uni\Term-8\riz-lab\Project\Debug\List\final-project.asm(1095): warning: Register r10 already defined by the .DEF directive
D:\Uni\Term-8\riz-lab\Project\Debug\List\final-project.asm(1096): warning: Register r11 already defined by the .DEF directive
D:\Uni\Term-8\riz-lab\Project\Debug\List\final-project.asm(1097): warning: Register r13 already defined by the .DEF directive
D:\Uni\Term-8\riz-lab\Project\Debug\List\final-project.asm(1098): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega64
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 1024 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega64
                 	#pragma AVRPART MEMORY PROG_FLASH 65536
                 	#pragma AVRPART MEMORY EEPROM 2048
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4096
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _numPredefinedUsers=R4
                 	.DEF _numPredefinedUsers_msb=R5
                 	.DEF _numRegisteredUsers=R6
                 	.DEF _numRegisteredUsers_msb=R7
                 	.DEF _bufferIndex=R8
                 	.DEF _bufferIndex_msb=R9
                 	.DEF _isRegistering=R10
                 	.DEF _isRegistering_msb=R11
                 	.DEF __lcd_x=R13
                 	.DEF __lcd_y=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 011d 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 020e 	JMP  _usart_rx_isr
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
000046 2710
000047 03e8
000048 0064
000049 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00004a 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00004b 1000
00004c 0100
00004d 0010
00004e 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00004f 0004
000050 0000      	.DB  0x4,0x0,0x0,0x0
000051 0000
000052 0000      	.DB  0x0,0x0,0x0,0x0
                 
                 _0x3:
000053 7375
000054 7265
000055 0031
000056 0000      	.DB  0x75,0x73,0x65,0x72,0x31,0x0,0x0,0x0
000057 0000
000058 0000
000059 0000
00005a 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00005b 0000
00005c 0000
00005d 6170
00005e 7373      	.DB  0x0,0x0,0x0,0x0,0x70,0x61,0x73,0x73
00005f 0031
000060 0000
000061 0000
000062 0000      	.DB  0x31,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000063 0000
000064 0000
000065 0000
000066 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000067 7375
000068 7265
000069 0032
00006a 0000      	.DB  0x75,0x73,0x65,0x72,0x32,0x0,0x0,0x0
00006b 0000
00006c 0000
00006d 0000
00006e 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00006f 0000
000070 0000
000071 6170
000072 7373      	.DB  0x0,0x0,0x0,0x0,0x70,0x61,0x73,0x73
000073 0032
000074 0000
000075 0000
000076 0000      	.DB  0x32,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000077 0000
000078 0000
000079 0000
00007a 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00007b 7375
00007c 7265
00007d 0033
00007e 0000      	.DB  0x75,0x73,0x65,0x72,0x33,0x0,0x0,0x0
00007f 0000
000080 0000
000081 0000
000082 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000083 0000
000084 0000
000085 6170
000086 7373      	.DB  0x0,0x0,0x0,0x0,0x70,0x61,0x73,0x73
000087 0033
000088 0000
000089 0000
00008a 0000      	.DB  0x33,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00008b 0000
00008c 0000
00008d 0000
00008e 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00008f 7375
000090 7265
000091 0034
000092 0000      	.DB  0x75,0x73,0x65,0x72,0x34,0x0,0x0,0x0
000093 0000
000094 0000
000095 0000
000096 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000097 0000
000098 0000
000099 6170
00009a 7373      	.DB  0x0,0x0,0x0,0x0,0x70,0x61,0x73,0x73
D:\Uni\Term-8\riz-lab\Project\Debug\List\final-project.asm(1173): warning: .cseg .db misalignment - padding zero byte
00009b 0034      	.DB  0x34
                 _0x0:
00009c 450a
00009d 746e
00009e 7265
00009f 5020      	.DB  0xA,0x45,0x6E,0x74,0x65,0x72,0x20,0x50
0000a0 7361
0000a1 7773
0000a2 726f
0000a3 3a64      	.DB  0x61,0x73,0x73,0x77,0x6F,0x72,0x64,0x3A
0000a4 0020
0000a5 4e0a
0000a6 7765
0000a7 5020      	.DB  0x20,0x0,0xA,0x4E,0x65,0x77,0x20,0x50
0000a8 7361
0000a9 7773
0000aa 726f
0000ab 3a64      	.DB  0x61,0x73,0x73,0x77,0x6F,0x72,0x64,0x3A
0000ac 0020
0000ad 4c0a
0000ae 676f
0000af 6e69      	.DB  0x20,0x0,0xA,0x4C,0x6F,0x67,0x69,0x6E
0000b0 5320
0000b1 6375
0000b2 6563
0000b3 7373      	.DB  0x20,0x53,0x75,0x63,0x63,0x65,0x73,0x73
0000b4 7566
0000b5 216c
0000b6 000a
0000b7 4c0a      	.DB  0x66,0x75,0x6C,0x21,0xA,0x0,0xA,0x4C
0000b8 676f
0000b9 6e69
0000ba 4620
0000bb 6961      	.DB  0x6F,0x67,0x69,0x6E,0x20,0x46,0x61,0x69
0000bc 656c
0000bd 2164
0000be 000a
0000bf 430a      	.DB  0x6C,0x65,0x64,0x21,0xA,0x0,0xA,0x43
0000c0 6e6f
0000c1 6966
0000c2 6d72
0000c3 5020      	.DB  0x6F,0x6E,0x66,0x69,0x72,0x6D,0x20,0x50
0000c4 7361
0000c5 7773
0000c6 726f
0000c7 3a64      	.DB  0x61,0x73,0x73,0x77,0x6F,0x72,0x64,0x3A
0000c8 0020
0000c9 520a
0000ca 6765
0000cb 7369      	.DB  0x20,0x0,0xA,0x52,0x65,0x67,0x69,0x73
0000cc 7274
0000cd 7461
0000ce 6f69
0000cf 206e      	.DB  0x74,0x72,0x61,0x74,0x69,0x6F,0x6E,0x20
0000d0 7553
0000d1 6363
0000d2 7365
0000d3 6673      	.DB  0x53,0x75,0x63,0x63,0x65,0x73,0x73,0x66
0000d4 6c75
0000d5 0a21
0000d6 0a00
0000d7 6552      	.DB  0x75,0x6C,0x21,0xA,0x0,0xA,0x52,0x65
0000d8 6967
0000d9 7473
0000da 6172
0000db 6974      	.DB  0x67,0x69,0x73,0x74,0x72,0x61,0x74,0x69
0000dc 6e6f
0000dd 4620
0000de 6961
0000df 656c      	.DB  0x6F,0x6E,0x20,0x46,0x61,0x69,0x6C,0x65
0000e0 2164
0000e1 000a
0000e2 6e45
0000e3 6574      	.DB  0x64,0x21,0xA,0x0,0x45,0x6E,0x74,0x65
0000e4 2072
0000e5 7355
0000e6 7265
0000e7 616e      	.DB  0x72,0x20,0x55,0x73,0x65,0x72,0x6E,0x61
0000e8 656d
0000e9 203a
D:\Uni\Term-8\riz-lab\Project\Debug\List\final-project.asm(1194): warning: .cseg .db misalignment - padding zero byte
0000ea 0000      	.DB  0x6D,0x65,0x3A,0x20,0x0
                 _0x2020060:
D:\Uni\Term-8\riz-lab\Project\Debug\List\final-project.asm(1196): warning: .cseg .db misalignment - padding zero byte
0000eb 0001      	.DB  0x1
                 _0x2020000:
0000ec 4e2d
0000ed 4e41
0000ee 4900
0000ef 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
D:\Uni\Term-8\riz-lab\Project\Debug\List\final-project.asm(1199): warning: .cseg .db misalignment - padding zero byte
0000f0 0000      	.DB  0x0
                 _0x2060003:
0000f1 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
0000f2 0008      	.DW  0x08
0000f3 0004      	.DW  0x04
0000f4 009e      	.DW  __REG_VARS*2
                 
0000f5 0091      	.DW  0x91
0000f6 05c3      	.DW  _predefinedUsers
0000f7 00a6      	.DW  _0x3*2
                 
0000f8 0012      	.DW  0x12
0000f9 0500      	.DW  _0xE
0000fa 0138      	.DW  _0x0*2
                 
0000fb 0012      	.DW  0x12
0000fc 0512      	.DW  _0xE+18
0000fd 0138      	.DW  _0x0*2
                 
0000fe 0010      	.DW  0x10
0000ff 0524      	.DW  _0xE+36
000100 014a      	.DW  _0x0*2+18
                 
000101 0014      	.DW  0x14
000102 0534      	.DW  _0x1A
000103 015a      	.DW  _0x0*2+34
                 
000104 0014      	.DW  0x14
000105 0548      	.DW  _0x1A+20
000106 015a      	.DW  _0x0*2+34
                 
000107 0010      	.DW  0x10
000108 055c      	.DW  _0x1A+40
000109 016e      	.DW  _0x0*2+54
                 
00010a 0014      	.DW  0x14
00010b 056c      	.DW  _0x24
00010c 017e      	.DW  _0x0*2+70
                 
00010d 001b      	.DW  0x1B
00010e 0580      	.DW  _0x26
00010f 0192      	.DW  _0x0*2+90
                 
000110 0017      	.DW  0x17
000111 059b      	.DW  _0x26+27
000112 01ad      	.DW  _0x0*2+117
                 
000113 0011      	.DW  0x11
000114 05b2      	.DW  _0x36
000115 01c4      	.DW  _0x0*2+140
                 
000116 0001      	.DW  0x01
000117 082f      	.DW  __seed_G101
000118 01d6      	.DW  _0x2020060*2
                 
000119 0002      	.DW  0x02
00011a 0833      	.DW  __base_y_G103
00011b 01e2      	.DW  _0x2060003*2
                 
                 _0xFFFFFFFF:
00011c 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00011d 94f8      	CLI
00011e 27ee      	CLR  R30
00011f bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000120 e0f1      	LDI  R31,1
000121 bff5      	OUT  MCUCR,R31
000122 bfe5      	OUT  MCUCR,R30
000123 93e0 006c 	STS  XMCRB,R30
                 
                 ;CLEAR R2-R14
000125 e08d      	LDI  R24,(14-2)+1
000126 e0a2      	LDI  R26,2
000127 27bb      	CLR  R27
                 __CLEAR_REG:
000128 93ed      	ST   X+,R30
000129 958a      	DEC  R24
00012a f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00012b e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00012c e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00012d e0a0      	LDI  R26,LOW(__SRAM_START)
00012e e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00012f 93ed      	ST   X+,R30
000130 9701      	SBIW R24,1
000131 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000132 eee4      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000133 e0f1      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000134 9185      	LPM  R24,Z+
000135 9195      	LPM  R25,Z+
000136 9700      	SBIW R24,0
000137 f061      	BREQ __GLOBAL_INI_END
000138 91a5      	LPM  R26,Z+
000139 91b5      	LPM  R27,Z+
00013a 9005      	LPM  R0,Z+
00013b 9015      	LPM  R1,Z+
00013c 01bf      	MOVW R22,R30
00013d 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00013e 9005      	LPM  R0,Z+
00013f 920d      	ST   X+,R0
000140 9701      	SBIW R24,1
000141 f7e1      	BRNE __GLOBAL_INI_LOOP
000142 01fb      	MOVW R30,R22
000143 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000144 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000145 bfed      	OUT  SPL,R30
000146 e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000147 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000148 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000149 e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00014a 940c 0254 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;#include <mega64.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;#include <stdlib.h>
                 ;#include <string.h>
                 ;#include <alcd.h>
                 ;
                 ;#define LED1 PORTD.0
                 ;#define LED2 PORTD.1
                 ;
                 ;typedef struct
                 ;{
                 ;    char username[20];
                 ;    char password[20];
                 ;} User;
                 ;
                 ;User predefinedUsers[] = { {"user1", "pass1"}, {"user2", "pass2"}, {"user3", "pass3"}, {"user4", "pass4"} };
                 
                 	.DSEG
                 ;User registeredUsers[10];  // Limit new users to 10
                 ;int numPredefinedUsers = sizeof(predefinedUsers) / sizeof(User);
                 ;int numRegisteredUsers = 0;
                 ;
                 ;char inputBuffer[20];
                 ;int bufferIndex = 0;
                 ;char tempPassword[20];
                 ;
                 ;char loggedUser[20];
                 ;int isRegistering = 0;
                 ;
                 ;void send_string(char *str)
                 ; 0000 001E {
                 
                 	.CSEG
                 _send_string:
                 ; .FSTART _send_string
                 ; 0000 001F     while (*str != 0)
00014c 93ba      	ST   -Y,R27
00014d 93aa      	ST   -Y,R26
                 ;	*str -> Y+0
                 _0x4:
00014e 81a8      	LD   R26,Y
00014f 81b9      	LDD  R27,Y+1
000150 91ec      	LD   R30,X
000151 30e0      	CPI  R30,0
000152 f061      	BREQ _0x6
                 ; 0000 0020     {
                 ; 0000 0021         while ((UCSR0A & (1 << UDRE0)) == 0);
                 _0x7:
000153 9b5d      	SBIS 0xB,5
000154 cffe      	RJMP _0x7
                 ; 0000 0022         UDR0 = *str;
000155 81a8      	LD   R26,Y
000156 81b9      	LDD  R27,Y+1
000157 91ec      	LD   R30,X
000158 b9ec      	OUT  0xC,R30
                 ; 0000 0023         str++;
000159 81e8      	LD   R30,Y
00015a 81f9      	LDD  R31,Y+1
00015b 9631      	ADIW R30,1
00015c 83e8      	ST   Y,R30
00015d 83f9      	STD  Y+1,R31
                 ; 0000 0024     }
00015e cfef      	RJMP _0x4
                 _0x6:
                 ; 0000 0025 }
00015f 9622      	ADIW R28,2
000160 9508      	RET
                 ; .FEND
                 ;
                 ;void check_user()
                 ; 0000 0028 {
                 _check_user:
                 ; .FSTART _check_user
                 ; 0000 0029     int i;
                 ; 0000 002A     for (i = 0; i < numPredefinedUsers; i++)
000161 931a      	ST   -Y,R17
000162 930a      	ST   -Y,R16
                 ;	i -> R16,R17
                +
000163 e000     +LDI R16 , LOW ( 0 )
000164 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0xB:
                +
000165 1504     +CP R16 , R4
000166 0515     +CPC R17 , R5
                 	__CPWRR 16,17,4,5
000167 f464      	BRGE _0xC
                 ; 0000 002B     {
                 ; 0000 002C         if (strcmp(predefinedUsers[i].username, inputBuffer) == 0)
000168 940e 0287 	CALL SUBOPT_0x0
00016a 940e 028d 	CALL SUBOPT_0x1
00016c f421      	BRNE _0xD
                 ; 0000 002D         {
                 ; 0000 002E             send_string("\nEnter Password: ");
                +
00016d e0a0     +LDI R26 , LOW ( _0xE + ( 0 ) )
00016e e0b5     +LDI R27 , HIGH ( _0xE + ( 0 ) )
                 	__POINTW2MN _0xE,0
00016f dfdc      	RCALL _send_string
                 ; 0000 002F             return;
000170 c070      	RJMP _0x20C0001
                 ; 0000 0030         }
                 ; 0000 0031     }
                 _0xD:
                +
000171 5f0f     +SUBI R16 , LOW ( - 1 )
000172 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000173 cff1      	RJMP _0xB
                 _0xC:
                 ; 0000 0032     for (i = 0; i < numRegisteredUsers; i++)
                +
000174 e000     +LDI R16 , LOW ( 0 )
000175 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x10:
                +
000176 1506     +CP R16 , R6
000177 0517     +CPC R17 , R7
                 	__CPWRR 16,17,6,7
000178 f47c      	BRGE _0x11
                 ; 0000 0033     {
                 ; 0000 0034         if (strcmp(registeredUsers[i].username, inputBuffer) == 0)
000179 940e 0287 	CALL SUBOPT_0x0
00017b 940e 0297 	CALL SUBOPT_0x2
00017d 940e 0266 	CALL _strcmp
00017f 30e0      	CPI  R30,0
000180 f421      	BRNE _0x12
                 ; 0000 0035         {
                 ; 0000 0036             send_string("\nEnter Password: ");
                +
000181 e1a2     +LDI R26 , LOW ( _0xE + ( 18 ) )
000182 e0b5     +LDI R27 , HIGH ( _0xE + ( 18 ) )
                 	__POINTW2MN _0xE,18
000183 dfc8      	RCALL _send_string
                 ; 0000 0037             return;
000184 c05c      	RJMP _0x20C0001
                 ; 0000 0038         }
                 ; 0000 0039     }
                 _0x12:
                +
000185 5f0f     +SUBI R16 , LOW ( - 1 )
000186 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000187 cfee      	RJMP _0x10
                 _0x11:
                 ; 0000 003A     // If username not found, register new user
                 ; 0000 003B     isRegistering = 1;
000188 e0e1      	LDI  R30,LOW(1)
000189 e0f0      	LDI  R31,HIGH(1)
00018a 015f      	MOVW R10,R30
                 ; 0000 003C     strcpy(registeredUsers[numRegisteredUsers].username, inputBuffer);
00018b 01f3      	MOVW R30,R6
00018c e2a8      	LDI  R26,LOW(40)
00018d e0b0      	LDI  R27,HIGH(40)
00018e 940e 02ab 	CALL __MULW12U
000190 940e 0297 	CALL SUBOPT_0x2
000192 940e 027a 	CALL _strcpy
                 ; 0000 003D     send_string("\nNew Password: ");
                +
000194 e2a4     +LDI R26 , LOW ( _0xE + ( 36 ) )
000195 e0b5     +LDI R27 , HIGH ( _0xE + ( 36 ) )
                 	__POINTW2MN _0xE,36
000196 dfb5      	RCALL _send_string
                 ; 0000 003E }
000197 c049      	RJMP _0x20C0001
                 ; .FEND
                 
                 	.DSEG
                 _0xE:
000500           	.BYTE 0x34
                 ;
                 ;void check_password()
                 ; 0000 0041 {
                 
                 	.CSEG
                 _check_password:
                 ; .FSTART _check_password
                 ; 0000 0042     int i;
                 ; 0000 0043     for (i = 0; i < numPredefinedUsers; i++)
000198 931a      	ST   -Y,R17
000199 930a      	ST   -Y,R16
                 ;	i -> R16,R17
                +
00019a e000     +LDI R16 , LOW ( 0 )
00019b e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x14:
                +
00019c 1504     +CP R16 , R4
00019d 0515     +CPC R17 , R5
                 	__CPWRR 16,17,4,5
00019e f4dc      	BRGE _0x15
                 ; 0000 0044     {
                 ; 0000 0045         if (strcmp(predefinedUsers[i].username, inputBuffer) == 0)
00019f 940e 0287 	CALL SUBOPT_0x0
0001a1 940e 028d 	CALL SUBOPT_0x1
0001a3 f499      	BRNE _0x16
                 ; 0000 0046         {
                 ; 0000 0047             if (strcmp(predefinedUsers[i].password, inputBuffer) == 0)
0001a4 940e 0287 	CALL SUBOPT_0x0
                +
0001a6 52e9     +SUBI R30 , LOW ( - _predefinedUsers - ( 20 ) )
0001a7 4ffa     +SBCI R31 , HIGH ( - _predefinedUsers - ( 20 ) )
                 	__ADDW1MN _predefinedUsers,20
0001a8 940e 029e 	CALL SUBOPT_0x3
0001aa f461      	BRNE _0x17
                 ; 0000 0048             {
                 ; 0000 0049                 strcpy(loggedUser, predefinedUsers[i].username);
0001ab 940e 02a6 	CALL SUBOPT_0x4
0001ad 53ed      	SUBI R30,LOW(-_predefinedUsers)
0001ae 4ffa      	SBCI R31,HIGH(-_predefinedUsers)
0001af 01df      	MOVW R26,R30
0001b0 940e 027a 	CALL _strcpy
                 ; 0000 004A                 LED2 = 1; // Turn on the LED2
0001b2 9a91      	SBI  0x12,1
                 ; 0000 004B                 send_string("\nLogin Successful!\n");
                +
0001b3 e3a4     +LDI R26 , LOW ( _0x1A + ( 0 ) )
0001b4 e0b5     +LDI R27 , HIGH ( _0x1A + ( 0 ) )
                 	__POINTW2MN _0x1A,0
0001b5 df96      	RCALL _send_string
                 ; 0000 004C                 return;
0001b6 c02a      	RJMP _0x20C0001
                 ; 0000 004D             }
                 ; 0000 004E         }
                 _0x17:
                 ; 0000 004F     }
                 _0x16:
                +
0001b7 5f0f     +SUBI R16 , LOW ( - 1 )
0001b8 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0001b9 cfe2      	RJMP _0x14
                 _0x15:
                 ; 0000 0050     for (i = 0; i < numRegisteredUsers; i++)
                +
0001ba e000     +LDI R16 , LOW ( 0 )
0001bb e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x1C:
                +
0001bc 1506     +CP R16 , R6
0001bd 0517     +CPC R17 , R7
                 	__CPWRR 16,17,6,7
0001be f4f4      	BRGE _0x1D
                 ; 0000 0051     {
                 ; 0000 0052         if (strcmp(registeredUsers[i].username, inputBuffer) == 0)
0001bf 940e 0287 	CALL SUBOPT_0x0
0001c1 940e 0297 	CALL SUBOPT_0x2
0001c3 940e 0266 	CALL _strcmp
0001c5 30e0      	CPI  R30,0
0001c6 f499      	BRNE _0x1E
                 ; 0000 0053         {
                 ; 0000 0054             if (strcmp(registeredUsers[i].password, inputBuffer) == 0)
0001c7 940e 0287 	CALL SUBOPT_0x0
                +
0001c9 58e9     +SUBI R30 , LOW ( - _registeredUsers - ( 20 ) )
0001ca 4ff9     +SBCI R31 , HIGH ( - _registeredUsers - ( 20 ) )
                 	__ADDW1MN _registeredUsers,20
0001cb 940e 029e 	CALL SUBOPT_0x3
0001cd f461      	BRNE _0x1F
                 ; 0000 0055             {
                 ; 0000 0056                 strcpy(loggedUser, registeredUsers[i].username);
0001ce 940e 02a6 	CALL SUBOPT_0x4
0001d0 59ed      	SUBI R30,LOW(-_registeredUsers)
0001d1 4ff9      	SBCI R31,HIGH(-_registeredUsers)
0001d2 01df      	MOVW R26,R30
0001d3 940e 027a 	CALL _strcpy
                 ; 0000 0057                 LED2 = 1; // Turn on the LED2
0001d5 9a91      	SBI  0x12,1
                 ; 0000 0058                 send_string("\nLogin Successful!\n");
                +
0001d6 e4a8     +LDI R26 , LOW ( _0x1A + ( 20 ) )
0001d7 e0b5     +LDI R27 , HIGH ( _0x1A + ( 20 ) )
                 	__POINTW2MN _0x1A,20
0001d8 df73      	RCALL _send_string
                 ; 0000 0059                 return;
0001d9 c007      	RJMP _0x20C0001
                 ; 0000 005A             }
                 ; 0000 005B         }
                 _0x1F:
                 ; 0000 005C     }
                 _0x1E:
                +
0001da 5f0f     +SUBI R16 , LOW ( - 1 )
0001db 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0001dc cfdf      	RJMP _0x1C
                 _0x1D:
                 ; 0000 005D     send_string("\nLogin Failed!\n");
                +
0001dd e5ac     +LDI R26 , LOW ( _0x1A + ( 40 ) )
0001de e0b5     +LDI R27 , HIGH ( _0x1A + ( 40 ) )
                 	__POINTW2MN _0x1A,40
0001df df6c      	RCALL _send_string
                 ; 0000 005E     LED2 = 0; // Turn off the LED2
0001e0 9891      	CBI  0x12,1
                 ; 0000 005F }
                 _0x20C0001:
0001e1 9109      	LD   R16,Y+
0001e2 9119      	LD   R17,Y+
0001e3 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x1A:
000534           	.BYTE 0x38
                 ;
                 ;void check_new_password()
                 ; 0000 0062 {
                 
                 	.CSEG
                 _check_new_password:
                 ; .FSTART _check_new_password
                 ; 0000 0063     strcpy(tempPassword, inputBuffer);
0001e4 e0e7      	LDI  R30,LOW(_tempPassword)
0001e5 e0f8      	LDI  R31,HIGH(_tempPassword)
0001e6 93fa      	ST   -Y,R31
0001e7 93ea      	ST   -Y,R30
0001e8 efa3      	LDI  R26,LOW(_inputBuffer)
0001e9 e0b7      	LDI  R27,HIGH(_inputBuffer)
0001ea 940e 027a 	CALL _strcpy
                 ; 0000 0064     send_string("\nConfirm Password: ");
                +
0001ec e6ac     +LDI R26 , LOW ( _0x24 + ( 0 ) )
0001ed e0b5     +LDI R27 , HIGH ( _0x24 + ( 0 ) )
                 	__POINTW2MN _0x24,0
0001ee df5d      	RCALL _send_string
                 ; 0000 0065 }
0001ef 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x24:
00056c           	.BYTE 0x14
                 ;
                 ;void check_confirm_password()
                 ; 0000 0068 {
                 
                 	.CSEG
                 _check_confirm_password:
                 ; .FSTART _check_confirm_password
                 ; 0000 0069     if (strcmp(tempPassword, inputBuffer) == 0)
0001f0 e0e7      	LDI  R30,LOW(_tempPassword)
0001f1 e0f8      	LDI  R31,HIGH(_tempPassword)
0001f2 940e 029e 	CALL SUBOPT_0x3
0001f4 f499      	BRNE _0x25
                 ; 0000 006A     {
                 ; 0000 006B         strcpy(registeredUsers[numRegisteredUsers].password, tempPassword);
0001f5 01f3      	MOVW R30,R6
0001f6 e2a8      	LDI  R26,LOW(40)
0001f7 e0b0      	LDI  R27,HIGH(40)
0001f8 940e 02ab 	CALL __MULW12U
                +
0001fa 58e9     +SUBI R30 , LOW ( - _registeredUsers - ( 20 ) )
0001fb 4ff9     +SBCI R31 , HIGH ( - _registeredUsers - ( 20 ) )
                 	__ADDW1MN _registeredUsers,20
0001fc 93fa      	ST   -Y,R31
0001fd 93ea      	ST   -Y,R30
0001fe e0a7      	LDI  R26,LOW(_tempPassword)
0001ff e0b8      	LDI  R27,HIGH(_tempPassword)
000200 940e 027a 	CALL _strcpy
                 ; 0000 006C         numRegisteredUsers++;
000202 01f3      	MOVW R30,R6
000203 9631      	ADIW R30,1
000204 013f      	MOVW R6,R30
                 ; 0000 006D         send_string("\nRegistration Successful!\n");
                +
000205 e8a0     +LDI R26 , LOW ( _0x26 + ( 0 ) )
000206 e0b5     +LDI R27 , HIGH ( _0x26 + ( 0 ) )
                 	__POINTW2MN _0x26,0
000207 c002      	RJMP _0x3B
                 ; 0000 006E     }
                 ; 0000 006F     else
                 _0x25:
                 ; 0000 0070     {
                 ; 0000 0071         send_string("\nRegistration Failed!\n");
                +
000208 e9ab     +LDI R26 , LOW ( _0x26 + ( 27 ) )
000209 e0b5     +LDI R27 , HIGH ( _0x26 + ( 27 ) )
                 	__POINTW2MN _0x26,27
                 _0x3B:
00020a df41      	RCALL _send_string
                 ; 0000 0072     }
                 ; 0000 0073     isRegistering = 0;
00020b 24aa      	CLR  R10
00020c 24bb      	CLR  R11
                 ; 0000 0074 }
00020d 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x26:
000580           	.BYTE 0x32
                 ;
                 ;interrupt [USART0_RXC] void usart_rx_isr(void)
                 ; 0000 0077 {
                 
                 	.CSEG
                 _usart_rx_isr:
                 ; .FSTART _usart_rx_isr
00020e 920a      	ST   -Y,R0
00020f 921a      	ST   -Y,R1
000210 92fa      	ST   -Y,R15
000211 936a      	ST   -Y,R22
000212 937a      	ST   -Y,R23
000213 938a      	ST   -Y,R24
000214 939a      	ST   -Y,R25
000215 93aa      	ST   -Y,R26
000216 93ba      	ST   -Y,R27
000217 93ea      	ST   -Y,R30
000218 93fa      	ST   -Y,R31
000219 b7ef      	IN   R30,SREG
00021a 93ea      	ST   -Y,R30
                 ; 0000 0078     char data = UDR0;
                 ; 0000 0079     if (data == '\n')
00021b 931a      	ST   -Y,R17
                 ;	data -> R17
00021c b11c      	IN   R17,12
00021d 301a      	CPI  R17,10
00021e f4f9      	BRNE _0x28
                 ; 0000 007A     {
                 ; 0000 007B         inputBuffer[bufferIndex] = '\0'; // Null-terminate the received string
00021f efa3      	LDI  R26,LOW(_inputBuffer)
000220 e0b7      	LDI  R27,HIGH(_inputBuffer)
000221 0da8      	ADD  R26,R8
000222 1db9      	ADC  R27,R9
000223 e0e0      	LDI  R30,LOW(0)
000224 93ec      	ST   X,R30
                 ; 0000 007C         if (loggedUser[0] == '\0')
000225 91e0 081b 	LDS  R30,_loggedUser
000227 30e0      	CPI  R30,0
000228 f489      	BRNE _0x29
                 ; 0000 007D         {
                 ; 0000 007E             if (isRegistering == 0)
000229 2c0a      	MOV  R0,R10
00022a 280b      	OR   R0,R11
00022b f411      	BRNE _0x2A
                 ; 0000 007F             {
                 ; 0000 0080                 check_user();
00022c df34      	RCALL _check_user
                 ; 0000 0081             }
                 ; 0000 0082             else if (isRegistering == 1)
00022d c00b      	RJMP _0x2B
                 _0x2A:
00022e e0e1      	LDI  R30,LOW(1)
00022f e0f0      	LDI  R31,HIGH(1)
000230 15ea      	CP   R30,R10
000231 05fb      	CPC  R31,R11
000232 f429      	BRNE _0x2C
                 ; 0000 0083             {
                 ; 0000 0084                 check_new_password();
000233 dfb0      	RCALL _check_new_password
                 ; 0000 0085                 isRegistering++;
000234 01f5      	MOVW R30,R10
000235 9631      	ADIW R30,1
000236 015f      	MOVW R10,R30
                 ; 0000 0086             }
                 ; 0000 0087             else
000237 c001      	RJMP _0x2D
                 _0x2C:
                 ; 0000 0088             {
                 ; 0000 0089                 check_confirm_password();
000238 dfb7      	RCALL _check_confirm_password
                 ; 0000 008A             }
                 _0x2D:
                 _0x2B:
                 ; 0000 008B         }
                 ; 0000 008C         else
000239 c001      	RJMP _0x2E
                 _0x29:
                 ; 0000 008D         {
                 ; 0000 008E             check_password();
00023a df5d      	RCALL _check_password
                 ; 0000 008F         }
                 _0x2E:
                 ; 0000 0090         bufferIndex = 0;
00023b 2488      	CLR  R8
00023c 2499      	CLR  R9
                 ; 0000 0091     }
                 ; 0000 0092     else
00023d c007      	RJMP _0x2F
                 _0x28:
                 ; 0000 0093     {
                 ; 0000 0094         inputBuffer[bufferIndex] = data;
00023e 01f4      	MOVW R30,R8
00023f 50ed      	SUBI R30,LOW(-_inputBuffer)
000240 4ff8      	SBCI R31,HIGH(-_inputBuffer)
000241 8310      	ST   Z,R17
                 ; 0000 0095         bufferIndex++;
000242 01f4      	MOVW R30,R8
000243 9631      	ADIW R30,1
000244 014f      	MOVW R8,R30
                 ; 0000 0096     }
                 _0x2F:
                 ; 0000 0097 }
000245 9119      	LD   R17,Y+
000246 91e9      	LD   R30,Y+
000247 bfef      	OUT  SREG,R30
000248 91f9      	LD   R31,Y+
000249 91e9      	LD   R30,Y+
00024a 91b9      	LD   R27,Y+
00024b 91a9      	LD   R26,Y+
00024c 9199      	LD   R25,Y+
00024d 9189      	LD   R24,Y+
00024e 9179      	LD   R23,Y+
00024f 9169      	LD   R22,Y+
000250 90f9      	LD   R15,Y+
000251 9019      	LD   R1,Y+
000252 9009      	LD   R0,Y+
000253 9518      	RETI
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 009A {
                 _main:
                 ; .FSTART _main
                 ; 0000 009B     // Port D is output for LEDs
                 ; 0000 009C     DDRD.0 = 1;
000254 9a88      	SBI  0x11,0
                 ; 0000 009D     DDRD.1 = 1;
000255 9a89      	SBI  0x11,1
                 ; 0000 009E 
                 ; 0000 009F     // Turn on the LED1
                 ; 0000 00A0     LED1 = 1;
000256 9a90      	SBI  0x12,0
                 ; 0000 00A1 
                 ; 0000 00A2     // Initialize USART
                 ; 0000 00A3     UCSR0A = 0x00;
000257 e0e0      	LDI  R30,LOW(0)
000258 b9eb      	OUT  0xB,R30
                 ; 0000 00A4     UCSR0B = 0x18;
000259 e1e8      	LDI  R30,LOW(24)
00025a b9ea      	OUT  0xA,R30
                 ; 0000 00A5     UCSR0C = 0x06;
00025b e0e6      	LDI  R30,LOW(6)
00025c 93e0 0095 	STS  149,R30
                 ; 0000 00A6     UBRR0L = 51; // for 9600 bps with 8MHz clock
00025e e3e3      	LDI  R30,LOW(51)
00025f b9e9      	OUT  0x9,R30
                 ; 0000 00A7 
                 ; 0000 00A8     // Enable Global Interrupts
                 ; 0000 00A9     #asm("sei")
000260 9478      	sei
                 ; 0000 00AA 
                 ; 0000 00AB     send_string("Enter Username: ");
                +
000261 eba2     +LDI R26 , LOW ( _0x36 + ( 0 ) )
000262 e0b5     +LDI R27 , HIGH ( _0x36 + ( 0 ) )
                 	__POINTW2MN _0x36,0
000263 dee8      	RCALL _send_string
                 ; 0000 00AC 
                 ; 0000 00AD     while (1)
                 _0x37:
                 ; 0000 00AE     {
                 ; 0000 00AF         // Your code here
                 ; 0000 00B0     }
000264 cfff      	RJMP _0x37
                 ; 0000 00B1 }
                 _0x3A:
000265 cfff      	RJMP _0x3A
                 ; .FEND
                 
                 	.DSEG
                 _0x36:
0005b2           	.BYTE 0x11
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _strcmp:
                 ; .FSTART _strcmp
000266 93ba      	ST   -Y,R27
000267 93aa      	ST   -Y,R26
000268 91e9          ld   r30,y+
000269 91f9          ld   r31,y+
00026a 91a9          ld   r26,y+
00026b 91b9          ld   r27,y+
                 strcmp0:
00026c 916d          ld   r22,x+
00026d 9171          ld   r23,z+
00026e 1767          cp   r22,r23
00026f f421          brne strcmp1
000270 2366          tst  r22
000271 f7d1          brne strcmp0
                 strcmp3:
000272 27ee          clr  r30
000273 9508          ret
                 strcmp1:
000274 1b67          sub  r22,r23
000275 f3e1          breq strcmp3
000276 e0e1          ldi  r30,1
000277 f408          brcc strcmp2
000278 50e2          subi r30,2
                 strcmp2:
000279 9508          ret
                 ; .FEND
                 _strcpy:
                 ; .FSTART _strcpy
00027a 93ba      	ST   -Y,R27
00027b 93aa      	ST   -Y,R26
00027c 91e9          ld   r30,y+
00027d 91f9          ld   r31,y+
00027e 91a9          ld   r26,y+
00027f 91b9          ld   r27,y+
000280 01cd          movw r24,r26
                 strcpy0:
000281 9161          ld   r22,z+
000282 936d          st   x+,r22
000283 2366          tst  r22
000284 f7e1          brne strcpy0
000285 01fc          movw r30,r24
000286 9508          ret
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _predefinedUsers:
0005c3           	.BYTE 0xA0
                 _registeredUsers:
000663           	.BYTE 0x190
                 _inputBuffer:
0007f3           	.BYTE 0x14
                 _tempPassword:
000807           	.BYTE 0x14
                 _loggedUser:
00081b           	.BYTE 0x14
                 __seed_G101:
00082f           	.BYTE 0x4
                 __base_y_G103:
000833           	.BYTE 0x4
                 __lcd_maxx:
000837           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x0:
                +
000287 e2a8     +LDI R26 , 40
000288 9fa0     +MUL R26 , R16
000289 01f0     +MOVW R30 , R0
00028a 9fa1     +MUL R26 , R17
00028b 0df0     +ADD R31 , R0
                 	__MULBNWRU 16,17,40
00028c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x1:
00028d 53ed      	SUBI R30,LOW(-_predefinedUsers)
00028e 4ffa      	SBCI R31,HIGH(-_predefinedUsers)
00028f 93fa      	ST   -Y,R31
000290 93ea      	ST   -Y,R30
000291 efa3      	LDI  R26,LOW(_inputBuffer)
000292 e0b7      	LDI  R27,HIGH(_inputBuffer)
000293 940e 0266 	CALL _strcmp
000295 30e0      	CPI  R30,0
000296 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x2:
000297 59ed      	SUBI R30,LOW(-_registeredUsers)
000298 4ff9      	SBCI R31,HIGH(-_registeredUsers)
000299 93fa      	ST   -Y,R31
00029a 93ea      	ST   -Y,R30
00029b efa3      	LDI  R26,LOW(_inputBuffer)
00029c e0b7      	LDI  R27,HIGH(_inputBuffer)
00029d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x3:
00029e 93fa      	ST   -Y,R31
00029f 93ea      	ST   -Y,R30
0002a0 efa3      	LDI  R26,LOW(_inputBuffer)
0002a1 e0b7      	LDI  R27,HIGH(_inputBuffer)
0002a2 940e 0266 	CALL _strcmp
0002a4 30e0      	CPI  R30,0
0002a5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
0002a6 e1eb      	LDI  R30,LOW(_loggedUser)
0002a7 e0f8      	LDI  R31,HIGH(_loggedUser)
0002a8 93fa      	ST   -Y,R31
0002a9 93ea      	ST   -Y,R30
0002aa cfdc      	RJMP SUBOPT_0x0
                 
                 
                 	.CSEG
                 __MULW12U:
0002ab 9ffa      	MUL  R31,R26
0002ac 2df0      	MOV  R31,R0
0002ad 9feb      	MUL  R30,R27
0002ae 0df0      	ADD  R31,R0
0002af 9fea      	MUL  R30,R26
0002b0 2de0      	MOV  R30,R0
0002b1 0df1      	ADD  R31,R1
0002b2 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega64 register use summary:
r0 :  13 r1 :   4 r2 :   0 r3 :   0 r4 :   2 r5 :   2 r6 :   6 r7 :   2 
r8 :   5 r9 :   2 r10:   6 r11:   3 r12:   0 r13:   0 r14:   0 r15:   2 
r16:  16 r17:  21 r18:   0 r19:   0 r20:   0 r21:   0 r22:  11 r23:   5 
r24:  11 r25:   4 r26:  39 r27:  32 r28:   2 r29:   1 r30:  88 r31:  34 
x  :   8 y  :  66 z  :  10 
Registers used: 26 out of 35 (74.3%)

ATmega64 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   4 
adiw  :   5 and   :   0 andi  :   0 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   3 
brge  :   4 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :  17 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  27 
cbi   :   1 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   7 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   6 cpc   :   5 cpi   :   7 cpse  :   0 dec   :   1 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   2 inc   :   0 jmp   :  36 ld    :  31 ldd   :   3 ldi   :  74 
lds   :   1 lpm   :   7 lsl   :   0 lsr   :   0 mov   :   3 movw  :  18 
mul   :   5 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   1 
ori   :   0 out   :  10 pop   :   0 push  :   0 rcall :  13 ret   :  12 
reti  :   1 rjmp  :  20 rol   :   0 ror   :   0 sbc   :   0 sbci  :  12 
sbi   :   5 sbic  :   0 sbis  :   1 sbiw  :   3 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  42 std   :   1 sts   :   2 sub   :   1 subi  :  13 swap  :   0 
tst   :   2 wdr   :   0 
Instructions used: 42 out of 116 (36.2%)

ATmega64 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000566    952    430   1382   65536   2.1%
[.dseg] 0x000100 0x000838      0    824    824    4096  20.1%
[.eseg] 0x000000 0x000000      0      0      0    2048   0.0%

Assembly complete, 0 errors, 14 warnings
