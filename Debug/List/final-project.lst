
AVRASM ver. 2.1.30  D:\Uni\Term-8\riz-lab\Project\Debug\List\final-project.asm Tue Jul 04 13:57:55 2023

D:\Uni\Term-8\riz-lab\Project\Debug\List\final-project.asm(1089): warning: Register r4 already defined by the .DEF directive
D:\Uni\Term-8\riz-lab\Project\Debug\List\final-project.asm(1090): warning: Register r5 already defined by the .DEF directive
D:\Uni\Term-8\riz-lab\Project\Debug\List\final-project.asm(1091): warning: Register r6 already defined by the .DEF directive
D:\Uni\Term-8\riz-lab\Project\Debug\List\final-project.asm(1092): warning: Register r7 already defined by the .DEF directive
D:\Uni\Term-8\riz-lab\Project\Debug\List\final-project.asm(1093): warning: Register r8 already defined by the .DEF directive
D:\Uni\Term-8\riz-lab\Project\Debug\List\final-project.asm(1094): warning: Register r9 already defined by the .DEF directive
D:\Uni\Term-8\riz-lab\Project\Debug\List\final-project.asm(1095): warning: Register r10 already defined by the .DEF directive
D:\Uni\Term-8\riz-lab\Project\Debug\List\final-project.asm(1096): warning: Register r11 already defined by the .DEF directive
D:\Uni\Term-8\riz-lab\Project\Debug\List\final-project.asm(1097): warning: Register r12 already defined by the .DEF directive
D:\Uni\Term-8\riz-lab\Project\Debug\List\final-project.asm(1098): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega64
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 1024 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega64
                 	#pragma AVRPART MEMORY PROG_FLASH 65536
                 	#pragma AVRPART MEMORY EEPROM 2048
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4096
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _adc_result=R4
                 	.DEF _adc_result_msb=R5
                 	.DEF _numPredefinedUsers=R6
                 	.DEF _numPredefinedUsers_msb=R7
                 	.DEF _numRegisteredUsers=R8
                 	.DEF _numRegisteredUsers_msb=R9
                 	.DEF _bufferIndex=R10
                 	.DEF _bufferIndex_msb=R11
                 	.DEF _isRegistering=R12
                 	.DEF _isRegistering_msb=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 01c6 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 02e7 	JMP  _usart_rx_isr
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
000046 2710
000047 03e8
000048 0064
000049 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00004a 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00004b 1000
00004c 0100
00004d 0010
00004e 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00004f 0004
000050 0000      	.DB  0x4,0x0,0x0,0x0
000051 0000
000052 0000      	.DB  0x0,0x0,0x0,0x0
                 
                 _0x3:
000053 7375
000054 7265
000055 0031
000056 0000      	.DB  0x75,0x73,0x65,0x72,0x31,0x0,0x0,0x0
000057 0000
000058 0000
000059 0000
00005a 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00005b 0000
00005c 0000
00005d 6170
00005e 7373      	.DB  0x0,0x0,0x0,0x0,0x70,0x61,0x73,0x73
00005f 0031
000060 0000
000061 0000
000062 0000      	.DB  0x31,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000063 0000
000064 0000
000065 0000
000066 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000067 7375
000068 7265
000069 0032
00006a 0000      	.DB  0x75,0x73,0x65,0x72,0x32,0x0,0x0,0x0
00006b 0000
00006c 0000
00006d 0000
00006e 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00006f 0000
000070 0000
000071 6170
000072 7373      	.DB  0x0,0x0,0x0,0x0,0x70,0x61,0x73,0x73
000073 0032
000074 0000
000075 0000
000076 0000      	.DB  0x32,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000077 0000
000078 0000
000079 0000
00007a 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00007b 7375
00007c 7265
00007d 0033
00007e 0000      	.DB  0x75,0x73,0x65,0x72,0x33,0x0,0x0,0x0
00007f 0000
000080 0000
000081 0000
000082 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000083 0000
000084 0000
000085 6170
000086 7373      	.DB  0x0,0x0,0x0,0x0,0x70,0x61,0x73,0x73
000087 0033
000088 0000
000089 0000
00008a 0000      	.DB  0x33,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00008b 0000
00008c 0000
00008d 0000
00008e 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00008f 7375
000090 7265
000091 0034
000092 0000      	.DB  0x75,0x73,0x65,0x72,0x34,0x0,0x0,0x0
000093 0000
000094 0000
000095 0000
000096 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000097 0000
000098 0000
000099 6170
00009a 7373      	.DB  0x0,0x0,0x0,0x0,0x70,0x61,0x73,0x73
D:\Uni\Term-8\riz-lab\Project\Debug\List\final-project.asm(1173): warning: .cseg .db misalignment - padding zero byte
00009b 0034      	.DB  0x34
                 _0x5:
00009c 0500
00009d 0514
00009e 0526      	.DB  LOW(_0x4),HIGH(_0x4),LOW(_0x4+20),HIGH(_0x4+20),LOW(_0x4+38),HIGH(_0x4+38)
                 _0x6:
D:\Uni\Term-8\riz-lab\Project\Debug\List\final-project.asm(1177): warning: .cseg .db misalignment - padding zero byte
00009f 0003      	.DB  0x3
                 _0x7:
0000a0 3231
0000a1 4133
0000a2 3534
0000a3 4236      	.DB  0x31,0x32,0x33,0x41,0x34,0x35,0x36,0x42
0000a4 3837
0000a5 4339
0000a6 302a
0000a7 4423      	.DB  0x37,0x38,0x39,0x43,0x2A,0x30,0x23,0x44
                 _0x3C:
0000a8 063f
0000a9 4f5b
0000aa 6d66
0000ab 077d      	.DB  0x3F,0x6,0x5B,0x4F,0x66,0x6D,0x7D,0x7
0000ac 6f7f      	.DB  0x7F,0x6F
                 _0x3E:
0000ad 0000
0000ae bf80      	.DB  0x0,0x0,0x80,0xBF
                 _0x0:
0000af 6f56
0000b0 746c
0000b1 6761
0000b2 2065      	.DB  0x56,0x6F,0x6C,0x74,0x61,0x67,0x65,0x20
0000b3 656d
0000b4 7361
0000b5 7275
0000b6 6d65      	.DB  0x6D,0x65,0x61,0x73,0x75,0x72,0x65,0x6D
0000b7 6e65
0000b8 0074
0000b9 6553
0000ba 7474      	.DB  0x65,0x6E,0x74,0x0,0x53,0x65,0x74,0x74
0000bb 6e69
0000bc 2067
0000bd 6874
0000be 2065      	.DB  0x69,0x6E,0x67,0x20,0x74,0x68,0x65,0x20
0000bf 6c63
0000c0 636f
0000c1 006b
0000c2 7541      	.DB  0x63,0x6C,0x6F,0x63,0x6B,0x0,0x41,0x75
0000c3 6f74
0000c4 616d
0000c5 6974
0000c6 2063      	.DB  0x74,0x6F,0x6D,0x61,0x74,0x69,0x63,0x20
0000c7 6873
0000c8 7475
0000c9 6f64
0000ca 6e77      	.DB  0x73,0x68,0x75,0x74,0x64,0x6F,0x77,0x6E
0000cb 0a00
0000cc 6e45
0000cd 6574
0000ce 2072      	.DB  0x0,0xA,0x45,0x6E,0x74,0x65,0x72,0x20
0000cf 6150
0000d0 7373
0000d1 6f77
0000d2 6472      	.DB  0x50,0x61,0x73,0x73,0x77,0x6F,0x72,0x64
0000d3 203a
0000d4 0a00
0000d5 654e
0000d6 2077      	.DB  0x3A,0x20,0x0,0xA,0x4E,0x65,0x77,0x20
0000d7 6150
0000d8 7373
0000d9 6f77
0000da 6472      	.DB  0x50,0x61,0x73,0x73,0x77,0x6F,0x72,0x64
0000db 203a
0000dc 0a00
0000dd 6f4c
0000de 6967      	.DB  0x3A,0x20,0x0,0xA,0x4C,0x6F,0x67,0x69
0000df 206e
0000e0 7553
0000e1 6363
0000e2 7365      	.DB  0x6E,0x20,0x53,0x75,0x63,0x63,0x65,0x73
0000e3 6673
0000e4 6c75
0000e5 0a21
0000e6 0a00      	.DB  0x73,0x66,0x75,0x6C,0x21,0xA,0x0,0xA
0000e7 6f4c
0000e8 6967
0000e9 206e
0000ea 6146      	.DB  0x4C,0x6F,0x67,0x69,0x6E,0x20,0x46,0x61
0000eb 6c69
0000ec 6465
0000ed 0a21
0000ee 0a00      	.DB  0x69,0x6C,0x65,0x64,0x21,0xA,0x0,0xA
0000ef 6f43
0000f0 666e
0000f1 7269
0000f2 206d      	.DB  0x43,0x6F,0x6E,0x66,0x69,0x72,0x6D,0x20
0000f3 6150
0000f4 7373
0000f5 6f77
0000f6 6472      	.DB  0x50,0x61,0x73,0x73,0x77,0x6F,0x72,0x64
0000f7 203a
0000f8 0a00
0000f9 6552
0000fa 6967      	.DB  0x3A,0x20,0x0,0xA,0x52,0x65,0x67,0x69
0000fb 7473
0000fc 6172
0000fd 6974
0000fe 6e6f      	.DB  0x73,0x74,0x72,0x61,0x74,0x69,0x6F,0x6E
0000ff 5320
000100 6375
000101 6563
000102 7373      	.DB  0x20,0x53,0x75,0x63,0x63,0x65,0x73,0x73
000103 7566
000104 216c
000105 000a
000106 520a      	.DB  0x66,0x75,0x6C,0x21,0xA,0x0,0xA,0x52
000107 6765
000108 7369
000109 7274
00010a 7461      	.DB  0x65,0x67,0x69,0x73,0x74,0x72,0x61,0x74
00010b 6f69
00010c 206e
00010d 6146
00010e 6c69      	.DB  0x69,0x6F,0x6E,0x20,0x46,0x61,0x69,0x6C
00010f 6465
000110 0a21
000111 5600
000112 6c6f      	.DB  0x65,0x64,0x21,0xA,0x0,0x56,0x6F,0x6C
000113 6174
000114 6567
000115 203a
000116 2e25      	.DB  0x74,0x61,0x67,0x65,0x3A,0x20,0x25,0x2E
000117 6632
000118 0056
000119 450a
00011a 746e      	.DB  0x32,0x66,0x56,0x0,0xA,0x45,0x6E,0x74
00011b 7265
00011c 7420
00011d 6d69
00011e 2065      	.DB  0x65,0x72,0x20,0x74,0x69,0x6D,0x65,0x20
00011f 4828
000120 3a48
000121 4d4d
000122 533a      	.DB  0x28,0x48,0x48,0x3A,0x4D,0x4D,0x3A,0x53
000123 2953
000124 203a
000125 2500
000126 3a64      	.DB  0x53,0x29,0x3A,0x20,0x0,0x25,0x64,0x3A
000127 6425
000128 253a
000129 0064
00012a 6954      	.DB  0x25,0x64,0x3A,0x25,0x64,0x0,0x54,0x69
00012b 656d
00012c 203a
00012d 3025
00012e 6432      	.DB  0x6D,0x65,0x3A,0x20,0x25,0x30,0x32,0x64
00012f 253a
000130 3230
000131 3a64
000132 3025      	.DB  0x3A,0x25,0x30,0x32,0x64,0x3A,0x25,0x30
000133 6432
000134 0a00
000135 6e45
000136 6574      	.DB  0x32,0x64,0x0,0xA,0x45,0x6E,0x74,0x65
000137 2072
000138 6873
000139 7475
00013a 6f64      	.DB  0x72,0x20,0x73,0x68,0x75,0x74,0x64,0x6F
00013b 6e77
00013c 6420
00013d 7275
00013e 7461      	.DB  0x77,0x6E,0x20,0x64,0x75,0x72,0x61,0x74
00013f 6f69
000140 206e
000141 4d28
000142 3a4d      	.DB  0x69,0x6F,0x6E,0x20,0x28,0x4D,0x4D,0x3A
000143 5353
000144 3a29
000145 0020
000146 6853      	.DB  0x53,0x53,0x29,0x3A,0x20,0x0,0x53,0x68
000147 7475
000148 6f64
000149 6e77
00014a 6920      	.DB  0x75,0x74,0x64,0x6F,0x77,0x6E,0x20,0x69
00014b 206e
00014c 3025
00014d 6432
00014e 253a      	.DB  0x6E,0x20,0x25,0x30,0x32,0x64,0x3A,0x25
00014f 3230
000150 0064
000151 6e45
000152 6574      	.DB  0x30,0x32,0x64,0x0,0x45,0x6E,0x74,0x65
000153 2072
000154 7355
000155 7265
000156 616e      	.DB  0x72,0x20,0x55,0x73,0x65,0x72,0x6E,0x61
000157 656d
000158 203a
000159 4900
00015a 766e      	.DB  0x6D,0x65,0x3A,0x20,0x0,0x49,0x6E,0x76
00015b 6c61
00015c 6469
00015d 4f20
00015e 7470      	.DB  0x61,0x6C,0x69,0x64,0x20,0x4F,0x70,0x74
00015f 6f69
000160 006e
000161 2e31
000162 6f56      	.DB  0x69,0x6F,0x6E,0x0,0x31,0x2E,0x56,0x6F
000163 746c
000164 3220
000165 432e
000166 6f6c      	.DB  0x6C,0x74,0x20,0x32,0x2E,0x43,0x6C,0x6F
000167 6b63
000168 3320
000169 532e
00016a 7568      	.DB  0x63,0x6B,0x20,0x33,0x2E,0x53,0x68,0x75
00016b 0074
00016c 654d
00016d 756e
00016e 203a      	.DB  0x74,0x0,0x4D,0x65,0x6E,0x75,0x3A,0x20
D:\Uni\Term-8\riz-lab\Project\Debug\List\final-project.asm(1235): warning: .cseg .db misalignment - padding zero byte
00016f 0000      	.DB  0x0
                 _0x2020060:
D:\Uni\Term-8\riz-lab\Project\Debug\List\final-project.asm(1237): warning: .cseg .db misalignment - padding zero byte
000170 0001      	.DB  0x1
                 _0x2020000:
000171 4e2d
000172 4e41
000173 4900
000174 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
D:\Uni\Term-8\riz-lab\Project\Debug\List\final-project.asm(1240): warning: .cseg .db misalignment - padding zero byte
000175 0000      	.DB  0x0
                 _0x2060003:
000176 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000177 0008      	.DW  0x08
000178 0006      	.DW  0x06
000179 009e      	.DW  __REG_VARS*2
                 
00017a 0091      	.DW  0x91
00017b 065f      	.DW  _predefinedUsers
00017c 00a6      	.DW  _0x3*2
                 
00017d 0014      	.DW  0x14
00017e 0500      	.DW  _0x4
00017f 015e      	.DW  _0x0*2
                 
000180 0012      	.DW  0x12
000181 0514      	.DW  _0x4+20
000182 0172      	.DW  _0x0*2+20
                 
000183 0013      	.DW  0x13
000184 0526      	.DW  _0x4+38
000185 0184      	.DW  _0x0*2+38
                 
000186 0006      	.DW  0x06
000187 08d7      	.DW  _menuOptions
000188 0138      	.DW  _0x5*2
                 
000189 0001      	.DW  0x01
00018a 08dd      	.DW  _numMenuOptions
00018b 013e      	.DW  _0x6*2
                 
00018c 0010      	.DW  0x10
00018d 0929      	.DW  _keypad
00018e 0140      	.DW  _0x7*2
                 
00018f 0012      	.DW  0x12
000190 0539      	.DW  _0x1A
000191 0197      	.DW  _0x0*2+57
                 
000192 0012      	.DW  0x12
000193 054b      	.DW  _0x1A+18
000194 0197      	.DW  _0x0*2+57
                 
000195 0010      	.DW  0x10
000196 055d      	.DW  _0x1A+36
000197 01a9      	.DW  _0x0*2+75
                 
000198 0014      	.DW  0x14
000199 056d      	.DW  _0x26
00019a 01b9      	.DW  _0x0*2+91
                 
00019b 0014      	.DW  0x14
00019c 0581      	.DW  _0x26+20
00019d 01b9      	.DW  _0x0*2+91
                 
00019e 0010      	.DW  0x10
00019f 0595      	.DW  _0x26+40
0001a0 01cd      	.DW  _0x0*2+111
                 
0001a1 0014      	.DW  0x14
0001a2 05a5      	.DW  _0x30
0001a3 01dd      	.DW  _0x0*2+127
                 
0001a4 001b      	.DW  0x1B
0001a5 05b9      	.DW  _0x32
0001a6 01f1      	.DW  _0x0*2+147
                 
0001a7 0017      	.DW  0x17
0001a8 05d4      	.DW  _0x32+27
0001a9 020c      	.DW  _0x0*2+174
                 
0001aa 0004      	.DW  0x04
0001ab 0942      	.DW  _lastVoltage_S0000008000
0001ac 015a      	.DW  _0x3E*2
                 
0001ad 0019      	.DW  0x19
0001ae 05eb      	.DW  _0x43
0001af 0232      	.DW  _0x0*2+212
                 
0001b0 0002      	.DW  0x02
0001b1 0604      	.DW  _0x43+25
0001b2 01cb      	.DW  _0x0*2+109
                 
0001b3 0023      	.DW  0x23
0001b4 0606      	.DW  _0x47
0001b5 0269      	.DW  _0x0*2+267
                 
0001b6 0011      	.DW  0x11
0001b7 0629      	.DW  _0x5D
0001b8 02a2      	.DW  _0x0*2+324
                 
0001b9 000f      	.DW  0x0F
0001ba 063a      	.DW  _0x5D+17
0001bb 02b3      	.DW  _0x0*2+341
                 
0001bc 0016      	.DW  0x16
0001bd 0649      	.DW  _0x5D+32
0001be 02c2      	.DW  _0x0*2+356
                 
0001bf 0001      	.DW  0x01
0001c0 0946      	.DW  __seed_G101
0001c1 02e0      	.DW  _0x2020060*2
                 
0001c2 0002      	.DW  0x02
0001c3 094a      	.DW  __base_y_G103
0001c4 02ec      	.DW  _0x2060003*2
                 
                 _0xFFFFFFFF:
0001c5 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
0001c6 94f8      	CLI
0001c7 27ee      	CLR  R30
0001c8 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0001c9 e0f1      	LDI  R31,1
0001ca bff5      	OUT  MCUCR,R31
0001cb bfe5      	OUT  MCUCR,R30
0001cc 93e0 006c 	STS  XMCRB,R30
                 
                 ;CLEAR R2-R14
0001ce e08d      	LDI  R24,(14-2)+1
0001cf e0a2      	LDI  R26,2
0001d0 27bb      	CLR  R27
                 __CLEAR_REG:
0001d1 93ed      	ST   X+,R30
0001d2 958a      	DEC  R24
0001d3 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0001d4 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0001d5 e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0001d6 e0a0      	LDI  R26,LOW(__SRAM_START)
0001d7 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
0001d8 93ed      	ST   X+,R30
0001d9 9701      	SBIW R24,1
0001da f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0001db eeee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0001dc e0f2      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0001dd 9185      	LPM  R24,Z+
0001de 9195      	LPM  R25,Z+
0001df 9700      	SBIW R24,0
0001e0 f061      	BREQ __GLOBAL_INI_END
0001e1 91a5      	LPM  R26,Z+
0001e2 91b5      	LPM  R27,Z+
0001e3 9005      	LPM  R0,Z+
0001e4 9015      	LPM  R1,Z+
0001e5 01bf      	MOVW R22,R30
0001e6 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0001e7 9005      	LPM  R0,Z+
0001e8 920d      	ST   X+,R0
0001e9 9701      	SBIW R24,1
0001ea f7e1      	BRNE __GLOBAL_INI_LOOP
0001eb 01fb      	MOVW R30,R22
0001ec cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0001ed efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0001ee bfed      	OUT  SPL,R30
0001ef e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0001f0 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0001f1 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0001f2 e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0001f3 940c 0503 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;#include <mega64.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;#include <stdlib.h>
                 ;#include <string.h>
                 ;#include <alcd.h>
                 ;
                 ;#define LED1 PORTD.0
                 ;#define LED2 PORTD.1
                 ;#define KEY_PORT PORTD.2
                 ;#define VOLTAGE_PIN ADC0
                 ;#define BUZZER PORTD.3
                 ;#define SHUTDOWN_MINUTE 5
                 ;
                 ;// ADC conversion result
                 ;unsigned int adc_result;
                 ;
                 ;// Time struct
                 ;typedef struct
                 ;{
                 ;    int hours;
                 ;    int minutes;
                 ;    int seconds;
                 ;} Time;
                 ;
                 ;typedef struct
                 ;{
                 ;    char username[20];
                 ;    char password[20];
                 ;} User;
                 ;
                 ;User predefinedUsers[] = { {"user1", "pass1"}, {"user2", "pass2"}, {"user3", "pass3"}, {"user4", "pass4"} };
                 
                 	.DSEG
                 ;User registeredUsers[10];  // Limit new users to 10
                 ;int numPredefinedUsers = sizeof(predefinedUsers) / sizeof(User);
                 ;int numRegisteredUsers = 0;
                 ;
                 ;char inputBuffer[20];
                 ;int bufferIndex = 0;
                 ;char tempPassword[20];
                 ;
                 ;char loggedUser[20];
                 ;int isRegistering = 0;
                 ;
                 ;Time currentTime = {0, 0, 0};
                 ;Time shutdownTime = {0, 0, 0};
                 ;
                 ;// Menu options
                 ;char* menuOptions[] = {"Voltage measurement", "Setting the clock", "Automatic shutdown"};
                 _0x4:
000500           	.BYTE 0x39
                 ;int numMenuOptions = sizeof(menuOptions) / sizeof(char*);
                 ;
                 ;// Menu state
                 ;int isMenuOpen = 0;
                 ;int menuSelection = 0;
                 ;float voltage;
                 ;char voltageStr[20];
                 ;char timeBuffer[10];
                 ;char c; //read until new line for clock
                 ;// Display the time on LCD
                 ;char lcdBuffer[20];
                 ;//Diration for shutdown
                 ;char durationBuffer[10];
                 ;int i = 0; //counter for for :)
                 ;
                 ;char key;
                 ;int menuOptionSelected = 0;
                 ;
                 ;// Define the keypad layout
                 ;char keypad[4][4] = { {'1','2','3','A'},
                 ;                      {'4','5','6','B'},
                 ;                      {'7','8','9','C'},
                 ;                      {'*','0','#','D'} };
                 ;
                 ;// Read the keypad
                 ;char read_keypad(void)
                 ; 0000 004B {
                 
                 	.CSEG
                 _read_keypad:
                 ; .FSTART _read_keypad
                 ; 0000 004C     int row, col;
                 ; 0000 004D     for (row = 0; row < 4; row++)
0001f5 940e 0c8b 	CALL __SAVELOCR4
                 ;	row -> R16,R17
                 ;	col -> R18,R19
                +
0001f7 e000     +LDI R16 , LOW ( 0 )
0001f8 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x9:
                +
0001f9 3004     +CPI R16 , LOW ( 4 )
0001fa e0e0     +LDI R30 , HIGH ( 4 )
0001fb 071e     +CPC R17 , R30
                 	__CPWRN 16,17,4
0001fc f534      	BRGE _0xA
                 ; 0000 004E     {
                 ; 0000 004F         // Scan one row at a time
                 ; 0000 0050         PORTD = 0b00010000 << row;
0001fd 2fe0      	MOV  R30,R16
0001fe e1a0      	LDI  R26,LOW(16)
0001ff 940e 0c0c 	CALL __LSLB12
000201 bbe2      	OUT  0x12,R30
                 ; 0000 0051 
                 ; 0000 0052         // Check each column
                 ; 0000 0053         for (col = 0; col < 4; col++)
                +
000202 e020     +LDI R18 , LOW ( 0 )
000203 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0xC:
                +
000204 3024     +CPI R18 , LOW ( 4 )
000205 e0e0     +LDI R30 , HIGH ( 4 )
000206 073e     +CPC R19 , R30
                 	__CPWRN 18,19,4
000207 f4c4      	BRGE _0xD
                 ; 0000 0054         {
                 ; 0000 0055             if (!(PIND & (0b0001 << col)))
000208 940e 09ff 	CALL SUBOPT_0x0
00020a f491      	BRNE _0xE
                 ; 0000 0056             {
                 ; 0000 0057                 // Debounce the key press
                 ; 0000 0058                 delay_ms(20);
00020b e1a4      	LDI  R26,LOW(20)
00020c e0b0      	LDI  R27,0
00020d 940e 0acb 	CALL _delay_ms
                 ; 0000 0059                 if (!(PIND & (0b0001 << col)))
00020f 940e 09ff 	CALL SUBOPT_0x0
000211 f459      	BRNE _0xF
                 ; 0000 005A                 {
                 ; 0000 005B                     // Return the key value
                 ; 0000 005C                     return keypad[row][col];
000212 01f8      	MOVW R30,R16
000213 e2a9      	LDI  R26,LOW(_keypad)
000214 e0b9      	LDI  R27,HIGH(_keypad)
000215 940e 0c1d 	CALL __LSLW2
000217 0fea      	ADD  R30,R26
000218 1ffb      	ADC  R31,R27
000219 0fe2      	ADD  R30,R18
00021a 1ff3      	ADC  R31,R19
00021b 81e0      	LD   R30,Z
00021c c007      	RJMP _0x20C000B
                 ; 0000 005D                 }
                 ; 0000 005E             }
                 _0xF:
                 ; 0000 005F         }
                 _0xE:
                +
00021d 5f2f     +SUBI R18 , LOW ( - 1 )
00021e 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
00021f cfe4      	RJMP _0xC
                 _0xD:
                 ; 0000 0060     }
                +
000220 5f0f     +SUBI R16 , LOW ( - 1 )
000221 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000222 cfd6      	RJMP _0x9
                 _0xA:
                 ; 0000 0061     // If no key is pressed
                 ; 0000 0062     return '\0';
000223 e0e0      	LDI  R30,LOW(0)
                 _0x20C000B:
000224 940e 0c92 	CALL __LOADLOCR4
000226 9624      	ADIW R28,4
000227 9508      	RET
                 ; 0000 0063 }
                 ; .FEND
                 ;
                 ;void send_string(char *str)
                 ; 0000 0066 {
                 _send_string:
                 ; .FSTART _send_string
                 ; 0000 0067     while (*str != 0)
000228 93ba      	ST   -Y,R27
000229 93aa      	ST   -Y,R26
                 ;	*str -> Y+0
                 _0x10:
00022a 81a8      	LD   R26,Y
00022b 81b9      	LDD  R27,Y+1
00022c 91ec      	LD   R30,X
00022d 30e0      	CPI  R30,0
00022e f061      	BREQ _0x12
                 ; 0000 0068     {
                 ; 0000 0069         while ((UCSR0A & (1 << UDRE0)) == 0);
                 _0x13:
00022f 9b5d      	SBIS 0xB,5
000230 cffe      	RJMP _0x13
                 ; 0000 006A         UDR0 = *str;
000231 81a8      	LD   R26,Y
000232 81b9      	LDD  R27,Y+1
000233 91ec      	LD   R30,X
000234 b9ec      	OUT  0xC,R30
                 ; 0000 006B         str++;
000235 81e8      	LD   R30,Y
000236 81f9      	LDD  R31,Y+1
000237 9631      	ADIW R30,1
000238 83e8      	ST   Y,R30
000239 83f9      	STD  Y+1,R31
                 ; 0000 006C     }
00023a cfef      	RJMP _0x10
                 _0x12:
                 ; 0000 006D }
00023b 9622      	ADIW R28,2
00023c 9508      	RET
                 ; .FEND
                 ;
                 ;void check_user()
                 ; 0000 0070 {
                 _check_user:
                 ; .FSTART _check_user
                 ; 0000 0071     int i;
                 ; 0000 0072     for (i = 0; i < numPredefinedUsers; i++)
00023d 931a      	ST   -Y,R17
00023e 930a      	ST   -Y,R16
                 ;	i -> R16,R17
                +
00023f e000     +LDI R16 , LOW ( 0 )
000240 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x17:
                +
000241 1506     +CP R16 , R6
000242 0517     +CPC R17 , R7
                 	__CPWRR 16,17,6,7
000243 f464      	BRGE _0x18
                 ; 0000 0073     {
                 ; 0000 0074         if (strcmp(predefinedUsers[i].username, inputBuffer) == 0)
000244 940e 0a0b 	CALL SUBOPT_0x1
000246 940e 0a11 	CALL SUBOPT_0x2
000248 f421      	BRNE _0x19
                 ; 0000 0075         {
                 ; 0000 0076             send_string("\nEnter Password: ");
                +
000249 e3a9     +LDI R26 , LOW ( _0x1A + ( 0 ) )
00024a e0b5     +LDI R27 , HIGH ( _0x1A + ( 0 ) )
                 	__POINTW2MN _0x1A,0
00024b dfdc      	RCALL _send_string
                 ; 0000 0077             return;
00024c c070      	RJMP _0x20C000A
                 ; 0000 0078         }
                 ; 0000 0079     }
                 _0x19:
                +
00024d 5f0f     +SUBI R16 , LOW ( - 1 )
00024e 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00024f cff1      	RJMP _0x17
                 _0x18:
                 ; 0000 007A     for (i = 0; i < numRegisteredUsers; i++)
                +
000250 e000     +LDI R16 , LOW ( 0 )
000251 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x1C:
                +
000252 1508     +CP R16 , R8
000253 0519     +CPC R17 , R9
                 	__CPWRR 16,17,8,9
000254 f47c      	BRGE _0x1D
                 ; 0000 007B     {
                 ; 0000 007C         if (strcmp(registeredUsers[i].username, inputBuffer) == 0)
000255 940e 0a0b 	CALL SUBOPT_0x1
000257 940e 0a1b 	CALL SUBOPT_0x3
000259 940e 08f6 	CALL _strcmp
00025b 30e0      	CPI  R30,0
00025c f421      	BRNE _0x1E
                 ; 0000 007D         {
                 ; 0000 007E             send_string("\nEnter Password: ");
                +
00025d e4ab     +LDI R26 , LOW ( _0x1A + ( 18 ) )
00025e e0b5     +LDI R27 , HIGH ( _0x1A + ( 18 ) )
                 	__POINTW2MN _0x1A,18
00025f dfc8      	RCALL _send_string
                 ; 0000 007F             return;
000260 c05c      	RJMP _0x20C000A
                 ; 0000 0080         }
                 ; 0000 0081     }
                 _0x1E:
                +
000261 5f0f     +SUBI R16 , LOW ( - 1 )
000262 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000263 cfee      	RJMP _0x1C
                 _0x1D:
                 ; 0000 0082     // If username not found, register new user
                 ; 0000 0083     isRegistering = 1;
000264 e0e1      	LDI  R30,LOW(1)
000265 e0f0      	LDI  R31,HIGH(1)
000266 016f      	MOVW R12,R30
                 ; 0000 0084     strcpy(registeredUsers[numRegisteredUsers].username, inputBuffer);
000267 01f4      	MOVW R30,R8
000268 e2a8      	LDI  R26,LOW(40)
000269 e0b0      	LDI  R27,HIGH(40)
00026a 940e 0c27 	CALL __MULW12U
00026c 940e 0a1b 	CALL SUBOPT_0x3
00026e 940e 090a 	CALL _strcpy
                 ; 0000 0085     send_string("\nNew Password: ");
                +
000270 e5ad     +LDI R26 , LOW ( _0x1A + ( 36 ) )
000271 e0b5     +LDI R27 , HIGH ( _0x1A + ( 36 ) )
                 	__POINTW2MN _0x1A,36
000272 dfb5      	RCALL _send_string
                 ; 0000 0086 }
000273 c049      	RJMP _0x20C000A
                 ; .FEND
                 
                 	.DSEG
                 _0x1A:
000539           	.BYTE 0x34
                 ;
                 ;void check_password()
                 ; 0000 0089 {
                 
                 	.CSEG
                 _check_password:
                 ; .FSTART _check_password
                 ; 0000 008A     int i;
                 ; 0000 008B     for (i = 0; i < numPredefinedUsers; i++)
000274 931a      	ST   -Y,R17
000275 930a      	ST   -Y,R16
                 ;	i -> R16,R17
                +
000276 e000     +LDI R16 , LOW ( 0 )
000277 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x20:
                +
000278 1506     +CP R16 , R6
000279 0517     +CPC R17 , R7
                 	__CPWRR 16,17,6,7
00027a f4dc      	BRGE _0x21
                 ; 0000 008C     {
                 ; 0000 008D         if (strcmp(predefinedUsers[i].username, inputBuffer) == 0)
00027b 940e 0a0b 	CALL SUBOPT_0x1
00027d 940e 0a11 	CALL SUBOPT_0x2
00027f f499      	BRNE _0x22
                 ; 0000 008E         {
                 ; 0000 008F             if (strcmp(predefinedUsers[i].password, tempPassword) == 0)
000280 940e 0a0b 	CALL SUBOPT_0x1
                +
000282 58ed     +SUBI R30 , LOW ( - _predefinedUsers - ( 20 ) )
000283 4ff9     +SBCI R31 , HIGH ( - _predefinedUsers - ( 20 ) )
                 	__ADDW1MN _predefinedUsers,20
000284 940e 0a22 	CALL SUBOPT_0x4
000286 f461      	BRNE _0x23
                 ; 0000 0090             {
                 ; 0000 0091                 strcpy(loggedUser, predefinedUsers[i].username);
000287 940e 0a2a 	CALL SUBOPT_0x5
000289 5ae1      	SUBI R30,LOW(-_predefinedUsers)
00028a 4ff9      	SBCI R31,HIGH(-_predefinedUsers)
00028b 01df      	MOVW R26,R30
00028c 940e 090a 	CALL _strcpy
                 ; 0000 0092                 LED2 = 1; // Turn on the LED2
00028e 9a91      	SBI  0x12,1
                 ; 0000 0093                 send_string("\nLogin Successful!\n");
                +
00028f e6ad     +LDI R26 , LOW ( _0x26 + ( 0 ) )
000290 e0b5     +LDI R27 , HIGH ( _0x26 + ( 0 ) )
                 	__POINTW2MN _0x26,0
000291 df96      	RCALL _send_string
                 ; 0000 0094                 return;
000292 c02a      	RJMP _0x20C000A
                 ; 0000 0095             }
                 ; 0000 0096         }
                 _0x23:
                 ; 0000 0097     }
                 _0x22:
                +
000293 5f0f     +SUBI R16 , LOW ( - 1 )
000294 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000295 cfe2      	RJMP _0x20
                 _0x21:
                 ; 0000 0098     for (i = 0; i < numRegisteredUsers; i++)
                +
000296 e000     +LDI R16 , LOW ( 0 )
000297 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x28:
                +
000298 1508     +CP R16 , R8
000299 0519     +CPC R17 , R9
                 	__CPWRR 16,17,8,9
00029a f4f4      	BRGE _0x29
                 ; 0000 0099     {
                 ; 0000 009A         if (strcmp(registeredUsers[i].username, inputBuffer) == 0)
00029b 940e 0a0b 	CALL SUBOPT_0x1
00029d 940e 0a1b 	CALL SUBOPT_0x3
00029f 940e 08f6 	CALL _strcmp
0002a1 30e0      	CPI  R30,0
0002a2 f499      	BRNE _0x2A
                 ; 0000 009B         {
                 ; 0000 009C             if (strcmp(registeredUsers[i].password, tempPassword) == 0)
0002a3 940e 0a0b 	CALL SUBOPT_0x1
                +
0002a5 5eed     +SUBI R30 , LOW ( - _registeredUsers - ( 20 ) )
0002a6 4ff8     +SBCI R31 , HIGH ( - _registeredUsers - ( 20 ) )
                 	__ADDW1MN _registeredUsers,20
0002a7 940e 0a22 	CALL SUBOPT_0x4
0002a9 f461      	BRNE _0x2B
                 ; 0000 009D             {
                 ; 0000 009E                 strcpy(loggedUser, registeredUsers[i].username);
0002aa 940e 0a2a 	CALL SUBOPT_0x5
0002ac 50e1      	SUBI R30,LOW(-_registeredUsers)
0002ad 4ff9      	SBCI R31,HIGH(-_registeredUsers)
0002ae 01df      	MOVW R26,R30
0002af 940e 090a 	CALL _strcpy
                 ; 0000 009F                 LED2 = 1; // Turn on the LED2
0002b1 9a91      	SBI  0x12,1
                 ; 0000 00A0                 send_string("\nLogin Successful!\n");
                +
0002b2 e8a1     +LDI R26 , LOW ( _0x26 + ( 20 ) )
0002b3 e0b5     +LDI R27 , HIGH ( _0x26 + ( 20 ) )
                 	__POINTW2MN _0x26,20
0002b4 df73      	RCALL _send_string
                 ; 0000 00A1                 return;
0002b5 c007      	RJMP _0x20C000A
                 ; 0000 00A2             }
                 ; 0000 00A3         }
                 _0x2B:
                 ; 0000 00A4     }
                 _0x2A:
                +
0002b6 5f0f     +SUBI R16 , LOW ( - 1 )
0002b7 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0002b8 cfdf      	RJMP _0x28
                 _0x29:
                 ; 0000 00A5     send_string("\nLogin Failed!\n");
                +
0002b9 e9a5     +LDI R26 , LOW ( _0x26 + ( 40 ) )
0002ba e0b5     +LDI R27 , HIGH ( _0x26 + ( 40 ) )
                 	__POINTW2MN _0x26,40
0002bb df6c      	RCALL _send_string
                 ; 0000 00A6     LED2 = 0; // Turn off the LED2
0002bc 9891      	CBI  0x12,1
                 ; 0000 00A7 }
                 _0x20C000A:
0002bd 9109      	LD   R16,Y+
0002be 9119      	LD   R17,Y+
0002bf 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x26:
00056d           	.BYTE 0x38
                 ;
                 ;void check_new_password()
                 ; 0000 00AA {
                 
                 	.CSEG
                 _check_new_password:
                 ; .FSTART _check_new_password
                 ; 0000 00AB     strcpy(tempPassword, inputBuffer);
0002c0 940e 0a2f 	CALL SUBOPT_0x6
0002c2 940e 090a 	CALL _strcpy
                 ; 0000 00AC     send_string("\nConfirm Password: ");
                +
0002c4 eaa5     +LDI R26 , LOW ( _0x30 + ( 0 ) )
0002c5 e0b5     +LDI R27 , HIGH ( _0x30 + ( 0 ) )
                 	__POINTW2MN _0x30,0
0002c6 df61      	RCALL _send_string
                 ; 0000 00AD }
0002c7 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x30:
0005a5           	.BYTE 0x14
                 ;
                 ;void check_confirm_password()
                 ; 0000 00B0 {
                 
                 	.CSEG
                 _check_confirm_password:
                 ; .FSTART _check_confirm_password
                 ; 0000 00B1     if (strcmp(tempPassword, inputBuffer) == 0)
0002c8 940e 0a2f 	CALL SUBOPT_0x6
0002ca 940e 08f6 	CALL _strcmp
0002cc 30e0      	CPI  R30,0
0002cd f499      	BRNE _0x31
                 ; 0000 00B2     {
                 ; 0000 00B3         strcpy(registeredUsers[numRegisteredUsers].password, tempPassword);
0002ce 01f4      	MOVW R30,R8
0002cf e2a8      	LDI  R26,LOW(40)
0002d0 e0b0      	LDI  R27,HIGH(40)
0002d1 940e 0c27 	CALL __MULW12U
                +
0002d3 5eed     +SUBI R30 , LOW ( - _registeredUsers - ( 20 ) )
0002d4 4ff8     +SBCI R31 , HIGH ( - _registeredUsers - ( 20 ) )
                 	__ADDW1MN _registeredUsers,20
0002d5 93fa      	ST   -Y,R31
0002d6 93ea      	ST   -Y,R30
0002d7 eaa3      	LDI  R26,LOW(_tempPassword)
0002d8 e0b8      	LDI  R27,HIGH(_tempPassword)
0002d9 940e 090a 	CALL _strcpy
                 ; 0000 00B4         numRegisteredUsers++;
0002db 01f4      	MOVW R30,R8
0002dc 9631      	ADIW R30,1
0002dd 014f      	MOVW R8,R30
                 ; 0000 00B5         send_string("\nRegistration Successful!\n");
                +
0002de eba9     +LDI R26 , LOW ( _0x32 + ( 0 ) )
0002df e0b5     +LDI R27 , HIGH ( _0x32 + ( 0 ) )
                 	__POINTW2MN _0x32,0
0002e0 c002      	RJMP _0x77
                 ; 0000 00B6     }
                 ; 0000 00B7     else
                 _0x31:
                 ; 0000 00B8     {
                 ; 0000 00B9         send_string("\nRegistration Failed!\n");
                +
0002e1 eda4     +LDI R26 , LOW ( _0x32 + ( 27 ) )
0002e2 e0b5     +LDI R27 , HIGH ( _0x32 + ( 27 ) )
                 	__POINTW2MN _0x32,27
                 _0x77:
0002e3 df44      	RCALL _send_string
                 ; 0000 00BA     }
                 ; 0000 00BB     isRegistering = 0;
0002e4 24cc      	CLR  R12
0002e5 24dd      	CLR  R13
                 ; 0000 00BC }
0002e6 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x32:
0005b9           	.BYTE 0x32
                 ;
                 ;interrupt [USART0_RXC] void usart_rx_isr(void)
                 ; 0000 00BF {
                 
                 	.CSEG
                 _usart_rx_isr:
                 ; .FSTART _usart_rx_isr
0002e7 920a      	ST   -Y,R0
0002e8 921a      	ST   -Y,R1
0002e9 92fa      	ST   -Y,R15
0002ea 936a      	ST   -Y,R22
0002eb 937a      	ST   -Y,R23
0002ec 938a      	ST   -Y,R24
0002ed 939a      	ST   -Y,R25
0002ee 93aa      	ST   -Y,R26
0002ef 93ba      	ST   -Y,R27
0002f0 93ea      	ST   -Y,R30
0002f1 93fa      	ST   -Y,R31
0002f2 b7ef      	IN   R30,SREG
0002f3 93ea      	ST   -Y,R30
                 ; 0000 00C0     char data = UDR0;
                 ; 0000 00C1     if (data == '\n')
0002f4 931a      	ST   -Y,R17
                 ;	data -> R17
0002f5 b11c      	IN   R17,12
0002f6 301a      	CPI  R17,10
0002f7 f4f9      	BRNE _0x34
                 ; 0000 00C2     {
                 ; 0000 00C3         inputBuffer[bufferIndex] = '\0'; // Null-terminate the received string
0002f8 e8af      	LDI  R26,LOW(_inputBuffer)
0002f9 e0b8      	LDI  R27,HIGH(_inputBuffer)
0002fa 0daa      	ADD  R26,R10
0002fb 1dbb      	ADC  R27,R11
0002fc e0e0      	LDI  R30,LOW(0)
0002fd 93ec      	ST   X,R30
                 ; 0000 00C4         if (loggedUser[0] == '\0')
0002fe 91e0 08b7 	LDS  R30,_loggedUser
000300 30e0      	CPI  R30,0
000301 f489      	BRNE _0x35
                 ; 0000 00C5         {
                 ; 0000 00C6             if (isRegistering == 0)
000302 2c0c      	MOV  R0,R12
000303 280d      	OR   R0,R13
000304 f411      	BRNE _0x36
                 ; 0000 00C7             {
                 ; 0000 00C8                 check_user();
000305 df37      	RCALL _check_user
                 ; 0000 00C9             }
                 ; 0000 00CA             else if (isRegistering == 1)
000306 c00b      	RJMP _0x37
                 _0x36:
000307 e0e1      	LDI  R30,LOW(1)
000308 e0f0      	LDI  R31,HIGH(1)
000309 15ec      	CP   R30,R12
00030a 05fd      	CPC  R31,R13
00030b f429      	BRNE _0x38
                 ; 0000 00CB             {
                 ; 0000 00CC                 check_new_password();
00030c dfb3      	RCALL _check_new_password
                 ; 0000 00CD                 isRegistering++;
00030d 01f6      	MOVW R30,R12
00030e 9631      	ADIW R30,1
00030f 016f      	MOVW R12,R30
                 ; 0000 00CE             }
                 ; 0000 00CF             else
000310 c001      	RJMP _0x39
                 _0x38:
                 ; 0000 00D0             {
                 ; 0000 00D1                 check_confirm_password();
000311 dfb6      	RCALL _check_confirm_password
                 ; 0000 00D2             }
                 _0x39:
                 _0x37:
                 ; 0000 00D3         }
                 ; 0000 00D4         else
000312 c001      	RJMP _0x3A
                 _0x35:
                 ; 0000 00D5         {
                 ; 0000 00D6             check_password();
000313 df60      	RCALL _check_password
                 ; 0000 00D7         }
                 _0x3A:
                 ; 0000 00D8         bufferIndex = 0;
000314 24aa      	CLR  R10
000315 24bb      	CLR  R11
                 ; 0000 00D9     }
                 ; 0000 00DA     else
000316 c007      	RJMP _0x3B
                 _0x34:
                 ; 0000 00DB     {
                 ; 0000 00DC         inputBuffer[bufferIndex] = data;
000317 01f5      	MOVW R30,R10
000318 57e1      	SUBI R30,LOW(-_inputBuffer)
000319 4ff7      	SBCI R31,HIGH(-_inputBuffer)
00031a 8310      	ST   Z,R17
                 ; 0000 00DD         bufferIndex++;
00031b 01f5      	MOVW R30,R10
00031c 9631      	ADIW R30,1
00031d 015f      	MOVW R10,R30
                 ; 0000 00DE     }
                 _0x3B:
                 ; 0000 00DF }
00031e 9119      	LD   R17,Y+
00031f 91e9      	LD   R30,Y+
000320 bfef      	OUT  SREG,R30
000321 91f9      	LD   R31,Y+
000322 91e9      	LD   R30,Y+
000323 91b9      	LD   R27,Y+
000324 91a9      	LD   R26,Y+
000325 9199      	LD   R25,Y+
000326 9189      	LD   R24,Y+
000327 9179      	LD   R23,Y+
000328 9169      	LD   R22,Y+
000329 90f9      	LD   R15,Y+
00032a 9019      	LD   R1,Y+
00032b 9009      	LD   R0,Y+
00032c 9518      	RETI
                 ; .FEND
                 ;
                 ;unsigned char get7SegmentCode(unsigned char digit)
                 ; 0000 00E2 {
                 _get7SegmentCode:
                 ; .FSTART _get7SegmentCode
                 ; 0000 00E3     unsigned char segmentCodes[] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F};
                 ; 0000 00E4     if (digit < 10)
00032d 93aa      	ST   -Y,R26
00032e 972a      	SBIW R28,10
00032f e08a      	LDI  R24,10
000330 e0a0      	LDI  R26,LOW(0)
000331 e0b0      	LDI  R27,HIGH(0)
000332 e5e0      	LDI  R30,LOW(_0x3C*2)
000333 e0f1      	LDI  R31,HIGH(_0x3C*2)
000334 940e 0c97 	CALL __INITLOCB
                 ;	digit -> Y+10
                 ;	segmentCodes -> Y+0
000336 85aa      	LDD  R26,Y+10
000337 30aa      	CPI  R26,LOW(0xA)
000338 f438      	BRSH _0x3D
                 ; 0000 00E5         return segmentCodes[digit];
000339 85ea      	LDD  R30,Y+10
00033a e0f0      	LDI  R31,0
00033b 01de      	MOVW R26,R28
00033c 0fae      	ADD  R26,R30
00033d 1fbf      	ADC  R27,R31
00033e 91ec      	LD   R30,X
00033f c001      	RJMP _0x20C0009
                 ; 0000 00E6     return 0;
                 _0x3D:
000340 e0e0      	LDI  R30,LOW(0)
                 _0x20C0009:
000341 962b      	ADIW R28,11
000342 9508      	RET
                 ; 0000 00E7 }
                 ; .FEND
                 ;
                 ;void display_on_7segment(float voltage)
                 ; 0000 00EA {
                 _display_on_7segment:
                 ; .FSTART _display_on_7segment
                 ; 0000 00EB     static unsigned char digitIndex = 0;
                 ; 0000 00EC     static unsigned int digitCodes[4] = {0};
                 ; 0000 00ED 
                 ; 0000 00EE     // Calculate digit codes once when voltage changes
                 ; 0000 00EF     static float lastVoltage = -1.0f;
                 
                 	.DSEG
                 
                 	.CSEG
                 ; 0000 00F0     if (voltage != lastVoltage)
000343 940e 0c7f 	CALL __PUTPARD2
                 ;	voltage -> Y+0
000345 91e0 0942 	LDS  R30,_lastVoltage_S0000008000
000347 91f0 0943 	LDS  R31,_lastVoltage_S0000008000+1
000349 9160 0944 	LDS  R22,_lastVoltage_S0000008000+2
00034b 9170 0945 	LDS  R23,_lastVoltage_S0000008000+3
00034d 940e 0c75 	CALL __GETD2S0
00034f 940e 0c84 	CALL __CPD12
000351 f409      	BRNE PC+2
000352 c054      	RJMP _0x3F
                 ; 0000 00F1     {
                 ; 0000 00F2         int intVoltage = (int)(voltage * 100);  // Convert to integer to avoid floating point division
                 ; 0000 00F3         digitCodes[0] = get7SegmentCode(intVoltage / 1000);  // Thousands
000353 9722      	SBIW R28,2
                 ;	voltage -> Y+2
                 ;	intVoltage -> Y+0
                +
000354 81aa     +LDD R26 , Y + 2
000355 81bb     +LDD R27 , Y + 2 + 1
000356 818c     +LDD R24 , Y + 2 + 2
000357 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
                +
000358 e0e0     +LDI R30 , LOW ( 0x42C80000 )
000359 e0f0     +LDI R31 , HIGH ( 0x42C80000 )
00035a ec68     +LDI R22 , BYTE3 ( 0x42C80000 )
00035b e472     +LDI R23 , BYTE4 ( 0x42C80000 )
                 	__GETD1N 0x42C80000
00035c 940e 0b69 	CALL __MULF12
00035e 940e 0b04 	CALL __CFD1
000360 83e8      	ST   Y,R30
000361 83f9      	STD  Y+1,R31
000362 81a8      	LD   R26,Y
000363 81b9      	LDD  R27,Y+1
000364 eee8      	LDI  R30,LOW(1000)
000365 e0f3      	LDI  R31,HIGH(1000)
000366 940e 0a36 	CALL SUBOPT_0x7
000368 e0f0      	LDI  R31,0
000369 93e0 093a 	STS  _digitCodes_S0000008000,R30
00036b 93f0 093b 	STS  _digitCodes_S0000008000+1,R31
                 ; 0000 00F4         digitCodes[1] = get7SegmentCode((intVoltage % 1000) / 100);  // Hundreds
00036d 81a8      	LD   R26,Y
00036e 81b9      	LDD  R27,Y+1
00036f eee8      	LDI  R30,LOW(1000)
000370 e0f3      	LDI  R31,HIGH(1000)
000371 940e 0c47 	CALL __MODW21
000373 01df      	MOVW R26,R30
000374 e6e4      	LDI  R30,LOW(100)
000375 e0f0      	LDI  R31,HIGH(100)
000376 940e 0a36 	CALL SUBOPT_0x7
                +
000378 e3ac     +LDI R26 , LOW ( _digitCodes_S0000008000 + ( 2 ) )
000379 e0b9     +LDI R27 , HIGH ( _digitCodes_S0000008000 + ( 2 ) )
                 	__POINTW2MN _digitCodes_S0000008000,2
00037a e0f0      	LDI  R31,0
00037b 93ed      	ST   X+,R30
00037c 93fc      	ST   X,R31
                 ; 0000 00F5         digitCodes[2] = get7SegmentCode((intVoltage % 100) / 10);  // Tens
00037d 81a8      	LD   R26,Y
00037e 81b9      	LDD  R27,Y+1
00037f e6e4      	LDI  R30,LOW(100)
000380 e0f0      	LDI  R31,HIGH(100)
000381 940e 0c47 	CALL __MODW21
000383 01df      	MOVW R26,R30
000384 e0ea      	LDI  R30,LOW(10)
000385 e0f0      	LDI  R31,HIGH(10)
000386 940e 0a36 	CALL SUBOPT_0x7
                +
000388 e3ae     +LDI R26 , LOW ( _digitCodes_S0000008000 + ( 4 ) )
000389 e0b9     +LDI R27 , HIGH ( _digitCodes_S0000008000 + ( 4 ) )
                 	__POINTW2MN _digitCodes_S0000008000,4
00038a e0f0      	LDI  R31,0
00038b 93ed      	ST   X+,R30
00038c 93fc      	ST   X,R31
                 ; 0000 00F6         digitCodes[3] = get7SegmentCode(intVoltage % 10);  // Ones
00038d 81a8      	LD   R26,Y
00038e 81b9      	LDD  R27,Y+1
00038f e0ea      	LDI  R30,LOW(10)
000390 e0f0      	LDI  R31,HIGH(10)
000391 940e 0c47 	CALL __MODW21
000393 2fae      	MOV  R26,R30
000394 df98      	RCALL _get7SegmentCode
                +
000395 e4a0     +LDI R26 , LOW ( _digitCodes_S0000008000 + ( 6 ) )
000396 e0b9     +LDI R27 , HIGH ( _digitCodes_S0000008000 + ( 6 ) )
                 	__POINTW2MN _digitCodes_S0000008000,6
000397 e0f0      	LDI  R31,0
000398 93ed      	ST   X+,R30
000399 93fc      	ST   X,R31
                 ; 0000 00F7         lastVoltage = voltage;
                +
00039a 81ea     +LDD R30 , Y + 2
00039b 81fb     +LDD R31 , Y + 2 + 1
00039c 816c     +LDD R22 , Y + 2 + 2
00039d 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
00039e 93e0 0942 	STS  _lastVoltage_S0000008000,R30
0003a0 93f0 0943 	STS  _lastVoltage_S0000008000+1,R31
0003a2 9360 0944 	STS  _lastVoltage_S0000008000+2,R22
0003a4 9370 0945 	STS  _lastVoltage_S0000008000+3,R23
                 ; 0000 00F8     }
0003a6 9622      	ADIW R28,2
                 ; 0000 00F9 
                 ; 0000 00FA     // Turn off all digits
                 ; 0000 00FB     PORTA = 0;
                 _0x3F:
0003a7 e0e0      	LDI  R30,LOW(0)
0003a8 bbeb      	OUT  0x1B,R30
                 ; 0000 00FC 
                 ; 0000 00FD     // Set segments
                 ; 0000 00FE     PORTA = digitCodes[digitIndex];
0003a9 91e0 0939 	LDS  R30,_digitIndex_S0000008000
0003ab e3aa      	LDI  R26,LOW(_digitCodes_S0000008000)
0003ac e0b9      	LDI  R27,HIGH(_digitCodes_S0000008000)
0003ad e0f0      	LDI  R31,0
0003ae 0fee      	LSL  R30
0003af 1fff      	ROL  R31
0003b0 0fae      	ADD  R26,R30
0003b1 1fbf      	ADC  R27,R31
0003b2 91ec      	LD   R30,X
0003b3 bbeb      	OUT  0x1B,R30
                 ; 0000 00FF 
                 ; 0000 0100     // Turn on the current digit
                 ; 0000 0101     PORTA |= (1 << (digitIndex + 4));
0003b4 b21b      	IN   R1,27
0003b5 91e0 0939 	LDS  R30,_digitIndex_S0000008000
0003b7 5fec      	SUBI R30,-LOW(4)
0003b8 e0a1      	LDI  R26,LOW(1)
0003b9 940e 0c0c 	CALL __LSLB12
0003bb 29e1      	OR   R30,R1
0003bc bbeb      	OUT  0x1B,R30
                 ; 0000 0102 
                 ; 0000 0103     // Go to the next digit
                 ; 0000 0104     digitIndex = (digitIndex + 1) % 4;
0003bd 91e0 0939 	LDS  R30,_digitIndex_S0000008000
0003bf e0f0      	LDI  R31,0
0003c0 9631      	ADIW R30,1
0003c1 e0a3      	LDI  R26,LOW(3)
0003c2 e0b0      	LDI  R27,HIGH(3)
0003c3 940e 0c55 	CALL __MANDW12
0003c5 93e0 0939 	STS  _digitIndex_S0000008000,R30
                 ; 0000 0105 }
0003c7 940c 092b 	JMP  _0x20C0003
                 ; .FEND
                 ;
                 ;void measure_voltage()
                 ; 0000 0108 {
                 _measure_voltage:
                 ; .FSTART _measure_voltage
                 ; 0000 0109     // Start the ADC conversion
                 ; 0000 010A     ADCSRA |= (1 << ADSC);
0003c9 9a36      	SBI  0x6,6
                 ; 0000 010B 
                 ; 0000 010C     // Wait for conversion to complete
                 ; 0000 010D     while (ADCSRA & (1 << ADSC));
                 _0x40:
0003ca 9936      	SBIC 0x6,6
0003cb cffe      	RJMP _0x40
                 ; 0000 010E 
                 ; 0000 010F     // Get the result
                 ; 0000 0110     adc_result = ADCL | (ADCH << 8);
0003cc b1e4      	IN   R30,0x4
0003cd 2fae      	MOV  R26,R30
0003ce b1e5      	IN   R30,0x5
0003cf 2ffe      	MOV  R31,R30
0003d0 e0e0      	LDI  R30,0
0003d1 2bea      	OR   R30,R26
0003d2 012f      	MOVW R4,R30
                 ; 0000 0111 
                 ; 0000 0112     // Display the voltage on the 7-segment display and LCD
                 ; 0000 0113     voltage = (adc_result / 1024.0) * 5;
0003d3 2766      	CLR  R22
0003d4 2777      	CLR  R23
0003d5 940e 0b3b 	CALL __CDF1
0003d7 01df      	MOVW R26,R30
0003d8 01cb      	MOVW R24,R22
                +
0003d9 e0e0     +LDI R30 , LOW ( 0x44800000 )
0003da e0f0     +LDI R31 , HIGH ( 0x44800000 )
0003db e860     +LDI R22 , BYTE3 ( 0x44800000 )
0003dc e474     +LDI R23 , BYTE4 ( 0x44800000 )
                 	__GETD1N 0x44800000
0003dd 940e 0bb7 	CALL __DIVF21
                +
0003df e0a0     +LDI R26 , LOW ( 0x40A00000 )
0003e0 e0b0     +LDI R27 , HIGH ( 0x40A00000 )
0003e1 ea80     +LDI R24 , BYTE3 ( 0x40A00000 )
0003e2 e490     +LDI R25 , BYTE4 ( 0x40A00000 )
                 	__GETD2N 0x40A00000
0003e3 940e 0b69 	CALL __MULF12
0003e5 93e0 08e3 	STS  _voltage,R30
0003e7 93f0 08e4 	STS  _voltage+1,R31
0003e9 9360 08e5 	STS  _voltage+2,R22
0003eb 9370 08e6 	STS  _voltage+3,R23
                 ; 0000 0114     lcd_gotoxy(0, 1);
0003ed 940e 0a3b 	CALL SUBOPT_0x8
                 ; 0000 0115     sprintf(voltageStr, "Voltage: %.2fV", voltage);
0003ef eee7      	LDI  R30,LOW(_voltageStr)
0003f0 e0f8      	LDI  R31,HIGH(_voltageStr)
0003f1 93fa      	ST   -Y,R31
0003f2 93ea      	ST   -Y,R30
                +
0003f3 e2e3     +LDI R30 , LOW ( 2 * _0x0 + ( 197 ) )
0003f4 e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 197 ) )
                 	__POINTW1FN _0x0,197
0003f5 93fa      	ST   -Y,R31
0003f6 93ea      	ST   -Y,R30
0003f7 91e0 08e3 	LDS  R30,_voltage
0003f9 91f0 08e4 	LDS  R31,_voltage+1
0003fb 9160 08e5 	LDS  R22,_voltage+2
0003fd 9170 08e6 	LDS  R23,_voltage+3
0003ff 940e 0c7a 	CALL __PUTPARD1
000401 e084      	LDI  R24,4
000402 940e 072b 	CALL _sprintf
000404 9628      	ADIW R28,8
                 ; 0000 0116     lcd_puts(voltageStr);
000405 eea7      	LDI  R26,LOW(_voltageStr)
000406 e0b8      	LDI  R27,HIGH(_voltageStr)
000407 940e 09ba 	CALL _lcd_puts
                 ; 0000 0117 
                 ; 0000 0118 
                 ; 0000 0119     // Assuming you have a function to display numbers on 7-segment
                 ; 0000 011A     display_on_7segment(voltage);
000409 91a0 08e3 	LDS  R26,_voltage
00040b 91b0 08e4 	LDS  R27,_voltage+1
00040d 9180 08e5 	LDS  R24,_voltage+2
00040f 9190 08e6 	LDS  R25,_voltage+3
000411 df31      	RCALL _display_on_7segment
                 ; 0000 011B }
000412 9508      	RET
                 ; .FEND
                 ;
                 ;void set_clock()
                 ; 0000 011E {
                 _set_clock:
                 ; .FSTART _set_clock
                 ; 0000 011F     // Ask the user to input time
                 ; 0000 0120     send_string("\nEnter time (HH:MM:SS): ");
                +
000413 eeab     +LDI R26 , LOW ( _0x43 + ( 0 ) )
000414 e0b5     +LDI R27 , HIGH ( _0x43 + ( 0 ) )
                 	__POINTW2MN _0x43,0
000415 de12      	RCALL _send_string
                 ; 0000 0121     while (c = UDR0, c != '\n') // read until newline
                 _0x44:
000416 940e 0a40 	CALL SUBOPT_0x9
000418 f029      	BREQ _0x46
                 ; 0000 0122     {
                 ; 0000 0123         strncat(timeBuffer, &c, 1);
000419 940e 0a47 	CALL SUBOPT_0xA
00041b 940e 0a4c 	CALL SUBOPT_0xB
                 ; 0000 0124     }
00041d cff8      	RJMP _0x44
                 _0x46:
                 ; 0000 0125     // Remove newline character from fgets
                 ; 0000 0126     timeBuffer[strcspn(timeBuffer, "\n")] = 0;
00041e 940e 0a47 	CALL SUBOPT_0xA
                +
000420 e0a4     +LDI R26 , LOW ( _0x43 + ( 25 ) )
000421 e0b6     +LDI R27 , HIGH ( _0x43 + ( 25 ) )
                 	__POINTW2MN _0x43,25
000422 940e 0917 	CALL _strcspn
000424 50e5      	SUBI R30,LOW(-_timeBuffer)
000425 4ff7      	SBCI R31,HIGH(-_timeBuffer)
000426 e0a0      	LDI  R26,LOW(0)
000427 83a0      	STD  Z+0,R26
                 ; 0000 0127 
                 ; 0000 0128     sscanf(timeBuffer, "%d:%d:%d", &currentTime.hours, &currentTime.minutes, &currentTime.seconds);
000428 940e 0a47 	CALL SUBOPT_0xA
                +
00042a e4eb     +LDI R30 , LOW ( 2 * _0x0 + ( 237 ) )
00042b e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 237 ) )
                 	__POINTW1FN _0x0,237
00042c 93fa      	ST   -Y,R31
00042d 93ea      	ST   -Y,R30
00042e eceb      	LDI  R30,LOW(_currentTime)
00042f e0f8      	LDI  R31,HIGH(_currentTime)
000430 940e 0a53 	CALL SUBOPT_0xC
                +
000432 eced     +LDI R30 , LOW ( _currentTime + ( 2 ) )
000433 e0f8     +LDI R31 , HIGH ( _currentTime + ( 2 ) )
                 	__POINTW1MN _currentTime,2
000434 940e 0a53 	CALL SUBOPT_0xC
                +
000436 ecef     +LDI R30 , LOW ( _currentTime + ( 4 ) )
000437 e0f8     +LDI R31 , HIGH ( _currentTime + ( 4 ) )
                 	__POINTW1MN _currentTime,4
000438 940e 0a53 	CALL SUBOPT_0xC
00043a e08c      	LDI  R24,12
00043b 940e 08c9 	CALL _sscanf
00043d 9660      	ADIW R28,16
                 ; 0000 0129 
                 ; 0000 012A     // Display the time on LCD
                 ; 0000 012B     sprintf(lcdBuffer, "Time: %02d:%02d:%02d", currentTime.hours, currentTime.minutes, currentTime.seconds);
00043e e0e6      	LDI  R30,LOW(_lcdBuffer)
00043f e0f9      	LDI  R31,HIGH(_lcdBuffer)
000440 93fa      	ST   -Y,R31
000441 93ea      	ST   -Y,R30
                +
000442 e5e4     +LDI R30 , LOW ( 2 * _0x0 + ( 246 ) )
000443 e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 246 ) )
                 	__POINTW1FN _0x0,246
000444 93fa      	ST   -Y,R31
000445 93ea      	ST   -Y,R30
000446 91e0 08cb 	LDS  R30,_currentTime
000448 91f0 08cc 	LDS  R31,_currentTime+1
00044a 940e 0a58 	CALL SUBOPT_0xD
                +
00044c 91e0 08cd+LDS R30 , _currentTime + ( 2 )
00044e 91f0 08ce+LDS R31 , _currentTime + ( 2 ) + 1
                 	__GETW1MN _currentTime,2
000450 940e 0a58 	CALL SUBOPT_0xD
                +
000452 91e0 08cf+LDS R30 , _currentTime + ( 4 )
000454 91f0 08d0+LDS R31 , _currentTime + ( 4 ) + 1
                 	__GETW1MN _currentTime,4
000456 940e 0a58 	CALL SUBOPT_0xD
000458 e08c      	LDI  R24,12
000459 940e 072b 	CALL _sprintf
00045b 9660      	ADIW R28,16
                 ; 0000 012C     lcd_gotoxy(0, 1);
00045c 940e 0a3b 	CALL SUBOPT_0x8
                 ; 0000 012D     lcd_puts(lcdBuffer);
00045e e0a6      	LDI  R26,LOW(_lcdBuffer)
00045f e0b9      	LDI  R27,HIGH(_lcdBuffer)
000460 940e 09ba 	CALL _lcd_puts
                 ; 0000 012E }
000462 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x43:
0005eb           	.BYTE 0x1B
                 ;
                 ;void auto_shutdown()
                 ; 0000 0131 {
                 
                 	.CSEG
                 _auto_shutdown:
                 ; .FSTART _auto_shutdown
                 ; 0000 0132     // Ask the user to input shutdown duration
                 ; 0000 0133     send_string("\nEnter shutdown duration (MM:SS): ");
                +
000463 e0a6     +LDI R26 , LOW ( _0x47 + ( 0 ) )
000464 e0b6     +LDI R27 , HIGH ( _0x47 + ( 0 ) )
                 	__POINTW2MN _0x47,0
000465 ddc2      	RCALL _send_string
                 ; 0000 0134     while (c = UDR0, c != '\n') // read until newline
                 _0x48:
000466 940e 0a40 	CALL SUBOPT_0x9
000468 f039      	BREQ _0x4A
                 ; 0000 0135     {
                 ; 0000 0136         strncat(durationBuffer, &c, 1);
000469 e1ea      	LDI  R30,LOW(_durationBuffer)
00046a e0f9      	LDI  R31,HIGH(_durationBuffer)
00046b 93fa      	ST   -Y,R31
00046c 93ea      	ST   -Y,R30
00046d 940e 0a4c 	CALL SUBOPT_0xB
                 ; 0000 0137     }
00046f cff6      	RJMP _0x48
                 _0x4A:
                 ; 0000 0138     sscanf(durationBuffer, "%d:%d", &shutdownTime.minutes, &shutdownTime.seconds);
000470 e1ea      	LDI  R30,LOW(_durationBuffer)
000471 e0f9      	LDI  R31,HIGH(_durationBuffer)
000472 93fa      	ST   -Y,R31
000473 93ea      	ST   -Y,R30
                +
000474 e4ee     +LDI R30 , LOW ( 2 * _0x0 + ( 240 ) )
000475 e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 240 ) )
                 	__POINTW1FN _0x0,240
000476 93fa      	ST   -Y,R31
000477 93ea      	ST   -Y,R30
                +
000478 ede3     +LDI R30 , LOW ( _shutdownTime + ( 2 ) )
000479 e0f8     +LDI R31 , HIGH ( _shutdownTime + ( 2 ) )
                 	__POINTW1MN _shutdownTime,2
00047a 940e 0a53 	CALL SUBOPT_0xC
                +
00047c ede5     +LDI R30 , LOW ( _shutdownTime + ( 4 ) )
00047d e0f8     +LDI R31 , HIGH ( _shutdownTime + ( 4 ) )
                 	__POINTW1MN _shutdownTime,4
00047e 940e 0a53 	CALL SUBOPT_0xC
000480 e088      	LDI  R24,8
000481 940e 08c9 	CALL _sscanf
000483 962c      	ADIW R28,12
                 ; 0000 0139 
                 ; 0000 013A     // Start a countdown
                 ; 0000 013B     while (shutdownTime.minutes != 0 || shutdownTime.seconds != 0)
                 _0x4B:
                +
000484 91a0 08d3+LDS R26 , _shutdownTime + ( 2 )
000486 91b0 08d4+LDS R27 , _shutdownTime + ( 2 ) + 1
                 	__GETW2MN _shutdownTime,2
000488 9710      	SBIW R26,0
000489 f439      	BRNE _0x4E
                +
00048a 91a0 08d5+LDS R26 , _shutdownTime + ( 4 )
00048c 91b0 08d6+LDS R27 , _shutdownTime + ( 4 ) + 1
                 	__GETW2MN _shutdownTime,4
00048e 9710      	SBIW R26,0
00048f f409      	BRNE _0x4E
000490 c05c      	RJMP _0x4D
                 _0x4E:
                 ; 0000 013C     {
                 ; 0000 013D         // Decrement the time
                 ; 0000 013E         if (--shutdownTime.seconds < 0)
                +
000491 eda5     +LDI R26 , LOW ( _shutdownTime + ( 4 ) )
000492 e0b8     +LDI R27 , HIGH ( _shutdownTime + ( 4 ) )
                 	__POINTW2MN _shutdownTime,4
000493 91ed      	LD   R30,X+
000494 91fd      	LD   R31,X+
000495 9731      	SBIW R30,1
000496 93fe      	ST   -X,R31
000497 93ee      	ST   -X,R30
000498 23ff      	TST  R31
000499 f46a      	BRPL _0x50
                 ; 0000 013F         {
                 ; 0000 0140             shutdownTime.seconds = 59;
00049a e3eb      	LDI  R30,LOW(59)
00049b e0f0      	LDI  R31,HIGH(59)
                +
00049c 93e0 08d5+STS _shutdownTime + ( 4 ) , R30
00049e 93f0 08d6+STS _shutdownTime + ( 4 ) + 1 , R31
                 	__PUTW1MN _shutdownTime,4
                 ; 0000 0141             shutdownTime.minutes--;
                +
0004a0 eda3     +LDI R26 , LOW ( _shutdownTime + ( 2 ) )
0004a1 e0b8     +LDI R27 , HIGH ( _shutdownTime + ( 2 ) )
                 	__POINTW2MN _shutdownTime,2
0004a2 91ed      	LD   R30,X+
0004a3 91fd      	LD   R31,X+
0004a4 9731      	SBIW R30,1
0004a5 93fe      	ST   -X,R31
0004a6 93ee      	ST   -X,R30
                 ; 0000 0142         }
                 ; 0000 0143 
                 ; 0000 0144         // Display the remaining time on LCD
                 ; 0000 0145         sprintf(lcdBuffer, "Shutdown in %02d:%02d", shutdownTime.minutes, shutdownTime.seconds);
                 _0x50:
0004a7 e0e6      	LDI  R30,LOW(_lcdBuffer)
0004a8 e0f9      	LDI  R31,HIGH(_lcdBuffer)
0004a9 93fa      	ST   -Y,R31
0004aa 93ea      	ST   -Y,R30
                +
0004ab e8ec     +LDI R30 , LOW ( 2 * _0x0 + ( 302 ) )
0004ac e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 302 ) )
                 	__POINTW1FN _0x0,302
0004ad 93fa      	ST   -Y,R31
0004ae 93ea      	ST   -Y,R30
                +
0004af 91e0 08d3+LDS R30 , _shutdownTime + ( 2 )
0004b1 91f0 08d4+LDS R31 , _shutdownTime + ( 2 ) + 1
                 	__GETW1MN _shutdownTime,2
0004b3 940e 0a58 	CALL SUBOPT_0xD
                +
0004b5 91e0 08d5+LDS R30 , _shutdownTime + ( 4 )
0004b7 91f0 08d6+LDS R31 , _shutdownTime + ( 4 ) + 1
                 	__GETW1MN _shutdownTime,4
0004b9 940e 0a58 	CALL SUBOPT_0xD
0004bb e088      	LDI  R24,8
0004bc 940e 072b 	CALL _sprintf
0004be 962c      	ADIW R28,12
                 ; 0000 0146         lcd_gotoxy(0, 1);
0004bf 940e 0a3b 	CALL SUBOPT_0x8
                 ; 0000 0147         lcd_puts(lcdBuffer);
0004c1 e0a6      	LDI  R26,LOW(_lcdBuffer)
0004c2 e0b9      	LDI  R27,HIGH(_lcdBuffer)
0004c3 940e 09ba 	CALL _lcd_puts
                 ; 0000 0148 
                 ; 0000 0149         // Beep the buzzer when there is 1 minute left
                 ; 0000 014A         if (shutdownTime.minutes == 1 && shutdownTime.seconds == 0)
                +
0004c5 91a0 08d3+LDS R26 , _shutdownTime + ( 2 )
0004c7 91b0 08d4+LDS R27 , _shutdownTime + ( 2 ) + 1
                 	__GETW2MN _shutdownTime,2
0004c9 9711      	SBIW R26,1
0004ca f431      	BRNE _0x52
                +
0004cb 91a0 08d5+LDS R26 , _shutdownTime + ( 4 )
0004cd 91b0 08d6+LDS R27 , _shutdownTime + ( 4 ) + 1
                 	__GETW2MN _shutdownTime,4
0004cf 9710      	SBIW R26,0
0004d0 f009      	BREQ _0x53
                 _0x52:
0004d1 c004      	RJMP _0x51
                 _0x53:
                 ; 0000 014B         {
                 ; 0000 014C             PORTD |= (1 << BUZZER);
0004d2 940e 0a5d 	CALL SUBOPT_0xE
0004d4 29e1      	OR   R30,R1
0004d5 bbe2      	OUT  0x12,R30
                 ; 0000 014D         }
                 ; 0000 014E 
                 ; 0000 014F         // Delay for a second
                 ; 0000 0150         for(i = 0; i < 1000; i++)
                 _0x51:
0004d6 e0e0      	LDI  R30,LOW(0)
0004d7 93e0 0924 	STS  _i,R30
0004d9 93e0 0925 	STS  _i+1,R30
                 _0x55:
0004db 91a0 0924 	LDS  R26,_i
0004dd 91b0 0925 	LDS  R27,_i+1
0004df 3ea8      	CPI  R26,LOW(0x3E8)
0004e0 e0e3      	LDI  R30,HIGH(0x3E8)
0004e1 07be      	CPC  R27,R30
0004e2 f44c      	BRGE _0x56
                 ; 0000 0151             delay_ms(1); // Using delay_ms() in a loop
0004e3 e0a1      	LDI  R26,LOW(1)
0004e4 e0b0      	LDI  R27,0
0004e5 940e 0acb 	CALL _delay_ms
0004e7 e2a4      	LDI  R26,LOW(_i)
0004e8 e0b9      	LDI  R27,HIGH(_i)
0004e9 940e 0a65 	CALL SUBOPT_0xF
0004eb cfef      	RJMP _0x55
                 _0x56:
                 ; 0000 0152 }
0004ec cf97      	RJMP _0x4B
                 _0x4D:
                 ; 0000 0153 
                 ; 0000 0154     // Shutdown the system
                 ; 0000 0155     PORTD &= ~(1 << LED1);
0004ed b212      	IN   R1,18
0004ee e0e0      	LDI  R30,0
0004ef 9990      	SBIC 0x12,0
0004f0 e0e1      	LDI  R30,1
0004f1 940e 0a6b 	CALL SUBOPT_0x10
                 ; 0000 0156     PORTD &= ~(1 << LED2);
0004f3 b212      	IN   R1,18
0004f4 e0e0      	LDI  R30,0
0004f5 9991      	SBIC 0x12,1
0004f6 e0e1      	LDI  R30,1
0004f7 940e 0a6b 	CALL SUBOPT_0x10
                 ; 0000 0157     PORTD &= ~(1 << BUZZER);
0004f9 940e 0a5d 	CALL SUBOPT_0xE
0004fb 95e0      	COM  R30
0004fc 21e1      	AND  R30,R1
0004fd bbe2      	OUT  0x12,R30
                 ; 0000 0158     lcd_clear();
0004fe 940e 098c 	CALL _lcd_clear
                 ; 0000 0159     PORTA = 0; // Turn off 7-segment
000500 e0e0      	LDI  R30,LOW(0)
000501 bbeb      	OUT  0x1B,R30
                 ; 0000 015A }
000502 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x47:
000606           	.BYTE 0x23
                 ;
                 ;void main(void)
                 ; 0000 015D {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 015E     // Port D is output for LEDs
                 ; 0000 015F     DDRD.0 = 1;
000503 9a88      	SBI  0x11,0
                 ; 0000 0160     DDRD.1 = 1;
000504 9a89      	SBI  0x11,1
                 ; 0000 0161 
                 ; 0000 0162     // Turn on the LED1
                 ; 0000 0163     LED1 = 1;
000505 9a90      	SBI  0x12,0
                 ; 0000 0164 
                 ; 0000 0165     // Initialize USART
                 ; 0000 0166     UCSR0A = 0x00;
000506 e0e0      	LDI  R30,LOW(0)
000507 b9eb      	OUT  0xB,R30
                 ; 0000 0167     UCSR0B = 0x18;
000508 e1e8      	LDI  R30,LOW(24)
000509 b9ea      	OUT  0xA,R30
                 ; 0000 0168     UCSR0C = 0x06;
00050a e0e6      	LDI  R30,LOW(6)
00050b 93e0 0095 	STS  149,R30
                 ; 0000 0169     UBRR0L = 51; // for 9600 bps with 8MHz clock
00050d e3e3      	LDI  R30,LOW(51)
00050e b9e9      	OUT  0x9,R30
                 ; 0000 016A 
                 ; 0000 016B     // Enable Global Interrupts
                 ; 0000 016C     #asm("sei")
00050f 9478      	sei
                 ; 0000 016D 
                 ; 0000 016E     send_string("Enter Username: ");
                +
000510 e2a9     +LDI R26 , LOW ( _0x5D + ( 0 ) )
000511 e0b6     +LDI R27 , HIGH ( _0x5D + ( 0 ) )
                 	__POINTW2MN _0x5D,0
000512 dd15      	RCALL _send_string
                 ; 0000 016F 
                 ; 0000 0170     while (1)
                 _0x5E:
                 ; 0000 0171     {
                 ; 0000 0172     key = read_keypad();
000513 dce1      	RCALL _read_keypad
000514 93e0 0926 	STS  _key,R30
                 ; 0000 0173         if (key != '\0')
000516 30e0      	CPI  R30,0
000517 f409      	BRNE PC+2
000518 c03b      	RJMP _0x61
                 ; 0000 0174         {
                 ; 0000 0175             if (isMenuOpen)
000519 91e0 08df 	LDS  R30,_isMenuOpen
00051b 91f0 08e0 	LDS  R31,_isMenuOpen+1
00051d 9730      	SBIW R30,0
00051e f121      	BREQ _0x62
                 ; 0000 0176             {
                 ; 0000 0177                 menuOptionSelected = key - '0';
00051f 91e0 0926 	LDS  R30,_key
000521 e0f0      	LDI  R31,0
000522 97f0      	SBIW R30,48
000523 93e0 0927 	STS  _menuOptionSelected,R30
000525 93f0 0928 	STS  _menuOptionSelected+1,R31
                 ; 0000 0178                 switch(menuOptionSelected)
                 ; 0000 0179                 {
                 ; 0000 017A                     case 1:
000527 30e1      	CPI  R30,LOW(0x1)
000528 e0a0      	LDI  R26,HIGH(0x1)
000529 07fa      	CPC  R31,R26
00052a f411      	BRNE _0x66
                 ; 0000 017B                         measure_voltage();
00052b de9d      	RCALL _measure_voltage
                 ; 0000 017C                         break;
00052c c010      	RJMP _0x65
                 ; 0000 017D                     case 2:
                 _0x66:
00052d 30e2      	CPI  R30,LOW(0x2)
00052e e0a0      	LDI  R26,HIGH(0x2)
00052f 07fa      	CPC  R31,R26
000530 f411      	BRNE _0x67
                 ; 0000 017E                         set_clock();
000531 dee1      	RCALL _set_clock
                 ; 0000 017F                         break;
000532 c00a      	RJMP _0x65
                 ; 0000 0180                     case 3:
                 _0x67:
000533 30e3      	CPI  R30,LOW(0x3)
000534 e0a0      	LDI  R26,HIGH(0x3)
000535 07fa      	CPC  R31,R26
000536 f411      	BRNE _0x69
                 ; 0000 0181                         auto_shutdown();
000537 df2b      	RCALL _auto_shutdown
                 ; 0000 0182                         break;
000538 c004      	RJMP _0x65
                 ; 0000 0183                     default:
                 _0x69:
                 ; 0000 0184                         lcd_puts("Invalid Option");
                +
000539 e3aa     +LDI R26 , LOW ( _0x5D + ( 17 ) )
00053a e0b6     +LDI R27 , HIGH ( _0x5D + ( 17 ) )
                 	__POINTW2MN _0x5D,17
00053b 940e 09ba 	CALL _lcd_puts
                 ; 0000 0185                         break;
                 ; 0000 0186                 }
                 _0x65:
                 ; 0000 0187                 isMenuOpen = 0;
00053d e0e0      	LDI  R30,LOW(0)
00053e 93e0 08df 	STS  _isMenuOpen,R30
000540 93e0 08e0 	STS  _isMenuOpen+1,R30
                 ; 0000 0188             }
                 ; 0000 0189             else if (key == '*')  // Open the menu when * key is pressed
000542 c011      	RJMP _0x6A
                 _0x62:
000543 91a0 0926 	LDS  R26,_key
000545 32aa      	CPI  R26,LOW(0x2A)
000546 f469      	BRNE _0x6B
                 ; 0000 018A             {
                 ; 0000 018B                 lcd_clear();
000547 940e 098c 	CALL _lcd_clear
                 ; 0000 018C                 lcd_gotoxy(0,0);
000549 e0e0      	LDI  R30,LOW(0)
00054a 93ea      	ST   -Y,R30
00054b e0a0      	LDI  R26,LOW(0)
00054c 940e 097b 	CALL _lcd_gotoxy
                 ; 0000 018D                 lcd_puts("1.Volt 2.Clock 3.Shut");
                +
00054e e4a9     +LDI R26 , LOW ( _0x5D + ( 32 ) )
00054f e0b6     +LDI R27 , HIGH ( _0x5D + ( 32 ) )
                 	__POINTW2MN _0x5D,32
000550 940e 09ba 	CALL _lcd_puts
                 ; 0000 018E                 isMenuOpen = 1;
000552 940e 0a72 	CALL SUBOPT_0x11
                 ; 0000 018F             }
                 ; 0000 0190         }
                 _0x6B:
                 _0x6A:
                 ; 0000 0191         if (isMenuOpen == 1)
                 _0x61:
000554 91a0 08df 	LDS  R26,_isMenuOpen
000556 91b0 08e0 	LDS  R27,_isMenuOpen+1
000558 9711      	SBIW R26,1
000559 f589      	BRNE _0x6C
                 ; 0000 0192         {
                 ; 0000 0193             // Display the menu on LCD
                 ; 0000 0194             lcd_gotoxy(0, 0);
00055a e0e0      	LDI  R30,LOW(0)
00055b 93ea      	ST   -Y,R30
00055c e0a0      	LDI  R26,LOW(0)
00055d 940e 097b 	CALL _lcd_gotoxy
                 ; 0000 0195             lcd_putsf("Menu: ");
                +
00055f eda8     +LDI R26 , LOW ( 2 * _0x0 + ( 378 ) )
000560 e0b2     +LDI R27 , HIGH ( 2 * _0x0 + ( 378 ) )
                 	__POINTW2FN _0x0,378
000561 940e 09c9 	CALL _lcd_putsf
                 ; 0000 0196             lcd_gotoxy(0, 1);
000563 940e 0a3b 	CALL SUBOPT_0x8
                 ; 0000 0197             lcd_puts(menuOptions[menuSelection]);
000565 91e0 08e1 	LDS  R30,_menuSelection
000567 91f0 08e2 	LDS  R31,_menuSelection+1
000569 eda7      	LDI  R26,LOW(_menuOptions)
00056a e0b8      	LDI  R27,HIGH(_menuOptions)
00056b 0fee      	LSL  R30
00056c 1fff      	ROL  R31
00056d 0fae      	ADD  R26,R30
00056e 1fbf      	ADC  R27,R31
00056f 940e 0c6d 	CALL __GETW1P
000571 01df      	MOVW R26,R30
000572 940e 09ba 	CALL _lcd_puts
                 ; 0000 0198 
                 ; 0000 0199             // Display selection on 7-segment
                 ; 0000 019A             PORTA = menuSelection + 1;
000574 91e0 08e1 	LDS  R30,_menuSelection
000576 5fef      	SUBI R30,-LOW(1)
000577 bbeb      	OUT  0x1B,R30
                 ; 0000 019B 
                 ; 0000 019C             // Implement switch case for menu selections
                 ; 0000 019D             switch (menuSelection)
000578 91e0 08e1 	LDS  R30,_menuSelection
00057a 91f0 08e2 	LDS  R31,_menuSelection+1
                 ; 0000 019E             {
                 ; 0000 019F                 case 0:
00057c 9730      	SBIW R30,0
00057d f411      	BRNE _0x70
                 ; 0000 01A0                     measure_voltage();
00057e de4a      	RCALL _measure_voltage
                 ; 0000 01A1                     break;
00057f c00b      	RJMP _0x6F
                 ; 0000 01A2                 case 1:
                 _0x70:
000580 30e1      	CPI  R30,LOW(0x1)
000581 e0a0      	LDI  R26,HIGH(0x1)
000582 07fa      	CPC  R31,R26
000583 f411      	BRNE _0x71
                 ; 0000 01A3                     set_clock();
000584 de8e      	RCALL _set_clock
                 ; 0000 01A4                     break;
000585 c005      	RJMP _0x6F
                 ; 0000 01A5                 case 2:
                 _0x71:
000586 30e2      	CPI  R30,LOW(0x2)
000587 e0a0      	LDI  R26,HIGH(0x2)
000588 07fa      	CPC  R31,R26
000589 f409      	BRNE _0x6F
                 ; 0000 01A6                     auto_shutdown();
00058a ded8      	RCALL _auto_shutdown
                 ; 0000 01A7                     break;
                 ; 0000 01A8             }
                 _0x6F:
                 ; 0000 01A9         }
                 ; 0000 01AA 
                 ; 0000 01AB         if (PIND & (1 << KEY_PORT))
                 _0x6C:
00058b b210      	IN   R1,16
00058c e0e0      	LDI  R30,0
00058d 9992      	SBIC 0x12,2
00058e e0e1      	LDI  R30,1
00058f e0a1      	LDI  R26,LOW(1)
000590 e0b0      	LDI  R27,HIGH(1)
000591 940e 0c14 	CALL __LSLW12
000593 2da1      	MOV  R26,R1
000594 e0b0      	LDI  R27,0
000595 23ea      	AND  R30,R26
000596 23fb      	AND  R31,R27
000597 9730      	SBIW R30,0
000598 f119      	BREQ _0x73
                 ; 0000 01AC         {
                 ; 0000 01AD             // Menu button is pressed
                 ; 0000 01AE             if (isMenuOpen == 0)
000599 91e0 08df 	LDS  R30,_isMenuOpen
00059b 91f0 08e0 	LDS  R31,_isMenuOpen+1
00059d 9730      	SBIW R30,0
00059e f441      	BRNE _0x74
                 ; 0000 01AF             {
                 ; 0000 01B0                 // Open the menu
                 ; 0000 01B1                 isMenuOpen = 1;
00059f 940e 0a72 	CALL SUBOPT_0x11
                 ; 0000 01B2                 menuSelection = 0; // Reset the menu selection
0005a1 e0e0      	LDI  R30,LOW(0)
0005a2 93e0 08e1 	STS  _menuSelection,R30
0005a4 93e0 08e2 	STS  _menuSelection+1,R30
                 ; 0000 01B3             }
                 ; 0000 01B4             else
0005a6 c015      	RJMP _0x75
                 _0x74:
                 ; 0000 01B5             {
                 ; 0000 01B6                 // Select the current menu item
                 ; 0000 01B7                 menuSelection = (menuSelection + 1) % numMenuOptions;
0005a7 91a0 08e1 	LDS  R26,_menuSelection
0005a9 91b0 08e2 	LDS  R27,_menuSelection+1
0005ab 9611      	ADIW R26,1
0005ac 91e0 08dd 	LDS  R30,_numMenuOptions
0005ae 91f0 08de 	LDS  R31,_numMenuOptions+1
0005b0 940e 0c47 	CALL __MODW21
0005b2 93e0 08e1 	STS  _menuSelection,R30
0005b4 93f0 08e2 	STS  _menuSelection+1,R31
                 ; 0000 01B8 
                 ; 0000 01B9                 // Close the menu
                 ; 0000 01BA                 isMenuOpen = 0;
0005b6 e0e0      	LDI  R30,LOW(0)
0005b7 93e0 08df 	STS  _isMenuOpen,R30
0005b9 93e0 08e0 	STS  _isMenuOpen+1,R30
                 ; 0000 01BB                 PORTA = 0; // Turn off 7-segment
0005bb bbeb      	OUT  0x1B,R30
                 ; 0000 01BC             }
                 _0x75:
                 ; 0000 01BD         }
                 ; 0000 01BE     }
                 _0x73:
0005bc cf56      	RJMP _0x5E
                 ; 0000 01BF }
                 _0x76:
0005bd cfff      	RJMP _0x76
                 ; .FEND
                 
                 	.DSEG
                 _0x5D:
000629           	.BYTE 0x36
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
                 ; .FSTART _put_buff_G100
0005be 93ba      	ST   -Y,R27
0005bf 93aa      	ST   -Y,R26
0005c0 931a      	ST   -Y,R17
0005c1 930a      	ST   -Y,R16
0005c2 81aa      	LDD  R26,Y+2
0005c3 81bb      	LDD  R27,Y+2+1
0005c4 9612      	ADIW R26,2
0005c5 940e 0c6d 	CALL __GETW1P
0005c7 9730      	SBIW R30,0
0005c8 f129      	BREQ _0x2000010
0005c9 81aa      	LDD  R26,Y+2
0005ca 81bb      	LDD  R27,Y+2+1
0005cb 9614      	ADIW R26,4
0005cc 940e 0c6d 	CALL __GETW1P
0005ce 018f      	MOVW R16,R30
0005cf 9730      	SBIW R30,0
0005d0 f061      	BREQ _0x2000012
                +
0005d1 3002     +CPI R16 , LOW ( 2 )
0005d2 e0e0     +LDI R30 , HIGH ( 2 )
0005d3 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
0005d4 f080      	BRLO _0x2000013
0005d5 01f8      	MOVW R30,R16
0005d6 9731      	SBIW R30,1
0005d7 018f      	MOVW R16,R30
                +
0005d8 81aa     +LDD R26 , Y + 2
0005d9 81bb     +LDD R27 , Y + 2 + 1
0005da 9614     +ADIW R26 , 4
0005db 93ed     +ST X + , R30
0005dc 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2000012:
0005dd 81aa      	LDD  R26,Y+2
0005de 81bb      	LDD  R27,Y+2+1
0005df 9612      	ADIW R26,2
0005e0 940e 0a65 	CALL SUBOPT_0xF
0005e2 9731      	SBIW R30,1
0005e3 81ac      	LDD  R26,Y+4
0005e4 83a0      	STD  Z+0,R26
                 _0x2000013:
0005e5 81aa      	LDD  R26,Y+2
0005e6 81bb      	LDD  R27,Y+2+1
0005e7 940e 0c6d 	CALL __GETW1P
0005e9 23ff      	TST  R31
0005ea f012      	BRMI _0x2000014
0005eb 940e 0a65 	CALL SUBOPT_0xF
                 _0x2000014:
0005ed c006      	RJMP _0x2000015
                 _0x2000010:
0005ee 81aa      	LDD  R26,Y+2
0005ef 81bb      	LDD  R27,Y+2+1
0005f0 efef      	LDI  R30,LOW(65535)
0005f1 efff      	LDI  R31,HIGH(65535)
0005f2 93ed      	ST   X+,R30
0005f3 93fc      	ST   X,R31
                 _0x2000015:
0005f4 8119      	LDD  R17,Y+1
0005f5 8108      	LDD  R16,Y+0
0005f6 c18e      	RJMP _0x20C0007
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
0005f7 93ba      	ST   -Y,R27
0005f8 93aa      	ST   -Y,R26
0005f9 9726      	SBIW R28,6
0005fa 940e 0c89 	CALL __SAVELOCR6
0005fc e010      	LDI  R17,0
0005fd 85ac      	LDD  R26,Y+12
0005fe 85bd      	LDD  R27,Y+12+1
0005ff e0e0      	LDI  R30,LOW(0)
000600 e0f0      	LDI  R31,HIGH(0)
000601 93ed      	ST   X+,R30
000602 93fc      	ST   X,R31
                 _0x2000016:
000603 89ea      	LDD  R30,Y+18
000604 89fb      	LDD  R31,Y+18+1
000605 9631      	ADIW R30,1
000606 8bea      	STD  Y+18,R30
000607 8bfb      	STD  Y+18+1,R31
000608 9731      	SBIW R30,1
000609 91e4      	LPM  R30,Z
00060a 2f2e      	MOV  R18,R30
00060b 30e0      	CPI  R30,0
00060c f409      	BRNE PC+2
00060d c115      	RJMP _0x2000018
00060e 2fe1      	MOV  R30,R17
00060f 30e0      	CPI  R30,0
000610 f439      	BRNE _0x200001C
000611 3225      	CPI  R18,37
000612 f411      	BRNE _0x200001D
000613 e011      	LDI  R17,LOW(1)
000614 c002      	RJMP _0x200001E
                 _0x200001D:
000615 940e 0a79 	CALL SUBOPT_0x12
                 _0x200001E:
000617 c10a      	RJMP _0x200001B
                 _0x200001C:
000618 30e1      	CPI  R30,LOW(0x1)
000619 f4a9      	BRNE _0x200001F
00061a 3225      	CPI  R18,37
00061b f419      	BRNE _0x2000020
00061c 940e 0a79 	CALL SUBOPT_0x12
00061e c102      	RJMP _0x20000CC
                 _0x2000020:
00061f e012      	LDI  R17,LOW(2)
000620 e040      	LDI  R20,LOW(0)
000621 e000      	LDI  R16,LOW(0)
000622 322d      	CPI  R18,45
000623 f411      	BRNE _0x2000021
000624 e001      	LDI  R16,LOW(1)
000625 c0fc      	RJMP _0x200001B
                 _0x2000021:
000626 322b      	CPI  R18,43
000627 f411      	BRNE _0x2000022
000628 e24b      	LDI  R20,LOW(43)
000629 c0f8      	RJMP _0x200001B
                 _0x2000022:
00062a 3220      	CPI  R18,32
00062b f411      	BRNE _0x2000023
00062c e240      	LDI  R20,LOW(32)
00062d c0f4      	RJMP _0x200001B
                 _0x2000023:
00062e c002      	RJMP _0x2000024
                 _0x200001F:
00062f 30e2      	CPI  R30,LOW(0x2)
000630 f439      	BRNE _0x2000025
                 _0x2000024:
000631 e050      	LDI  R21,LOW(0)
000632 e013      	LDI  R17,LOW(3)
000633 3320      	CPI  R18,48
000634 f411      	BRNE _0x2000026
000635 6800      	ORI  R16,LOW(128)
000636 c0eb      	RJMP _0x200001B
                 _0x2000026:
000637 c003      	RJMP _0x2000027
                 _0x2000025:
000638 30e3      	CPI  R30,LOW(0x3)
000639 f009      	BREQ PC+2
00063a c0e7      	RJMP _0x200001B
                 _0x2000027:
00063b 3320      	CPI  R18,48
00063c f010      	BRLO _0x200002A
00063d 332a      	CPI  R18,58
00063e f008      	BRLO _0x200002B
                 _0x200002A:
00063f c007      	RJMP _0x2000029
                 _0x200002B:
000640 e0aa      	LDI  R26,LOW(10)
000641 9f5a      	MUL  R21,R26
000642 2d50      	MOV  R21,R0
000643 2fe2      	MOV  R30,R18
000644 53e0      	SUBI R30,LOW(48)
000645 0f5e      	ADD  R21,R30
000646 c0db      	RJMP _0x200001B
                 _0x2000029:
000647 2fe2      	MOV  R30,R18
000648 36e3      	CPI  R30,LOW(0x63)
000649 f449      	BRNE _0x200002F
00064a 940e 0a80 	CALL SUBOPT_0x13
00064c 89e8      	LDD  R30,Y+16
00064d 89f9      	LDD  R31,Y+16+1
00064e 81a4      	LDD  R26,Z+4
00064f 93aa      	ST   -Y,R26
000650 940e 0a86 	CALL SUBOPT_0x14
000652 c0ce      	RJMP _0x2000030
                 _0x200002F:
000653 37e3      	CPI  R30,LOW(0x73)
000654 f441      	BRNE _0x2000032
000655 940e 0a80 	CALL SUBOPT_0x13
000657 940e 0a8c 	CALL SUBOPT_0x15
000659 940e 092d 	CALL _strlen
00065b 2f1e      	MOV  R17,R30
00065c c00a      	RJMP _0x2000033
                 _0x2000032:
00065d 37e0      	CPI  R30,LOW(0x70)
00065e f461      	BRNE _0x2000035
00065f 940e 0a80 	CALL SUBOPT_0x13
000661 940e 0a8c 	CALL SUBOPT_0x15
000663 940e 0939 	CALL _strlenf
000665 2f1e      	MOV  R17,R30
000666 6008      	ORI  R16,LOW(8)
                 _0x2000033:
000667 6002      	ORI  R16,LOW(2)
000668 770f      	ANDI R16,LOW(127)
000669 e030      	LDI  R19,LOW(0)
00066a c034      	RJMP _0x2000036
                 _0x2000035:
00066b 36e4      	CPI  R30,LOW(0x64)
00066c f011      	BREQ _0x2000039
00066d 36e9      	CPI  R30,LOW(0x69)
00066e f411      	BRNE _0x200003A
                 _0x2000039:
00066f 6004      	ORI  R16,LOW(4)
000670 c002      	RJMP _0x200003B
                 _0x200003A:
000671 37e5      	CPI  R30,LOW(0x75)
000672 f431      	BRNE _0x200003C
                 _0x200003B:
000673 e8ec      	LDI  R30,LOW(_tbl10_G100*2)
000674 e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
000675 83ee      	STD  Y+6,R30
000676 83ff      	STD  Y+6+1,R31
000677 e015      	LDI  R17,LOW(5)
000678 c00c      	RJMP _0x200003D
                 _0x200003C:
000679 35e8      	CPI  R30,LOW(0x58)
00067a f411      	BRNE _0x200003F
00067b 6008      	ORI  R16,LOW(8)
00067c c003      	RJMP _0x2000040
                 _0x200003F:
00067d 37e8      	CPI  R30,LOW(0x78)
00067e f009      	BREQ PC+2
00067f c0a1      	RJMP _0x2000071
                 _0x2000040:
000680 e9e6      	LDI  R30,LOW(_tbl16_G100*2)
000681 e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
000682 83ee      	STD  Y+6,R30
000683 83ff      	STD  Y+6+1,R31
000684 e014      	LDI  R17,LOW(4)
                 _0x200003D:
000685 ff02      	SBRS R16,2
000686 c014      	RJMP _0x2000042
000687 940e 0a80 	CALL SUBOPT_0x13
000689 940e 0a96 	CALL SUBOPT_0x16
00068b 85ab      	LDD  R26,Y+11
00068c 23aa      	TST  R26
00068d f43a      	BRPL _0x2000043
00068e 85ea      	LDD  R30,Y+10
00068f 85fb      	LDD  R31,Y+10+1
000690 940e 0c00 	CALL __ANEGW1
000692 87ea      	STD  Y+10,R30
000693 87fb      	STD  Y+10+1,R31
000694 e24d      	LDI  R20,LOW(45)
                 _0x2000043:
000695 3040      	CPI  R20,0
000696 f011      	BREQ _0x2000044
000697 5f1f      	SUBI R17,-LOW(1)
000698 c001      	RJMP _0x2000045
                 _0x2000044:
000699 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
00069a c004      	RJMP _0x2000046
                 _0x2000042:
00069b 940e 0a80 	CALL SUBOPT_0x13
00069d 940e 0a96 	CALL SUBOPT_0x16
                 _0x2000046:
                 _0x2000036:
00069f fd00      	SBRC R16,0
0006a0 c011      	RJMP _0x2000047
                 _0x2000048:
0006a1 1715      	CP   R17,R21
0006a2 f478      	BRSH _0x200004A
0006a3 ff07      	SBRS R16,7
0006a4 c008      	RJMP _0x200004B
0006a5 ff02      	SBRS R16,2
0006a6 c004      	RJMP _0x200004C
0006a7 7f0b      	ANDI R16,LOW(251)
0006a8 2f24      	MOV  R18,R20
0006a9 5011      	SUBI R17,LOW(1)
0006aa c001      	RJMP _0x200004D
                 _0x200004C:
0006ab e320      	LDI  R18,LOW(48)
                 _0x200004D:
0006ac c001      	RJMP _0x200004E
                 _0x200004B:
0006ad e220      	LDI  R18,LOW(32)
                 _0x200004E:
0006ae 940e 0a79 	CALL SUBOPT_0x12
0006b0 5051      	SUBI R21,LOW(1)
0006b1 cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
0006b2 2f31      	MOV  R19,R17
0006b3 ff01      	SBRS R16,1
0006b4 c017      	RJMP _0x200004F
                 _0x2000050:
0006b5 3030      	CPI  R19,0
0006b6 f0a1      	BREQ _0x2000052
0006b7 ff03      	SBRS R16,3
0006b8 c006      	RJMP _0x2000053
0006b9 81ee      	LDD  R30,Y+6
0006ba 81ff      	LDD  R31,Y+6+1
0006bb 9125      	LPM  R18,Z+
0006bc 83ee      	STD  Y+6,R30
0006bd 83ff      	STD  Y+6+1,R31
0006be c005      	RJMP _0x2000054
                 _0x2000053:
0006bf 81ae      	LDD  R26,Y+6
0006c0 81bf      	LDD  R27,Y+6+1
0006c1 912d      	LD   R18,X+
0006c2 83ae      	STD  Y+6,R26
0006c3 83bf      	STD  Y+6+1,R27
                 _0x2000054:
0006c4 940e 0a79 	CALL SUBOPT_0x12
0006c6 3050      	CPI  R21,0
0006c7 f009      	BREQ _0x2000055
0006c8 5051      	SUBI R21,LOW(1)
                 _0x2000055:
0006c9 5031      	SUBI R19,LOW(1)
0006ca cfea      	RJMP _0x2000050
                 _0x2000052:
0006cb c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
0006cc e320      	LDI  R18,LOW(48)
0006cd 81ee      	LDD  R30,Y+6
0006ce 81ff      	LDD  R31,Y+6+1
0006cf 940e 0c71 	CALL __GETW1PF
0006d1 87e8      	STD  Y+8,R30
0006d2 87f9      	STD  Y+8+1,R31
0006d3 81ee      	LDD  R30,Y+6
0006d4 81ff      	LDD  R31,Y+6+1
0006d5 9632      	ADIW R30,2
0006d6 83ee      	STD  Y+6,R30
0006d7 83ff      	STD  Y+6+1,R31
                 _0x200005A:
0006d8 85e8      	LDD  R30,Y+8
0006d9 85f9      	LDD  R31,Y+8+1
0006da 85aa      	LDD  R26,Y+10
0006db 85bb      	LDD  R27,Y+10+1
0006dc 17ae      	CP   R26,R30
0006dd 07bf      	CPC  R27,R31
0006de f050      	BRLO _0x200005C
0006df 5f2f      	SUBI R18,-LOW(1)
0006e0 85a8      	LDD  R26,Y+8
0006e1 85b9      	LDD  R27,Y+8+1
0006e2 85ea      	LDD  R30,Y+10
0006e3 85fb      	LDD  R31,Y+10+1
0006e4 1bea      	SUB  R30,R26
0006e5 0bfb      	SBC  R31,R27
0006e6 87ea      	STD  Y+10,R30
0006e7 87fb      	STD  Y+10+1,R31
0006e8 cfef      	RJMP _0x200005A
                 _0x200005C:
0006e9 332a      	CPI  R18,58
0006ea f028      	BRLO _0x200005D
0006eb ff03      	SBRS R16,3
0006ec c002      	RJMP _0x200005E
0006ed 5f29      	SUBI R18,-LOW(7)
0006ee c001      	RJMP _0x200005F
                 _0x200005E:
0006ef 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
0006f0 fd04      	SBRC R16,4
0006f1 c01a      	RJMP _0x2000061
0006f2 3321      	CPI  R18,49
0006f3 f420      	BRSH _0x2000063
0006f4 85a8      	LDD  R26,Y+8
0006f5 85b9      	LDD  R27,Y+8+1
0006f6 9711      	SBIW R26,1
0006f7 f409      	BRNE _0x2000062
                 _0x2000063:
0006f8 c009      	RJMP _0x20000CD
                 _0x2000062:
0006f9 1753      	CP   R21,R19
0006fa f010      	BRLO _0x2000067
0006fb ff00      	SBRS R16,0
0006fc c001      	RJMP _0x2000068
                 _0x2000067:
0006fd c013      	RJMP _0x2000066
                 _0x2000068:
0006fe e220      	LDI  R18,LOW(32)
0006ff ff07      	SBRS R16,7
000700 c00b      	RJMP _0x2000069
000701 e320      	LDI  R18,LOW(48)
                 _0x20000CD:
000702 6100      	ORI  R16,LOW(16)
000703 ff02      	SBRS R16,2
000704 c007      	RJMP _0x200006A
000705 7f0b      	ANDI R16,LOW(251)
000706 934a      	ST   -Y,R20
000707 940e 0a86 	CALL SUBOPT_0x14
000709 3050      	CPI  R21,0
00070a f009      	BREQ _0x200006B
00070b 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
00070c 940e 0a79 	CALL SUBOPT_0x12
00070e 3050      	CPI  R21,0
00070f f009      	BREQ _0x200006C
000710 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
000711 5031      	SUBI R19,LOW(1)
000712 85a8      	LDD  R26,Y+8
000713 85b9      	LDD  R27,Y+8+1
000714 9712      	SBIW R26,2
000715 f008      	BRLO _0x2000059
000716 cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
000717 ff00      	SBRS R16,0
000718 c008      	RJMP _0x200006D
                 _0x200006E:
000719 3050      	CPI  R21,0
00071a f031      	BREQ _0x2000070
00071b 5051      	SUBI R21,LOW(1)
00071c e2e0      	LDI  R30,LOW(32)
00071d 93ea      	ST   -Y,R30
00071e 940e 0a86 	CALL SUBOPT_0x14
000720 cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000CC:
000721 e010      	LDI  R17,LOW(0)
                 _0x200001B:
000722 cee0      	RJMP _0x2000016
                 _0x2000018:
000723 85ac      	LDD  R26,Y+12
000724 85bd      	LDD  R27,Y+12+1
000725 940e 0c6d 	CALL __GETW1P
000727 940e 0c90 	CALL __LOADLOCR6
000729 9664      	ADIW R28,20
00072a 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
00072b 92ff      	PUSH R15
00072c 2ef8      	MOV  R15,R24
00072d 9726      	SBIW R28,6
00072e 940e 0c8b 	CALL __SAVELOCR4
000730 940e 0a9e 	CALL SUBOPT_0x17
000732 9730      	SBIW R30,0
000733 f419      	BRNE _0x2000072
000734 efef      	LDI  R30,LOW(65535)
000735 efff      	LDI  R31,HIGH(65535)
000736 c021      	RJMP _0x20C0008
                 _0x2000072:
000737 01de      	MOVW R26,R28
000738 9616      	ADIW R26,6
000739 940e 0bfc 	CALL __ADDW2R15
00073b 018d      	MOVW R16,R26
00073c 940e 0a9e 	CALL SUBOPT_0x17
00073e 83ee      	STD  Y+6,R30
00073f 83ff      	STD  Y+6+1,R31
000740 e0e0      	LDI  R30,LOW(0)
000741 87e8      	STD  Y+8,R30
000742 87e9      	STD  Y+8+1,R30
000743 01de      	MOVW R26,R28
000744 961a      	ADIW R26,10
000745 940e 0aa5 	CALL SUBOPT_0x18
000747 93fa      	ST   -Y,R31
000748 93ea      	ST   -Y,R30
000749 931a      	ST   -Y,R17
00074a 930a      	ST   -Y,R16
00074b ebee      	LDI  R30,LOW(_put_buff_G100)
00074c e0f5      	LDI  R31,HIGH(_put_buff_G100)
00074d 93fa      	ST   -Y,R31
00074e 93ea      	ST   -Y,R30
00074f 01de      	MOVW R26,R28
000750 961a      	ADIW R26,10
000751 dea5      	RCALL __print_G100
000752 019f      	MOVW R18,R30
000753 81ae      	LDD  R26,Y+6
000754 81bf      	LDD  R27,Y+6+1
000755 e0e0      	LDI  R30,LOW(0)
000756 93ec      	ST   X,R30
000757 01f9      	MOVW R30,R18
                 _0x20C0008:
000758 940e 0c92 	CALL __LOADLOCR4
00075a 962a      	ADIW R28,10
00075b 90ff      	POP  R15
00075c 9508      	RET
                 ; .FEND
                 _get_buff_G100:
                 ; .FSTART _get_buff_G100
00075d 93ba      	ST   -Y,R27
00075e 93aa      	ST   -Y,R26
00075f 931a      	ST   -Y,R17
000760 81a9      	LDD  R26,Y+1
000761 81ba      	LDD  R27,Y+1+1
000762 e0e0      	LDI  R30,LOW(0)
000763 93ec      	ST   X,R30
000764 81ab      	LDD  R26,Y+3
000765 81bc      	LDD  R27,Y+3+1
000766 91ec      	LD   R30,X
000767 2f1e      	MOV  R17,R30
000768 30e0      	CPI  R30,0
000769 f019      	BREQ _0x200007A
00076a e0e0      	LDI  R30,LOW(0)
00076b 93ec      	ST   X,R30
00076c c016      	RJMP _0x200007B
                 _0x200007A:
00076d 81a9      	LDD  R26,Y+1
00076e 81ba      	LDD  R27,Y+1+1
00076f 9611      	ADIW R26,1
000770 940e 0c6d 	CALL __GETW1P
000772 9730      	SBIW R30,0
000773 f071      	BREQ _0x200007C
000774 81e9      	LDD  R30,Y+1
000775 81fa      	LDD  R31,Y+1+1
000776 81a1      	LDD  R26,Z+1
000777 81b2      	LDD  R27,Z+2
000778 91ec      	LD   R30,X
000779 2f1e      	MOV  R17,R30
00077a 30e0      	CPI  R30,0
00077b f029      	BREQ _0x200007D
00077c 81a9      	LDD  R26,Y+1
00077d 81ba      	LDD  R27,Y+1+1
00077e 9611      	ADIW R26,1
00077f 940e 0a65 	CALL SUBOPT_0xF
                 _0x200007D:
000781 c001      	RJMP _0x200007E
                 _0x200007C:
000782 e010      	LDI  R17,LOW(0)
                 _0x200007E:
                 _0x200007B:
000783 2fe1      	MOV  R30,R17
000784 8118      	LDD  R17,Y+0
                 _0x20C0007:
000785 9625      	ADIW R28,5
000786 9508      	RET
                 ; .FEND
                 __scanf_G100:
                 ; .FSTART __scanf_G100
000787 92ff      	PUSH R15
000788 93ba      	ST   -Y,R27
000789 93aa      	ST   -Y,R26
00078a 9724      	SBIW R28,4
00078b 940e 0c89 	CALL __SAVELOCR6
00078d e0e0      	LDI  R30,LOW(0)
00078e e0f0      	LDI  R31,HIGH(0)
00078f 87e8      	STD  Y+8,R30
000790 87f9      	STD  Y+8+1,R31
000791 2f4e      	MOV  R20,R30
                 _0x200007F:
000792 89e8      	LDD  R30,Y+16
000793 89f9      	LDD  R31,Y+16+1
000794 9631      	ADIW R30,1
000795 8be8      	STD  Y+16,R30
000796 8bf9      	STD  Y+16+1,R31
000797 9731      	SBIW R30,1
000798 91e4      	LPM  R30,Z
000799 2f3e      	MOV  R19,R30
00079a 30e0      	CPI  R30,0
00079b f409      	BRNE PC+2
00079c c125      	RJMP _0x2000081
00079d 940e 0aaa 	CALL SUBOPT_0x19
00079f f0c1      	BREQ _0x2000082
                 _0x2000083:
0007a0 b7ed      	IN   R30,SPL
0007a1 b7fe      	IN   R31,SPH
0007a2 93fa      	ST   -Y,R31
0007a3 93ea      	ST   -Y,R30
0007a4 934f      	PUSH R20
0007a5 940e 0aaf 	CALL SUBOPT_0x1A
0007a7 914f      	POP  R20
0007a8 2f3e      	MOV  R19,R30
0007a9 30e0      	CPI  R30,0
0007aa f019      	BREQ _0x2000086
0007ab 940e 0aaa 	CALL SUBOPT_0x19
0007ad f409      	BRNE _0x2000087
                 _0x2000086:
0007ae c007      	RJMP _0x2000085
                 _0x2000087:
0007af 940e 0ab5 	CALL SUBOPT_0x1B
0007b1 f41c      	BRGE _0x2000088
0007b2 efef      	LDI  R30,LOW(65535)
0007b3 efff      	LDI  R31,HIGH(65535)
0007b4 c10f      	RJMP _0x20C0005
                 _0x2000088:
0007b5 cfea      	RJMP _0x2000083
                 _0x2000085:
0007b6 2f43      	MOV  R20,R19
0007b7 c109      	RJMP _0x2000089
                 _0x2000082:
0007b8 3235      	CPI  R19,37
0007b9 f009      	BREQ PC+2
0007ba c0ee      	RJMP _0x200008A
0007bb e050      	LDI  R21,LOW(0)
                 _0x200008B:
0007bc 89e8      	LDD  R30,Y+16
0007bd 89f9      	LDD  R31,Y+16+1
0007be 9135      	LPM  R19,Z+
0007bf 8be8      	STD  Y+16,R30
0007c0 8bf9      	STD  Y+16+1,R31
0007c1 3330      	CPI  R19,48
0007c2 f010      	BRLO _0x200008F
0007c3 333a      	CPI  R19,58
0007c4 f008      	BRLO _0x200008E
                 _0x200008F:
0007c5 c007      	RJMP _0x200008D
                 _0x200008E:
0007c6 e0aa      	LDI  R26,LOW(10)
0007c7 9f5a      	MUL  R21,R26
0007c8 2d50      	MOV  R21,R0
0007c9 2fe3      	MOV  R30,R19
0007ca 53e0      	SUBI R30,LOW(48)
0007cb 0f5e      	ADD  R21,R30
0007cc cfef      	RJMP _0x200008B
                 _0x200008D:
0007cd 3030      	CPI  R19,0
0007ce f409      	BRNE _0x2000091
0007cf c0f2      	RJMP _0x2000081
                 _0x2000091:
                 _0x2000092:
0007d0 b7ed      	IN   R30,SPL
0007d1 b7fe      	IN   R31,SPH
0007d2 93fa      	ST   -Y,R31
0007d3 93ea      	ST   -Y,R30
0007d4 934f      	PUSH R20
0007d5 940e 0aaf 	CALL SUBOPT_0x1A
0007d7 914f      	POP  R20
0007d8 2f2e      	MOV  R18,R30
0007d9 2fae      	MOV  R26,R30
0007da 940e 09e5 	CALL _isspace
0007dc 30e0      	CPI  R30,0
0007dd f039      	BREQ _0x2000094
0007de 940e 0ab5 	CALL SUBOPT_0x1B
0007e0 f41c      	BRGE _0x2000095
0007e1 efef      	LDI  R30,LOW(65535)
0007e2 efff      	LDI  R31,HIGH(65535)
0007e3 c0e0      	RJMP _0x20C0005
                 _0x2000095:
0007e4 cfeb      	RJMP _0x2000092
                 _0x2000094:
0007e5 3020      	CPI  R18,0
0007e6 f409      	BRNE _0x2000096
0007e7 c0d1      	RJMP _0x2000097
                 _0x2000096:
0007e8 2f42      	MOV  R20,R18
0007e9 3050      	CPI  R21,0
0007ea f409      	BRNE _0x2000098
0007eb ef5f      	LDI  R21,LOW(255)
                 _0x2000098:
0007ec 2fe3      	MOV  R30,R19
0007ed 36e3      	CPI  R30,LOW(0x63)
0007ee f499      	BRNE _0x200009C
0007ef 940e 0aba 	CALL SUBOPT_0x1C
0007f1 b7ed      	IN   R30,SPL
0007f2 b7fe      	IN   R31,SPH
0007f3 93fa      	ST   -Y,R31
0007f4 93ea      	ST   -Y,R30
0007f5 934f      	PUSH R20
0007f6 940e 0aaf 	CALL SUBOPT_0x1A
0007f8 914f      	POP  R20
0007f9 01d8      	MOVW R26,R16
0007fa 93ec      	ST   X,R30
0007fb 940e 0ab5 	CALL SUBOPT_0x1B
0007fd f41c      	BRGE _0x200009D
0007fe efef      	LDI  R30,LOW(65535)
0007ff efff      	LDI  R31,HIGH(65535)
000800 c0c3      	RJMP _0x20C0005
                 _0x200009D:
000801 c0a1      	RJMP _0x200009B
                 _0x200009C:
000802 37e3      	CPI  R30,LOW(0x73)
000803 f541      	BRNE _0x20000A6
000804 940e 0aba 	CALL SUBOPT_0x1C
                 _0x200009F:
000806 2fe5      	MOV  R30,R21
000807 5051      	SUBI R21,1
000808 30e0      	CPI  R30,0
000809 f0f1      	BREQ _0x20000A1
00080a b7ed      	IN   R30,SPL
00080b b7fe      	IN   R31,SPH
00080c 93fa      	ST   -Y,R31
00080d 93ea      	ST   -Y,R30
00080e 934f      	PUSH R20
00080f 940e 0aaf 	CALL SUBOPT_0x1A
000811 914f      	POP  R20
000812 2f3e      	MOV  R19,R30
000813 30e0      	CPI  R30,0
000814 f019      	BREQ _0x20000A3
000815 940e 0aaa 	CALL SUBOPT_0x19
000817 f039      	BREQ _0x20000A2
                 _0x20000A3:
000818 940e 0ab5 	CALL SUBOPT_0x1B
00081a f41c      	BRGE _0x20000A5
00081b efef      	LDI  R30,LOW(65535)
00081c efff      	LDI  R31,HIGH(65535)
00081d c0a6      	RJMP _0x20C0005
                 _0x20000A5:
00081e c009      	RJMP _0x20000A1
                 _0x20000A2:
00081f 931f      	PUSH R17
000820 930f      	PUSH R16
                +
000821 5f0f     +SUBI R16 , LOW ( - 1 )
000822 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000823 2fe3      	MOV  R30,R19
000824 91af      	POP  R26
000825 91bf      	POP  R27
000826 93ec      	ST   X,R30
000827 cfde      	RJMP _0x200009F
                 _0x20000A1:
000828 01d8      	MOVW R26,R16
000829 e0e0      	LDI  R30,LOW(0)
00082a 93ec      	ST   X,R30
00082b c077      	RJMP _0x200009B
                 _0x20000A6:
00082c 9468      	SET
00082d f8f1      	BLD  R15,1
00082e 94e8      	CLT
00082f f8f2      	BLD  R15,2
000830 2fe3      	MOV  R30,R19
000831 36e4      	CPI  R30,LOW(0x64)
000832 f011      	BREQ _0x20000AB
000833 36e9      	CPI  R30,LOW(0x69)
000834 f419      	BRNE _0x20000AC
                 _0x20000AB:
000835 94e8      	CLT
000836 f8f1      	BLD  R15,1
000837 c002      	RJMP _0x20000AD
                 _0x20000AC:
000838 37e5      	CPI  R30,LOW(0x75)
000839 f411      	BRNE _0x20000AE
                 _0x20000AD:
00083a e02a      	LDI  R18,LOW(10)
00083b c008      	RJMP _0x20000A9
                 _0x20000AE:
00083c 37e8      	CPI  R30,LOW(0x78)
00083d f411      	BRNE _0x20000AF
00083e e120      	LDI  R18,LOW(16)
00083f c004      	RJMP _0x20000A9
                 _0x20000AF:
000840 32e5      	CPI  R30,LOW(0x25)
000841 f409      	BRNE _0x20000B2
000842 c066      	RJMP _0x20000B1
                 _0x20000B2:
000843 c07e      	RJMP _0x20C0006
                 _0x20000A9:
000844 e0e0      	LDI  R30,LOW(0)
000845 83ee      	STD  Y+6,R30
000846 83ef      	STD  Y+6+1,R30
000847 9468      	SET
000848 f8f0      	BLD  R15,0
                 _0x20000B3:
000849 2fe5      	MOV  R30,R21
00084a 5051      	SUBI R21,1
00084b 30e0      	CPI  R30,0
00084c f409      	BRNE PC+2
00084d c046      	RJMP _0x20000B5
00084e b7ed      	IN   R30,SPL
00084f b7fe      	IN   R31,SPH
000850 93fa      	ST   -Y,R31
000851 93ea      	ST   -Y,R30
000852 934f      	PUSH R20
000853 940e 0aaf 	CALL SUBOPT_0x1A
000855 914f      	POP  R20
000856 2f3e      	MOV  R19,R30
000857 32e1      	CPI  R30,LOW(0x21)
000858 f438      	BRSH _0x20000B6
000859 940e 0ab5 	CALL SUBOPT_0x1B
00085b f41c      	BRGE _0x20000B7
00085c efef      	LDI  R30,LOW(65535)
00085d efff      	LDI  R31,HIGH(65535)
00085e c065      	RJMP _0x20C0005
                 _0x20000B7:
00085f c017      	RJMP _0x20000B8
                 _0x20000B6:
000860 fcf1      	SBRC R15,1
000861 c008      	RJMP _0x20000B9
000862 9468      	SET
000863 f8f1      	BLD  R15,1
000864 323d      	CPI  R19,45
000865 f411      	BRNE _0x20000BA
000866 f8f2      	BLD  R15,2
000867 cfe1      	RJMP _0x20000B3
                 _0x20000BA:
000868 323b      	CPI  R19,43
000869 f2f9      	BREQ _0x20000B3
                 _0x20000B9:
00086a 3120      	CPI  R18,16
00086b f431      	BRNE _0x20000BC
00086c 2fa3      	MOV  R26,R19
00086d 940e 09f0 	CALL _isxdigit
00086f 30e0      	CPI  R30,0
000870 f031      	BREQ _0x20000B8
000871 c009      	RJMP _0x20000BE
                 _0x20000BC:
000872 2fa3      	MOV  R26,R19
000873 940e 09dc 	CALL _isdigit
000875 30e0      	CPI  R30,0
000876 f421      	BRNE _0x20000BF
                 _0x20000B8:
000877 fcf0      	SBRC R15,0
000878 c049      	RJMP _0x20000C1
000879 2f43      	MOV  R20,R19
00087a c019      	RJMP _0x20000B5
                 _0x20000BF:
                 _0x20000BE:
00087b 3631      	CPI  R19,97
00087c f010      	BRLO _0x20000C2
00087d 5537      	SUBI R19,LOW(87)
00087e c005      	RJMP _0x20000C3
                 _0x20000C2:
00087f 3431      	CPI  R19,65
000880 f010      	BRLO _0x20000C4
000881 5337      	SUBI R19,LOW(55)
000882 c001      	RJMP _0x20000C5
                 _0x20000C4:
000883 5330      	SUBI R19,LOW(48)
                 _0x20000C5:
                 _0x20000C3:
000884 2fe2      	MOV  R30,R18
000885 81ae      	LDD  R26,Y+6
000886 81bf      	LDD  R27,Y+6+1
000887 e0f0      	LDI  R31,0
000888 940e 0c27 	CALL __MULW12U
00088a 01df      	MOVW R26,R30
00088b 2fe3      	MOV  R30,R19
00088c e0f0      	LDI  R31,0
00088d 0fea      	ADD  R30,R26
00088e 1ffb      	ADC  R31,R27
00088f 83ee      	STD  Y+6,R30
000890 83ff      	STD  Y+6+1,R31
000891 94e8      	CLT
000892 f8f0      	BLD  R15,0
000893 cfb5      	RJMP _0x20000B3
                 _0x20000B5:
000894 940e 0aba 	CALL SUBOPT_0x1C
000896 fef2      	SBRS R15,2
000897 c006      	RJMP _0x20000C6
000898 81ee      	LDD  R30,Y+6
000899 81ff      	LDD  R31,Y+6+1
00089a 940e 0c00 	CALL __ANEGW1
00089c 83ee      	STD  Y+6,R30
00089d 83ff      	STD  Y+6+1,R31
                 _0x20000C6:
00089e 81ee      	LDD  R30,Y+6
00089f 81ff      	LDD  R31,Y+6+1
0008a0 01d8      	MOVW R26,R16
0008a1 93ed      	ST   X+,R30
0008a2 93fc      	ST   X,R31
                 _0x200009B:
0008a3 85e8      	LDD  R30,Y+8
0008a4 85f9      	LDD  R31,Y+8+1
0008a5 9631      	ADIW R30,1
0008a6 87e8      	STD  Y+8,R30
0008a7 87f9      	STD  Y+8+1,R31
0008a8 c018      	RJMP _0x20000C7
                 _0x200008A:
                 _0x20000B1:
0008a9 b7ed      	IN   R30,SPL
0008aa b7fe      	IN   R31,SPH
0008ab 93fa      	ST   -Y,R31
0008ac 93ea      	ST   -Y,R30
0008ad 934f      	PUSH R20
0008ae 940e 0aaf 	CALL SUBOPT_0x1A
0008b0 914f      	POP  R20
0008b1 17e3      	CP   R30,R19
0008b2 f071      	BREQ _0x20000C8
0008b3 940e 0ab5 	CALL SUBOPT_0x1B
0008b5 f41c      	BRGE _0x20000C9
0008b6 efef      	LDI  R30,LOW(65535)
0008b7 efff      	LDI  R31,HIGH(65535)
0008b8 c00b      	RJMP _0x20C0005
                 _0x20000C9:
                 _0x2000097:
0008b9 85e8      	LDD  R30,Y+8
0008ba 85f9      	LDD  R31,Y+8+1
0008bb 9730      	SBIW R30,0
0008bc f419      	BRNE _0x20000CA
0008bd efef      	LDI  R30,LOW(65535)
0008be efff      	LDI  R31,HIGH(65535)
0008bf c004      	RJMP _0x20C0005
                 _0x20000CA:
0008c0 c001      	RJMP _0x2000081
                 _0x20000C8:
                 _0x20000C7:
                 _0x2000089:
0008c1 ced0      	RJMP _0x200007F
                 _0x2000081:
                 _0x20000C1:
                 _0x20C0006:
0008c2 85e8      	LDD  R30,Y+8
0008c3 85f9      	LDD  R31,Y+8+1
                 _0x20C0005:
0008c4 940e 0c90 	CALL __LOADLOCR6
0008c6 9662      	ADIW R28,18
0008c7 90ff      	POP  R15
0008c8 9508      	RET
                 ; .FEND
                 _sscanf:
                 ; .FSTART _sscanf
0008c9 92ff      	PUSH R15
0008ca 2ef8      	MOV  R15,R24
0008cb 9723      	SBIW R28,3
0008cc 931a      	ST   -Y,R17
0008cd 930a      	ST   -Y,R16
0008ce 01de      	MOVW R26,R28
0008cf 9617      	ADIW R26,7
0008d0 940e 0aa5 	CALL SUBOPT_0x18
0008d2 9730      	SBIW R30,0
0008d3 f419      	BRNE _0x20000CB
0008d4 efef      	LDI  R30,LOW(65535)
0008d5 efff      	LDI  R31,HIGH(65535)
0008d6 c01a      	RJMP _0x20C0004
                 _0x20000CB:
0008d7 01de      	MOVW R26,R28
0008d8 9611      	ADIW R26,1
0008d9 940e 0bfc 	CALL __ADDW2R15
0008db 018d      	MOVW R16,R26
0008dc 01de      	MOVW R26,R28
0008dd 9617      	ADIW R26,7
0008de 940e 0aa5 	CALL SUBOPT_0x18
0008e0 83eb      	STD  Y+3,R30
0008e1 83fc      	STD  Y+3+1,R31
0008e2 01de      	MOVW R26,R28
0008e3 9615      	ADIW R26,5
0008e4 940e 0aa5 	CALL SUBOPT_0x18
0008e6 93fa      	ST   -Y,R31
0008e7 93ea      	ST   -Y,R30
0008e8 931a      	ST   -Y,R17
0008e9 930a      	ST   -Y,R16
0008ea e5ed      	LDI  R30,LOW(_get_buff_G100)
0008eb e0f7      	LDI  R31,HIGH(_get_buff_G100)
0008ec 93fa      	ST   -Y,R31
0008ed 93ea      	ST   -Y,R30
0008ee 01de      	MOVW R26,R28
0008ef 9618      	ADIW R26,8
0008f0 de96      	RCALL __scanf_G100
                 _0x20C0004:
0008f1 8119      	LDD  R17,Y+1
0008f2 8108      	LDD  R16,Y+0
0008f3 9625      	ADIW R28,5
0008f4 90ff      	POP  R15
0008f5 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _strcmp:
                 ; .FSTART _strcmp
0008f6 93ba      	ST   -Y,R27
0008f7 93aa      	ST   -Y,R26
0008f8 91e9          ld   r30,y+
0008f9 91f9          ld   r31,y+
0008fa 91a9          ld   r26,y+
0008fb 91b9          ld   r27,y+
                 strcmp0:
0008fc 916d          ld   r22,x+
0008fd 9171          ld   r23,z+
0008fe 1767          cp   r22,r23
0008ff f421          brne strcmp1
000900 2366          tst  r22
000901 f7d1          brne strcmp0
                 strcmp3:
000902 27ee          clr  r30
000903 9508          ret
                 strcmp1:
000904 1b67          sub  r22,r23
000905 f3e1          breq strcmp3
000906 e0e1          ldi  r30,1
000907 f408          brcc strcmp2
000908 50e2          subi r30,2
                 strcmp2:
000909 9508          ret
                 ; .FEND
                 _strcpy:
                 ; .FSTART _strcpy
00090a 93ba      	ST   -Y,R27
00090b 93aa      	ST   -Y,R26
00090c 91e9          ld   r30,y+
00090d 91f9          ld   r31,y+
00090e 91a9          ld   r26,y+
00090f 91b9          ld   r27,y+
000910 01cd          movw r24,r26
                 strcpy0:
000911 9161          ld   r22,z+
000912 936d          st   x+,r22
000913 2366          tst  r22
000914 f7e1          brne strcpy0
000915 01fc          movw r30,r24
000916 9508          ret
                 ; .FEND
                 _strcspn:
                 ; .FSTART _strcspn
000917 93ba      	ST   -Y,R27
000918 93aa      	ST   -Y,R26
000919 81bb          ldd  r27,y+3
00091a 81aa          ldd  r26,y+2
00091b 2788          clr  r24
00091c 2799          clr  r25
                 strcspn0:
00091d 916d          ld   r22,x+
00091e 2366          tst  r22
00091f f051          breq strcspn2
000920 81f9          ldd  r31,y+1
000921 81e8          ld   r30,y
                 strcspn1:
000922 9171          ld   r23,z+
000923 2377          tst  r23
000924 f019          breq strcspn3
000925 1767          cp   r22,r23
000926 f019          breq strcspn2
000927 cffa          rjmp strcspn1
                 strcspn3:
000928 9601          adiw r24,1
000929 cff3          rjmp strcspn0
                 strcspn2:
00092a 01fc          movw r30,r24
                 _0x20C0003:
00092b 9624      	ADIW R28,4
00092c 9508      	RET
                 ; .FEND
                 _strlen:
                 ; .FSTART _strlen
00092d 93ba      	ST   -Y,R27
00092e 93aa      	ST   -Y,R26
00092f 91a9          ld   r26,y+
000930 91b9          ld   r27,y+
000931 27ee          clr  r30
000932 27ff          clr  r31
                 strlen0:
000933 916d          ld   r22,x+
000934 2366          tst  r22
000935 f011          breq strlen1
000936 9631          adiw r30,1
000937 cffb          rjmp strlen0
                 strlen1:
000938 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000939 93ba      	ST   -Y,R27
00093a 93aa      	ST   -Y,R26
00093b 27aa          clr  r26
00093c 27bb          clr  r27
00093d 91e9          ld   r30,y+
00093e 91f9          ld   r31,y+
                 strlenf0:
00093f 9005      	lpm  r0,z+
000940 2000          tst  r0
000941 f011          breq strlenf1
000942 9611          adiw r26,1
000943 cffb          rjmp strlenf0
                 strlenf1:
000944 01fd          movw r30,r26
000945 9508          ret
                 ; .FEND
                 _strncat:
                 ; .FSTART _strncat
000946 93aa      	ST   -Y,R26
000947 9179          ld   r23,y+
000948 91e9          ld   r30,y+
000949 91f9          ld   r31,y+
00094a 91a9          ld   r26,y+
00094b 91b9          ld   r27,y+
00094c 01cd          movw r24,r26
                 strncat0:
00094d 916d          ld   r22,x+
00094e 2366          tst  r22
00094f f7e9          brne strncat0
000950 9711          sbiw r26,1
                 strncat1:
000951 937c          st   x,r23
000952 2377          tst  r23
000953 f029          breq strncat2
000954 957a          dec  r23
000955 9161          ld   r22,z+
000956 936d          st   x+,r22
000957 2366          tst  r22
000958 f7c1          brne strncat1
                 strncat2:
000959 01fc          movw r30,r24
00095a 9508          ret
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G103:
                 ; .FSTART __lcd_write_nibble_G103
00095b 93aa      	ST   -Y,R26
00095c b3e8      	IN   R30,0x18
00095d 70ef      	ANDI R30,LOW(0xF)
00095e 2fae      	MOV  R26,R30
00095f 81e8      	LD   R30,Y
000960 7fe0      	ANDI R30,LOW(0xF0)
000961 2bea      	OR   R30,R26
000962 bbe8      	OUT  0x18,R30
                +
000963 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000964 958a     +DEC R24
000965 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000966 9ac2      	SBI  0x18,2
                +
000967 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000968 958a     +DEC R24
000969 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00096a 98c2      	CBI  0x18,2
                +
00096b e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00096c 958a     +DEC R24
00096d f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00096e c049      	RJMP _0x20C0002
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
00096f 93aa      	ST   -Y,R26
000970 81a8      	LD   R26,Y
000971 dfe9      	RCALL __lcd_write_nibble_G103
000972 81e8          ld    r30,y
000973 95e2          swap  r30
000974 83e8          st    y,r30
000975 81a8      	LD   R26,Y
000976 dfe4      	RCALL __lcd_write_nibble_G103
                +
000977 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000978 958a     +DEC R24
000979 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
00097a c03d      	RJMP _0x20C0002
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
00097b 93aa      	ST   -Y,R26
00097c 81e8      	LD   R30,Y
00097d e0f0      	LDI  R31,0
00097e 5be6      	SUBI R30,LOW(-__base_y_G103)
00097f 4ff6      	SBCI R31,HIGH(-__base_y_G103)
000980 81e0      	LD   R30,Z
000981 81a9      	LDD  R26,Y+1
000982 0fae      	ADD  R26,R30
000983 dfeb      	RCALL __lcd_write_data
000984 81e9      	LDD  R30,Y+1
000985 93e0 094e 	STS  __lcd_x,R30
000987 81e8      	LD   R30,Y
000988 93e0 094f 	STS  __lcd_y,R30
00098a 9622      	ADIW R28,2
00098b 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
00098c e0a2      	LDI  R26,LOW(2)
00098d 940e 0ac5 	CALL SUBOPT_0x1D
00098f e0ac      	LDI  R26,LOW(12)
000990 dfde      	RCALL __lcd_write_data
000991 e0a1      	LDI  R26,LOW(1)
000992 940e 0ac5 	CALL SUBOPT_0x1D
000994 e0e0      	LDI  R30,LOW(0)
000995 93e0 094f 	STS  __lcd_y,R30
000997 93e0 094e 	STS  __lcd_x,R30
000999 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
00099a 93aa      	ST   -Y,R26
00099b 81a8      	LD   R26,Y
00099c 30aa      	CPI  R26,LOW(0xA)
00099d f031      	BREQ _0x2060005
00099e 91e0 0950 	LDS  R30,__lcd_maxx
0009a0 91a0 094e 	LDS  R26,__lcd_x
0009a2 17ae      	CP   R26,R30
0009a3 f058      	BRLO _0x2060004
                 _0x2060005:
0009a4 e0e0      	LDI  R30,LOW(0)
0009a5 93ea      	ST   -Y,R30
0009a6 91a0 094f 	LDS  R26,__lcd_y
0009a8 5faf      	SUBI R26,-LOW(1)
0009a9 93a0 094f 	STS  __lcd_y,R26
0009ab dfcf      	RCALL _lcd_gotoxy
0009ac 81a8      	LD   R26,Y
0009ad 30aa      	CPI  R26,LOW(0xA)
0009ae f049      	BREQ _0x20C0002
                 _0x2060004:
0009af 91e0 094e 	LDS  R30,__lcd_x
0009b1 5fef      	SUBI R30,-LOW(1)
0009b2 93e0 094e 	STS  __lcd_x,R30
0009b4 9ac0      	SBI  0x18,0
0009b5 81a8      	LD   R26,Y
0009b6 dfb8      	RCALL __lcd_write_data
0009b7 98c0      	CBI  0x18,0
                 _0x20C0002:
0009b8 9621      	ADIW R28,1
0009b9 9508      	RET
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
0009ba 93ba      	ST   -Y,R27
0009bb 93aa      	ST   -Y,R26
0009bc 931a      	ST   -Y,R17
                 _0x2060008:
0009bd 81a9      	LDD  R26,Y+1
0009be 81ba      	LDD  R27,Y+1+1
0009bf 91ed      	LD   R30,X+
0009c0 83a9      	STD  Y+1,R26
0009c1 83ba      	STD  Y+1+1,R27
0009c2 2f1e      	MOV  R17,R30
0009c3 30e0      	CPI  R30,0
0009c4 f019      	BREQ _0x206000A
0009c5 2fa1      	MOV  R26,R17
0009c6 dfd3      	RCALL _lcd_putchar
0009c7 cff5      	RJMP _0x2060008
                 _0x206000A:
0009c8 c010      	RJMP _0x20C0001
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
0009c9 93ba      	ST   -Y,R27
0009ca 93aa      	ST   -Y,R26
0009cb 931a      	ST   -Y,R17
                 _0x206000B:
0009cc 81e9      	LDD  R30,Y+1
0009cd 81fa      	LDD  R31,Y+1+1
0009ce 9631      	ADIW R30,1
0009cf 83e9      	STD  Y+1,R30
0009d0 83fa      	STD  Y+1+1,R31
0009d1 9731      	SBIW R30,1
0009d2 91e4      	LPM  R30,Z
0009d3 2f1e      	MOV  R17,R30
0009d4 30e0      	CPI  R30,0
0009d5 f019      	BREQ _0x206000D
0009d6 2fa1      	MOV  R26,R17
0009d7 dfc2      	RCALL _lcd_putchar
0009d8 cff3      	RJMP _0x206000B
                 _0x206000D:
                 _0x20C0001:
0009d9 8118      	LDD  R17,Y+0
0009da 9623      	ADIW R28,3
0009db 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _isdigit:
                 ; .FSTART _isdigit
0009dc 93aa      	ST   -Y,R26
0009dd e0e1          ldi  r30,1
0009de 91f9          ld   r31,y+
0009df 33f0          cpi  r31,'0'
0009e0 f010          brlo isdigit0
0009e1 33fa          cpi  r31,'9'+1
0009e2 f008          brlo isdigit1
                 isdigit0:
0009e3 27ee          clr  r30
                 isdigit1:
0009e4 9508          ret
                 ; .FEND
                 _isspace:
                 ; .FSTART _isspace
0009e5 93aa      	ST   -Y,R26
0009e6 e0e1          ldi  r30,1
0009e7 91f9          ld   r31,y+
0009e8 32f0          cpi  r31,' '
0009e9 f029          breq isspace1
0009ea 30f9          cpi  r31,9
0009eb f010          brlo isspace0
0009ec 30fe          cpi  r31,13+1
0009ed f008          brlo isspace1
                 isspace0:
0009ee 27ee          clr  r30
                 isspace1:
0009ef 9508          ret
                 ; .FEND
                 _isxdigit:
                 ; .FSTART _isxdigit
0009f0 93aa      	ST   -Y,R26
0009f1 e0e1          ldi  r30,1
0009f2 91f9          ld   r31,y+
0009f3 53f0          subi r31,0x30
0009f4 f040          brcs isxdigit0
0009f5 30fa          cpi  r31,10
0009f6 f038          brcs isxdigit1
0009f7 75ff          andi r31,0x5f
0009f8 50f7          subi r31,7
0009f9 30fa          cpi  r31,10
0009fa f010          brcs isxdigit0
0009fb 31f0          cpi  r31,16
0009fc f008          brcs isxdigit1
                 isxdigit0:
0009fd 27ee          clr  r30
                 isxdigit1:
0009fe 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 _predefinedUsers:
00065f           	.BYTE 0xA0
                 _registeredUsers:
0006ff           	.BYTE 0x190
                 _inputBuffer:
00088f           	.BYTE 0x14
                 _tempPassword:
0008a3           	.BYTE 0x14
                 _loggedUser:
0008b7           	.BYTE 0x14
                 _currentTime:
0008cb           	.BYTE 0x6
                 _shutdownTime:
0008d1           	.BYTE 0x6
                 _menuOptions:
0008d7           	.BYTE 0x6
                 _numMenuOptions:
0008dd           	.BYTE 0x2
                 _isMenuOpen:
0008df           	.BYTE 0x2
                 _menuSelection:
0008e1           	.BYTE 0x2
                 _voltage:
0008e3           	.BYTE 0x4
                 _voltageStr:
0008e7           	.BYTE 0x14
                 _timeBuffer:
0008fb           	.BYTE 0xA
                 _c:
000905           	.BYTE 0x1
                 _lcdBuffer:
000906           	.BYTE 0x14
                 _durationBuffer:
00091a           	.BYTE 0xA
                 _i:
000924           	.BYTE 0x2
                 _key:
000926           	.BYTE 0x1
                 _menuOptionSelected:
000927           	.BYTE 0x2
                 _keypad:
000929           	.BYTE 0x10
                 _digitIndex_S0000008000:
000939           	.BYTE 0x1
                 _digitCodes_S0000008000:
00093a           	.BYTE 0x8
                 _lastVoltage_S0000008000:
000942           	.BYTE 0x4
                 __seed_G101:
000946           	.BYTE 0x4
                 __base_y_G103:
00094a           	.BYTE 0x4
                 __lcd_x:
00094e           	.BYTE 0x1
                 __lcd_y:
00094f           	.BYTE 0x1
                 __lcd_maxx:
000950           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x0:
0009ff b210      	IN   R1,16
000a00 2fe2      	MOV  R30,R18
000a01 e0a1      	LDI  R26,LOW(1)
000a02 e0b0      	LDI  R27,HIGH(1)
000a03 940e 0c14 	CALL __LSLW12
000a05 2da1      	MOV  R26,R1
000a06 e0b0      	LDI  R27,0
000a07 23ea      	AND  R30,R26
000a08 23fb      	AND  R31,R27
000a09 9730      	SBIW R30,0
000a0a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x1:
                +
000a0b e2a8     +LDI R26 , 40
000a0c 9fa0     +MUL R26 , R16
000a0d 01f0     +MOVW R30 , R0
000a0e 9fa1     +MUL R26 , R17
000a0f 0df0     +ADD R31 , R0
                 	__MULBNWRU 16,17,40
000a10 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x2:
000a11 5ae1      	SUBI R30,LOW(-_predefinedUsers)
000a12 4ff9      	SBCI R31,HIGH(-_predefinedUsers)
000a13 93fa      	ST   -Y,R31
000a14 93ea      	ST   -Y,R30
000a15 e8af      	LDI  R26,LOW(_inputBuffer)
000a16 e0b8      	LDI  R27,HIGH(_inputBuffer)
000a17 940e 08f6 	CALL _strcmp
000a19 30e0      	CPI  R30,0
000a1a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x3:
000a1b 50e1      	SUBI R30,LOW(-_registeredUsers)
000a1c 4ff9      	SBCI R31,HIGH(-_registeredUsers)
000a1d 93fa      	ST   -Y,R31
000a1e 93ea      	ST   -Y,R30
000a1f e8af      	LDI  R26,LOW(_inputBuffer)
000a20 e0b8      	LDI  R27,HIGH(_inputBuffer)
000a21 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x4:
000a22 93fa      	ST   -Y,R31
000a23 93ea      	ST   -Y,R30
000a24 eaa3      	LDI  R26,LOW(_tempPassword)
000a25 e0b8      	LDI  R27,HIGH(_tempPassword)
000a26 940e 08f6 	CALL _strcmp
000a28 30e0      	CPI  R30,0
000a29 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
000a2a ebe7      	LDI  R30,LOW(_loggedUser)
000a2b e0f8      	LDI  R31,HIGH(_loggedUser)
000a2c 93fa      	ST   -Y,R31
000a2d 93ea      	ST   -Y,R30
000a2e cfdc      	RJMP SUBOPT_0x1
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
000a2f eae3      	LDI  R30,LOW(_tempPassword)
000a30 e0f8      	LDI  R31,HIGH(_tempPassword)
000a31 93fa      	ST   -Y,R31
000a32 93ea      	ST   -Y,R30
000a33 e8af      	LDI  R26,LOW(_inputBuffer)
000a34 e0b8      	LDI  R27,HIGH(_inputBuffer)
000a35 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x7:
000a36 940e 0c42 	CALL __DIVW21
000a38 2fae      	MOV  R26,R30
000a39 940c 032d 	JMP  _get7SegmentCode
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x8:
000a3b e0e0      	LDI  R30,LOW(0)
000a3c 93ea      	ST   -Y,R30
000a3d e0a1      	LDI  R26,LOW(1)
000a3e 940c 097b 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9:
000a40 b1ec      	IN   R30,0xC
000a41 93e0 0905 	STS  _c,R30
000a43 91a0 0905 	LDS  R26,_c
000a45 30aa      	CPI  R26,LOW(0xA)
000a46 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA:
000a47 efeb      	LDI  R30,LOW(_timeBuffer)
000a48 e0f8      	LDI  R31,HIGH(_timeBuffer)
000a49 93fa      	ST   -Y,R31
000a4a 93ea      	ST   -Y,R30
000a4b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xB:
000a4c e0e5      	LDI  R30,LOW(_c)
000a4d e0f9      	LDI  R31,HIGH(_c)
000a4e 93fa      	ST   -Y,R31
000a4f 93ea      	ST   -Y,R30
000a50 e0a1      	LDI  R26,LOW(1)
000a51 940c 0946 	JMP  _strncat
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xC:
000a53 2766      	CLR  R22
000a54 2777      	CLR  R23
000a55 940e 0c7a 	CALL __PUTPARD1
000a57 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xD:
000a58 940e 0c22 	CALL __CWD1
000a5a 940e 0c7a 	CALL __PUTPARD1
000a5c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xE:
000a5d b212      	IN   R1,18
000a5e e0e0      	LDI  R30,0
000a5f 9993      	SBIC 0x12,3
000a60 e0e1      	LDI  R30,1
000a61 e0a1      	LDI  R26,LOW(1)
000a62 940e 0c0c 	CALL __LSLB12
000a64 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0xF:
000a65 91ed      	LD   R30,X+
000a66 91fd      	LD   R31,X+
000a67 9631      	ADIW R30,1
000a68 93fe      	ST   -X,R31
000a69 93ee      	ST   -X,R30
000a6a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x10:
000a6b e0a1      	LDI  R26,LOW(1)
000a6c 940e 0c0c 	CALL __LSLB12
000a6e 95e0      	COM  R30
000a6f 21e1      	AND  R30,R1
000a70 bbe2      	OUT  0x12,R30
000a71 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x11:
000a72 e0e1      	LDI  R30,LOW(1)
000a73 e0f0      	LDI  R31,HIGH(1)
000a74 93e0 08df 	STS  _isMenuOpen,R30
000a76 93f0 08e0 	STS  _isMenuOpen+1,R31
000a78 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x12:
000a79 932a      	ST   -Y,R18
000a7a 85ad      	LDD  R26,Y+13
000a7b 85be      	LDD  R27,Y+13+1
000a7c 85ef      	LDD  R30,Y+15
000a7d 89f8      	LDD  R31,Y+15+1
000a7e 9509      	ICALL
000a7f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x13:
000a80 89e8      	LDD  R30,Y+16
000a81 89f9      	LDD  R31,Y+16+1
000a82 9734      	SBIW R30,4
000a83 8be8      	STD  Y+16,R30
000a84 8bf9      	STD  Y+16+1,R31
000a85 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x14:
000a86 85ad      	LDD  R26,Y+13
000a87 85be      	LDD  R27,Y+13+1
000a88 85ef      	LDD  R30,Y+15
000a89 89f8      	LDD  R31,Y+15+1
000a8a 9509      	ICALL
000a8b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x15:
000a8c 89a8      	LDD  R26,Y+16
000a8d 89b9      	LDD  R27,Y+16+1
000a8e 9614      	ADIW R26,4
000a8f 940e 0c6d 	CALL __GETW1P
000a91 83ee      	STD  Y+6,R30
000a92 83ff      	STD  Y+6+1,R31
000a93 81ae      	LDD  R26,Y+6
000a94 81bf      	LDD  R27,Y+6+1
000a95 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x16:
000a96 89a8      	LDD  R26,Y+16
000a97 89b9      	LDD  R27,Y+16+1
000a98 9614      	ADIW R26,4
000a99 940e 0c6d 	CALL __GETW1P
000a9b 87ea      	STD  Y+10,R30
000a9c 87fb      	STD  Y+10+1,R31
000a9d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x17:
000a9e 01de      	MOVW R26,R28
000a9f 961c      	ADIW R26,12
000aa0 940e 0bfc 	CALL __ADDW2R15
000aa2 940e 0c6d 	CALL __GETW1P
000aa4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x18:
000aa5 940e 0bfc 	CALL __ADDW2R15
000aa7 940e 0c6d 	CALL __GETW1P
000aa9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x19:
000aaa 2fa3      	MOV  R26,R19
000aab 940e 09e5 	CALL _isspace
000aad 30e0      	CPI  R30,0
000aae 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x1A:
000aaf 85ac      	LDD  R26,Y+12
000ab0 85bd      	LDD  R27,Y+12+1
000ab1 85ee      	LDD  R30,Y+14
000ab2 85ff      	LDD  R31,Y+14+1
000ab3 9509      	ICALL
000ab4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x1B:
000ab5 85aa      	LDD  R26,Y+10
000ab6 85bb      	LDD  R27,Y+10+1
000ab7 91ac      	LD   R26,X
000ab8 30a0      	CPI  R26,0
000ab9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x1C:
000aba 85ee      	LDD  R30,Y+14
000abb 85ff      	LDD  R31,Y+14+1
000abc 9734      	SBIW R30,4
000abd 87ee      	STD  Y+14,R30
000abe 87ff      	STD  Y+14+1,R31
000abf 85ae      	LDD  R26,Y+14
000ac0 85bf      	LDD  R27,Y+14+1
000ac1 9614      	ADIW R26,4
000ac2 910d      	LD   R16,X+
000ac3 911c      	LD   R17,X
000ac4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1D:
000ac5 940e 096f 	CALL __lcd_write_data
000ac7 e0a3      	LDI  R26,LOW(3)
000ac8 e0b0      	LDI  R27,0
000ac9 940c 0acb 	JMP  _delay_ms
                 
                 
                 	.CSEG
                 _delay_ms:
000acb 9610      	adiw r26,0
000acc f039      	breq __delay_ms1
                 __delay_ms0:
000acd 95a8      	wdr
                +
000ace ed80     +LDI R24 , LOW ( 0x7D0 )
000acf e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000ad0 9701     +SBIW R24 , 1
000ad1 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000ad2 9711      	sbiw r26,1
000ad3 f7c9      	brne __delay_ms0
                 __delay_ms1:
000ad4 9508      	ret
                 
                 __ROUND_REPACK:
000ad5 2355      	TST  R21
000ad6 f442      	BRPL __REPACK
000ad7 3850      	CPI  R21,0x80
000ad8 f411      	BRNE __ROUND_REPACK0
000ad9 ffe0      	SBRS R30,0
000ada c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000adb 9631      	ADIW R30,1
000adc 1f69      	ADC  R22,R25
000add 1f79      	ADC  R23,R25
000ade f06b      	BRVS __REPACK1
                 
                 __REPACK:
000adf e850      	LDI  R21,0x80
000ae0 2757      	EOR  R21,R23
000ae1 f411      	BRNE __REPACK0
000ae2 935f      	PUSH R21
000ae3 c073      	RJMP __ZERORES
                 __REPACK0:
000ae4 3f5f      	CPI  R21,0xFF
000ae5 f031      	BREQ __REPACK1
000ae6 0f66      	LSL  R22
000ae7 0c00      	LSL  R0
000ae8 9557      	ROR  R21
000ae9 9567      	ROR  R22
000aea 2f75      	MOV  R23,R21
000aeb 9508      	RET
                 __REPACK1:
000aec 935f      	PUSH R21
000aed 2000      	TST  R0
000aee f00a      	BRMI __REPACK2
000aef c073      	RJMP __MAXRES
                 __REPACK2:
000af0 c06c      	RJMP __MINRES
                 
                 __UNPACK:
000af1 e850      	LDI  R21,0x80
000af2 2e19      	MOV  R1,R25
000af3 2215      	AND  R1,R21
000af4 0f88      	LSL  R24
000af5 1f99      	ROL  R25
000af6 2795      	EOR  R25,R21
000af7 0f55      	LSL  R21
000af8 9587      	ROR  R24
                 
                 __UNPACK1:
000af9 e850      	LDI  R21,0x80
000afa 2e07      	MOV  R0,R23
000afb 2205      	AND  R0,R21
000afc 0f66      	LSL  R22
000afd 1f77      	ROL  R23
000afe 2775      	EOR  R23,R21
000aff 0f55      	LSL  R21
000b00 9567      	ROR  R22
000b01 9508      	RET
                 
                 __CFD1U:
000b02 9468      	SET
000b03 c001      	RJMP __CFD1U0
                 __CFD1:
000b04 94e8      	CLT
                 __CFD1U0:
000b05 935f      	PUSH R21
000b06 dff2      	RCALL __UNPACK1
000b07 3870      	CPI  R23,0x80
000b08 f018      	BRLO __CFD10
000b09 3f7f      	CPI  R23,0xFF
000b0a f408      	BRCC __CFD10
000b0b c04b      	RJMP __ZERORES
                 __CFD10:
000b0c e156      	LDI  R21,22
000b0d 1b57      	SUB  R21,R23
000b0e f4aa      	BRPL __CFD11
000b0f 9551      	NEG  R21
000b10 3058      	CPI  R21,8
000b11 f40e      	BRTC __CFD19
000b12 3059      	CPI  R21,9
                 __CFD19:
000b13 f030      	BRLO __CFD17
000b14 efef      	SER  R30
000b15 efff      	SER  R31
000b16 ef6f      	SER  R22
000b17 e77f      	LDI  R23,0x7F
000b18 f977      	BLD  R23,7
000b19 c01a      	RJMP __CFD15
                 __CFD17:
000b1a 2777      	CLR  R23
000b1b 2355      	TST  R21
000b1c f0b9      	BREQ __CFD15
                 __CFD18:
000b1d 0fee      	LSL  R30
000b1e 1fff      	ROL  R31
000b1f 1f66      	ROL  R22
000b20 1f77      	ROL  R23
000b21 955a      	DEC  R21
000b22 f7d1      	BRNE __CFD18
000b23 c010      	RJMP __CFD15
                 __CFD11:
000b24 2777      	CLR  R23
                 __CFD12:
000b25 3058      	CPI  R21,8
000b26 f028      	BRLO __CFD13
000b27 2fef      	MOV  R30,R31
000b28 2ff6      	MOV  R31,R22
000b29 2f67      	MOV  R22,R23
000b2a 5058      	SUBI R21,8
000b2b cff9      	RJMP __CFD12
                 __CFD13:
000b2c 2355      	TST  R21
000b2d f031      	BREQ __CFD15
                 __CFD14:
000b2e 9576      	LSR  R23
000b2f 9567      	ROR  R22
000b30 95f7      	ROR  R31
000b31 95e7      	ROR  R30
000b32 955a      	DEC  R21
000b33 f7d1      	BRNE __CFD14
                 __CFD15:
000b34 2000      	TST  R0
000b35 f40a      	BRPL __CFD16
000b36 d0cd      	RCALL __ANEGD1
                 __CFD16:
000b37 915f      	POP  R21
000b38 9508      	RET
                 
                 __CDF1U:
000b39 9468      	SET
000b3a c001      	RJMP __CDF1U0
                 __CDF1:
000b3b 94e8      	CLT
                 __CDF1U0:
000b3c 9730      	SBIW R30,0
000b3d 4060      	SBCI R22,0
000b3e 4070      	SBCI R23,0
000b3f f0b1      	BREQ __CDF10
000b40 2400      	CLR  R0
000b41 f026      	BRTS __CDF11
000b42 2377      	TST  R23
000b43 f412      	BRPL __CDF11
000b44 9400      	COM  R0
000b45 d0be      	RCALL __ANEGD1
                 __CDF11:
000b46 2e17      	MOV  R1,R23
000b47 e17e      	LDI  R23,30
000b48 2011      	TST  R1
                 __CDF12:
000b49 f032      	BRMI __CDF13
000b4a 957a      	DEC  R23
000b4b 0fee      	LSL  R30
000b4c 1fff      	ROL  R31
000b4d 1f66      	ROL  R22
000b4e 1c11      	ROL  R1
000b4f cff9      	RJMP __CDF12
                 __CDF13:
000b50 2fef      	MOV  R30,R31
000b51 2ff6      	MOV  R31,R22
000b52 2d61      	MOV  R22,R1
000b53 935f      	PUSH R21
000b54 df8a      	RCALL __REPACK
000b55 915f      	POP  R21
                 __CDF10:
000b56 9508      	RET
                 
                 __ZERORES:
000b57 27ee      	CLR  R30
000b58 27ff      	CLR  R31
000b59 2766      	CLR  R22
000b5a 2777      	CLR  R23
000b5b 915f      	POP  R21
000b5c 9508      	RET
                 
                 __MINRES:
000b5d efef      	SER  R30
000b5e efff      	SER  R31
000b5f e76f      	LDI  R22,0x7F
000b60 ef7f      	SER  R23
000b61 915f      	POP  R21
000b62 9508      	RET
                 
                 __MAXRES:
000b63 efef      	SER  R30
000b64 efff      	SER  R31
000b65 e76f      	LDI  R22,0x7F
000b66 e77f      	LDI  R23,0x7F
000b67 915f      	POP  R21
000b68 9508      	RET
                 
                 __MULF12:
000b69 935f      	PUSH R21
000b6a df86      	RCALL __UNPACK
000b6b 3870      	CPI  R23,0x80
000b6c f351      	BREQ __ZERORES
000b6d 3890      	CPI  R25,0x80
000b6e f341      	BREQ __ZERORES
000b6f 2401      	EOR  R0,R1
000b70 9408      	SEC
000b71 1f79      	ADC  R23,R25
000b72 f423      	BRVC __MULF124
000b73 f31c      	BRLT __ZERORES
                 __MULF125:
000b74 2000      	TST  R0
000b75 f33a      	BRMI __MINRES
000b76 cfec      	RJMP __MAXRES
                 __MULF124:
000b77 920f      	PUSH R0
000b78 931f      	PUSH R17
000b79 932f      	PUSH R18
000b7a 933f      	PUSH R19
000b7b 934f      	PUSH R20
000b7c 2711      	CLR  R17
000b7d 2722      	CLR  R18
000b7e 2799      	CLR  R25
000b7f 9f68      	MUL  R22,R24
000b80 01a0      	MOVW R20,R0
000b81 9f8f      	MUL  R24,R31
000b82 2d30      	MOV  R19,R0
000b83 0d41      	ADD  R20,R1
000b84 1f59      	ADC  R21,R25
000b85 9f6b      	MUL  R22,R27
000b86 0d30      	ADD  R19,R0
000b87 1d41      	ADC  R20,R1
000b88 1f59      	ADC  R21,R25
000b89 9f8e      	MUL  R24,R30
000b8a d027      	RCALL __MULF126
000b8b 9fbf      	MUL  R27,R31
000b8c d025      	RCALL __MULF126
000b8d 9f6a      	MUL  R22,R26
000b8e d023      	RCALL __MULF126
000b8f 9fbe      	MUL  R27,R30
000b90 d01d      	RCALL __MULF127
000b91 9faf      	MUL  R26,R31
000b92 d01b      	RCALL __MULF127
000b93 9fae      	MUL  R26,R30
000b94 0d11      	ADD  R17,R1
000b95 1f29      	ADC  R18,R25
000b96 1f39      	ADC  R19,R25
000b97 1f49      	ADC  R20,R25
000b98 1f59      	ADC  R21,R25
000b99 2fe3      	MOV  R30,R19
000b9a 2ff4      	MOV  R31,R20
000b9b 2f65      	MOV  R22,R21
000b9c 2f52      	MOV  R21,R18
000b9d 914f      	POP  R20
000b9e 913f      	POP  R19
000b9f 912f      	POP  R18
000ba0 911f      	POP  R17
000ba1 900f      	POP  R0
000ba2 2366      	TST  R22
000ba3 f02a      	BRMI __MULF122
000ba4 0f55      	LSL  R21
000ba5 1fee      	ROL  R30
000ba6 1fff      	ROL  R31
000ba7 1f66      	ROL  R22
000ba8 c002      	RJMP __MULF123
                 __MULF122:
000ba9 9573      	INC  R23
000baa f24b      	BRVS __MULF125
                 __MULF123:
000bab df29      	RCALL __ROUND_REPACK
000bac 915f      	POP  R21
000bad 9508      	RET
                 
                 __MULF127:
000bae 0d10      	ADD  R17,R0
000baf 1d21      	ADC  R18,R1
000bb0 1f39      	ADC  R19,R25
000bb1 c002      	RJMP __MULF128
                 __MULF126:
000bb2 0d20      	ADD  R18,R0
000bb3 1d31      	ADC  R19,R1
                 __MULF128:
000bb4 1f49      	ADC  R20,R25
000bb5 1f59      	ADC  R21,R25
000bb6 9508      	RET
                 
                 __DIVF21:
000bb7 935f      	PUSH R21
000bb8 df38      	RCALL __UNPACK
000bb9 3870      	CPI  R23,0x80
000bba f421      	BRNE __DIVF210
000bbb 2011      	TST  R1
                 __DIVF211:
000bbc f40a      	BRPL __DIVF219
000bbd cf9f      	RJMP __MINRES
                 __DIVF219:
000bbe cfa4      	RJMP __MAXRES
                 __DIVF210:
000bbf 3890      	CPI  R25,0x80
000bc0 f409      	BRNE __DIVF218
                 __DIVF217:
000bc1 cf95      	RJMP __ZERORES
                 __DIVF218:
000bc2 2401      	EOR  R0,R1
000bc3 9408      	SEC
000bc4 0b97      	SBC  R25,R23
000bc5 f41b      	BRVC __DIVF216
000bc6 f3d4      	BRLT __DIVF217
000bc7 2000      	TST  R0
000bc8 cff3      	RJMP __DIVF211
                 __DIVF216:
000bc9 2f79      	MOV  R23,R25
000bca 931f      	PUSH R17
000bcb 932f      	PUSH R18
000bcc 933f      	PUSH R19
000bcd 934f      	PUSH R20
000bce 2411      	CLR  R1
000bcf 2711      	CLR  R17
000bd0 2722      	CLR  R18
000bd1 2733      	CLR  R19
000bd2 2744      	CLR  R20
000bd3 2755      	CLR  R21
000bd4 e290      	LDI  R25,32
                 __DIVF212:
000bd5 17ae      	CP   R26,R30
000bd6 07bf      	CPC  R27,R31
000bd7 0786      	CPC  R24,R22
000bd8 0741      	CPC  R20,R17
000bd9 f030      	BRLO __DIVF213
000bda 1bae      	SUB  R26,R30
000bdb 0bbf      	SBC  R27,R31
000bdc 0b86      	SBC  R24,R22
000bdd 0b41      	SBC  R20,R17
000bde 9408      	SEC
000bdf c001      	RJMP __DIVF214
                 __DIVF213:
000be0 9488      	CLC
                 __DIVF214:
000be1 1f55      	ROL  R21
000be2 1f22      	ROL  R18
000be3 1f33      	ROL  R19
000be4 1c11      	ROL  R1
000be5 1faa      	ROL  R26
000be6 1fbb      	ROL  R27
000be7 1f88      	ROL  R24
000be8 1f44      	ROL  R20
000be9 959a      	DEC  R25
000bea f751      	BRNE __DIVF212
000beb 01f9      	MOVW R30,R18
000bec 2d61      	MOV  R22,R1
000bed 914f      	POP  R20
000bee 913f      	POP  R19
000bef 912f      	POP  R18
000bf0 911f      	POP  R17
000bf1 2366      	TST  R22
000bf2 f032      	BRMI __DIVF215
000bf3 0f55      	LSL  R21
000bf4 1fee      	ROL  R30
000bf5 1fff      	ROL  R31
000bf6 1f66      	ROL  R22
000bf7 957a      	DEC  R23
000bf8 f243      	BRVS __DIVF217
                 __DIVF215:
000bf9 dedb      	RCALL __ROUND_REPACK
000bfa 915f      	POP  R21
000bfb 9508      	RET
                 
                 __ADDW2R15:
000bfc 2400      	CLR  R0
000bfd 0daf      	ADD  R26,R15
000bfe 1db0      	ADC  R27,R0
000bff 9508      	RET
                 
                 __ANEGW1:
000c00 95f1      	NEG  R31
000c01 95e1      	NEG  R30
000c02 40f0      	SBCI R31,0
000c03 9508      	RET
                 
                 __ANEGD1:
000c04 95f0      	COM  R31
000c05 9560      	COM  R22
000c06 9570      	COM  R23
000c07 95e1      	NEG  R30
000c08 4fff      	SBCI R31,-1
000c09 4f6f      	SBCI R22,-1
000c0a 4f7f      	SBCI R23,-1
000c0b 9508      	RET
                 
                 __LSLB12:
000c0c 23ee      	TST  R30
000c0d 2e0e      	MOV  R0,R30
000c0e 2fea      	MOV  R30,R26
000c0f f019      	BREQ __LSLB12R
                 __LSLB12L:
000c10 0fee      	LSL  R30
000c11 940a      	DEC  R0
000c12 f7e9      	BRNE __LSLB12L
                 __LSLB12R:
000c13 9508      	RET
                 
                 __LSLW12:
000c14 23ee      	TST  R30
000c15 2e0e      	MOV  R0,R30
000c16 01fd      	MOVW R30,R26
000c17 f021      	BREQ __LSLW12R
                 __LSLW12L:
000c18 0fee      	LSL  R30
000c19 1fff      	ROL  R31
000c1a 940a      	DEC  R0
000c1b f7e1      	BRNE __LSLW12L
                 __LSLW12R:
000c1c 9508      	RET
                 
                 __LSLW2:
000c1d 0fee      	LSL  R30
000c1e 1fff      	ROL  R31
000c1f 0fee      	LSL  R30
000c20 1fff      	ROL  R31
000c21 9508      	RET
                 
                 __CWD1:
000c22 2f6f      	MOV  R22,R31
000c23 0f66      	ADD  R22,R22
000c24 0b66      	SBC  R22,R22
000c25 2f76      	MOV  R23,R22
000c26 9508      	RET
                 
                 __MULW12U:
000c27 9ffa      	MUL  R31,R26
000c28 2df0      	MOV  R31,R0
000c29 9feb      	MUL  R30,R27
000c2a 0df0      	ADD  R31,R0
000c2b 9fea      	MUL  R30,R26
000c2c 2de0      	MOV  R30,R0
000c2d 0df1      	ADD  R31,R1
000c2e 9508      	RET
                 
                 __DIVW21U:
000c2f 2400      	CLR  R0
000c30 2411      	CLR  R1
000c31 e190      	LDI  R25,16
                 __DIVW21U1:
000c32 0faa      	LSL  R26
000c33 1fbb      	ROL  R27
000c34 1c00      	ROL  R0
000c35 1c11      	ROL  R1
000c36 1a0e      	SUB  R0,R30
000c37 0a1f      	SBC  R1,R31
000c38 f418      	BRCC __DIVW21U2
000c39 0e0e      	ADD  R0,R30
000c3a 1e1f      	ADC  R1,R31
000c3b c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000c3c 60a1      	SBR  R26,1
                 __DIVW21U3:
000c3d 959a      	DEC  R25
000c3e f799      	BRNE __DIVW21U1
000c3f 01fd      	MOVW R30,R26
000c40 01d0      	MOVW R26,R0
000c41 9508      	RET
                 
                 __DIVW21:
000c42 d01c      	RCALL __CHKSIGNW
000c43 dfeb      	RCALL __DIVW21U
000c44 f40e      	BRTC __DIVW211
000c45 dfba      	RCALL __ANEGW1
                 __DIVW211:
000c46 9508      	RET
                 
                 __MODW21:
000c47 94e8      	CLT
000c48 ffb7      	SBRS R27,7
000c49 c004      	RJMP __MODW211
000c4a 95a0      	COM  R26
000c4b 95b0      	COM  R27
000c4c 9611      	ADIW R26,1
000c4d 9468      	SET
                 __MODW211:
000c4e fdf7      	SBRC R31,7
000c4f dfb0      	RCALL __ANEGW1
000c50 dfde      	RCALL __DIVW21U
000c51 01fd      	MOVW R30,R26
000c52 f40e      	BRTC __MODW212
000c53 dfac      	RCALL __ANEGW1
                 __MODW212:
000c54 9508      	RET
                 
                 __MANDW12:
000c55 94e8      	CLT
000c56 fff7      	SBRS R31,7
000c57 c002      	RJMP __MANDW121
000c58 dfa7      	RCALL __ANEGW1
000c59 9468      	SET
                 __MANDW121:
000c5a 23ea      	AND  R30,R26
000c5b 23fb      	AND  R31,R27
000c5c f40e      	BRTC __MANDW122
000c5d dfa2      	RCALL __ANEGW1
                 __MANDW122:
000c5e 9508      	RET
                 
                 __CHKSIGNW:
000c5f 94e8      	CLT
000c60 fff7      	SBRS R31,7
000c61 c002      	RJMP __CHKSW1
000c62 df9d      	RCALL __ANEGW1
000c63 9468      	SET
                 __CHKSW1:
000c64 ffb7      	SBRS R27,7
000c65 c006      	RJMP __CHKSW2
000c66 95a0      	COM  R26
000c67 95b0      	COM  R27
000c68 9611      	ADIW R26,1
000c69 f800      	BLD  R0,0
000c6a 9403      	INC  R0
000c6b fa00      	BST  R0,0
                 __CHKSW2:
000c6c 9508      	RET
                 
                 __GETW1P:
000c6d 91ed      	LD   R30,X+
000c6e 91fc      	LD   R31,X
000c6f 9711      	SBIW R26,1
000c70 9508      	RET
                 
                 __GETW1PF:
000c71 9005      	LPM  R0,Z+
000c72 91f4      	LPM  R31,Z
000c73 2de0      	MOV  R30,R0
000c74 9508      	RET
                 
                 __GETD2S0:
000c75 81a8      	LD   R26,Y
000c76 81b9      	LDD  R27,Y+1
000c77 818a      	LDD  R24,Y+2
000c78 819b      	LDD  R25,Y+3
000c79 9508      	RET
                 
                 __PUTPARD1:
000c7a 937a      	ST   -Y,R23
000c7b 936a      	ST   -Y,R22
000c7c 93fa      	ST   -Y,R31
000c7d 93ea      	ST   -Y,R30
000c7e 9508      	RET
                 
                 __PUTPARD2:
000c7f 939a      	ST   -Y,R25
000c80 938a      	ST   -Y,R24
000c81 93ba      	ST   -Y,R27
000c82 93aa      	ST   -Y,R26
000c83 9508      	RET
                 
                 __CPD12:
000c84 17ea      	CP   R30,R26
000c85 07fb      	CPC  R31,R27
000c86 0768      	CPC  R22,R24
000c87 0779      	CPC  R23,R25
000c88 9508      	RET
                 
                 __SAVELOCR6:
000c89 935a      	ST   -Y,R21
                 __SAVELOCR5:
000c8a 934a      	ST   -Y,R20
                 __SAVELOCR4:
000c8b 933a      	ST   -Y,R19
                 __SAVELOCR3:
000c8c 932a      	ST   -Y,R18
                 __SAVELOCR2:
000c8d 931a      	ST   -Y,R17
000c8e 930a      	ST   -Y,R16
000c8f 9508      	RET
                 
                 __LOADLOCR6:
000c90 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000c91 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000c92 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000c93 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000c94 8119      	LDD  R17,Y+1
000c95 8108      	LD   R16,Y
000c96 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
000c97 0fac      	ADD  R26,R28
000c98 1fbd      	ADC  R27,R29
                 __INITLOC0:
000c99 9005      	LPM  R0,Z+
000c9a 920d      	ST   X+,R0
000c9b 958a      	DEC  R24
000c9c f7e1      	BRNE __INITLOC0
000c9d 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega64 register use summary:
r0 :  53 r1 :  37 r2 :   0 r3 :   0 r4 :   1 r5 :   0 r6 :   2 r7 :   2 
r8 :   6 r9 :   2 r10:   5 r11:   2 r12:   6 r13:   3 r14:   0 r15:  21 
r16:  65 r17:  73 r18:  53 r19:  51 r20:  39 r21:  76 r22:  69 r23:  57 
r24:  50 r25:  36 r26: 287 r27: 145 r28:  36 r29:   2 r30: 548 r31: 270 
x  :  57 y  : 386 z  :  28 
Registers used: 31 out of 35 (88.6%)

ATmega64 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  25 add   :  22 
adiw  :  55 and   :  10 andi  :   7 asr   :   0 bclr  :   0 bld   :   9 
brbc  :   0 brbs  :   0 brcc  :   3 brcs  :   4 break :   0 breq  :  53 
brge  :  13 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  20 
brlt  :   2 brmi  :   6 brne  :  87 brpl  :   7 brsh  :   4 brtc  :   4 
brts  :   1 brvc  :   2 brvs  :   3 bset  :   0 bst   :   1 call  : 186 
cbi   :   3 cbr   :   0 clc   :   1 clh   :   0 cli   :   1 cln   :   0 
clr   :  39 cls   :   0 clt   :   8 clv   :   0 clz   :   0 com   :  10 
cp    :  14 cpc   :  21 cpi   : 104 cpse  :   0 dec   :  15 des   :   0 
eor   :   5 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   3 ijmp  :   0 
in    :  24 inc   :   2 jmp   :  41 ld    :  83 ldd   : 141 ldi   : 338 
lds   :  58 lpm   :  20 lsl   :  17 lsr   :   1 mov   :  75 movw  :  56 
mul   :  16 muls  :   0 mulsu :   0 neg   :   4 nop   :   0 or    :   5 
ori   :   6 out   :  21 pop   :  27 push  :  26 rcall :  56 ret   :  86 
reti  :   1 rjmp  : 166 rol   :  30 ror   :   7 sbc   :   7 sbci  :  23 
sbi   :   8 sbic  :   5 sbis  :   1 sbiw  :  42 sbr   :   1 sbrc  :   5 
sbrs  :  16 sec   :   3 seh   :   0 sei   :   1 sen   :   0 ser   :   8 
ses   :   0 set   :   8 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    : 177 std   :  54 sts   :  37 sub   :   5 subi  :  44 swap  :   1 
tst   :  26 wdr   :   1 
Instructions used: 80 out of 116 (69.0%)

ATmega64 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00193c   5692    768   6460   65536   9.9%
[.dseg] 0x000100 0x000951      0   1105   1105    4096  27.0%
[.eseg] 0x000000 0x000000      0      0      0    2048   0.0%

Assembly complete, 0 errors, 15 warnings
