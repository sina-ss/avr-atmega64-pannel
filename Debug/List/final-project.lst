
AVRASM ver. 2.1.30  D:\Uni\Term-8\riz-lab\Project\Debug\List\final-project.asm Tue Jul 04 10:52:47 2023

D:\Uni\Term-8\riz-lab\Project\Debug\List\final-project.asm(1089): warning: Register r4 already defined by the .DEF directive
D:\Uni\Term-8\riz-lab\Project\Debug\List\final-project.asm(1090): warning: Register r5 already defined by the .DEF directive
D:\Uni\Term-8\riz-lab\Project\Debug\List\final-project.asm(1091): warning: Register r6 already defined by the .DEF directive
D:\Uni\Term-8\riz-lab\Project\Debug\List\final-project.asm(1092): warning: Register r7 already defined by the .DEF directive
D:\Uni\Term-8\riz-lab\Project\Debug\List\final-project.asm(1093): warning: Register r8 already defined by the .DEF directive
D:\Uni\Term-8\riz-lab\Project\Debug\List\final-project.asm(1094): warning: Register r9 already defined by the .DEF directive
D:\Uni\Term-8\riz-lab\Project\Debug\List\final-project.asm(1095): warning: Register r10 already defined by the .DEF directive
D:\Uni\Term-8\riz-lab\Project\Debug\List\final-project.asm(1096): warning: Register r11 already defined by the .DEF directive
D:\Uni\Term-8\riz-lab\Project\Debug\List\final-project.asm(1097): warning: Register r12 already defined by the .DEF directive
D:\Uni\Term-8\riz-lab\Project\Debug\List\final-project.asm(1098): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega64
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 1024 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega64
                 	#pragma AVRPART MEMORY PROG_FLASH 65536
                 	#pragma AVRPART MEMORY EEPROM 2048
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4096
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _adc_result=R4
                 	.DEF _adc_result_msb=R5
                 	.DEF _numPredefinedUsers=R6
                 	.DEF _numPredefinedUsers_msb=R7
                 	.DEF _numRegisteredUsers=R8
                 	.DEF _numRegisteredUsers_msb=R9
                 	.DEF _bufferIndex=R10
                 	.DEF _bufferIndex_msb=R11
                 	.DEF _isRegistering=R12
                 	.DEF _isRegistering_msb=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 019c 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 028d 	JMP  _usart_rx_isr
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
000046 2710
000047 03e8
000048 0064
000049 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00004a 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00004b 1000
00004c 0100
00004d 0010
00004e 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00004f 0004
000050 0000      	.DB  0x4,0x0,0x0,0x0
000051 0000
000052 0000      	.DB  0x0,0x0,0x0,0x0
                 
                 _0x3:
000053 7375
000054 7265
000055 0031
000056 0000      	.DB  0x75,0x73,0x65,0x72,0x31,0x0,0x0,0x0
000057 0000
000058 0000
000059 0000
00005a 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00005b 0000
00005c 0000
00005d 6170
00005e 7373      	.DB  0x0,0x0,0x0,0x0,0x70,0x61,0x73,0x73
00005f 0031
000060 0000
000061 0000
000062 0000      	.DB  0x31,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000063 0000
000064 0000
000065 0000
000066 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000067 7375
000068 7265
000069 0032
00006a 0000      	.DB  0x75,0x73,0x65,0x72,0x32,0x0,0x0,0x0
00006b 0000
00006c 0000
00006d 0000
00006e 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00006f 0000
000070 0000
000071 6170
000072 7373      	.DB  0x0,0x0,0x0,0x0,0x70,0x61,0x73,0x73
000073 0032
000074 0000
000075 0000
000076 0000      	.DB  0x32,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000077 0000
000078 0000
000079 0000
00007a 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00007b 7375
00007c 7265
00007d 0033
00007e 0000      	.DB  0x75,0x73,0x65,0x72,0x33,0x0,0x0,0x0
00007f 0000
000080 0000
000081 0000
000082 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000083 0000
000084 0000
000085 6170
000086 7373      	.DB  0x0,0x0,0x0,0x0,0x70,0x61,0x73,0x73
000087 0033
000088 0000
000089 0000
00008a 0000      	.DB  0x33,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00008b 0000
00008c 0000
00008d 0000
00008e 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00008f 7375
000090 7265
000091 0034
000092 0000      	.DB  0x75,0x73,0x65,0x72,0x34,0x0,0x0,0x0
000093 0000
000094 0000
000095 0000
000096 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000097 0000
000098 0000
000099 6170
00009a 7373      	.DB  0x0,0x0,0x0,0x0,0x70,0x61,0x73,0x73
D:\Uni\Term-8\riz-lab\Project\Debug\List\final-project.asm(1173): warning: .cseg .db misalignment - padding zero byte
00009b 0034      	.DB  0x34
                 _0x5:
00009c 0500
00009d 0514
00009e 0526      	.DB  LOW(_0x4),HIGH(_0x4),LOW(_0x4+20),HIGH(_0x4+20),LOW(_0x4+38),HIGH(_0x4+38)
                 _0x6:
D:\Uni\Term-8\riz-lab\Project\Debug\List\final-project.asm(1177): warning: .cseg .db misalignment - padding zero byte
00009f 0003      	.DB  0x3
                 _0x33:
0000a0 063f
0000a1 4f5b
0000a2 6d66
0000a3 077d      	.DB  0x3F,0x6,0x5B,0x4F,0x66,0x6D,0x7D,0x7
0000a4 6f7f      	.DB  0x7F,0x6F
                 _0x35:
0000a5 0000
0000a6 bf80      	.DB  0x0,0x0,0x80,0xBF
                 _0x0:
0000a7 6f56
0000a8 746c
0000a9 6761
0000aa 2065      	.DB  0x56,0x6F,0x6C,0x74,0x61,0x67,0x65,0x20
0000ab 656d
0000ac 7361
0000ad 7275
0000ae 6d65      	.DB  0x6D,0x65,0x61,0x73,0x75,0x72,0x65,0x6D
0000af 6e65
0000b0 0074
0000b1 6553
0000b2 7474      	.DB  0x65,0x6E,0x74,0x0,0x53,0x65,0x74,0x74
0000b3 6e69
0000b4 2067
0000b5 6874
0000b6 2065      	.DB  0x69,0x6E,0x67,0x20,0x74,0x68,0x65,0x20
0000b7 6c63
0000b8 636f
0000b9 006b
0000ba 7541      	.DB  0x63,0x6C,0x6F,0x63,0x6B,0x0,0x41,0x75
0000bb 6f74
0000bc 616d
0000bd 6974
0000be 2063      	.DB  0x74,0x6F,0x6D,0x61,0x74,0x69,0x63,0x20
0000bf 6873
0000c0 7475
0000c1 6f64
0000c2 6e77      	.DB  0x73,0x68,0x75,0x74,0x64,0x6F,0x77,0x6E
0000c3 0a00
0000c4 6e45
0000c5 6574
0000c6 2072      	.DB  0x0,0xA,0x45,0x6E,0x74,0x65,0x72,0x20
0000c7 6150
0000c8 7373
0000c9 6f77
0000ca 6472      	.DB  0x50,0x61,0x73,0x73,0x77,0x6F,0x72,0x64
0000cb 203a
0000cc 0a00
0000cd 654e
0000ce 2077      	.DB  0x3A,0x20,0x0,0xA,0x4E,0x65,0x77,0x20
0000cf 6150
0000d0 7373
0000d1 6f77
0000d2 6472      	.DB  0x50,0x61,0x73,0x73,0x77,0x6F,0x72,0x64
0000d3 203a
0000d4 0a00
0000d5 6f4c
0000d6 6967      	.DB  0x3A,0x20,0x0,0xA,0x4C,0x6F,0x67,0x69
0000d7 206e
0000d8 7553
0000d9 6363
0000da 7365      	.DB  0x6E,0x20,0x53,0x75,0x63,0x63,0x65,0x73
0000db 6673
0000dc 6c75
0000dd 0a21
0000de 0a00      	.DB  0x73,0x66,0x75,0x6C,0x21,0xA,0x0,0xA
0000df 6f4c
0000e0 6967
0000e1 206e
0000e2 6146      	.DB  0x4C,0x6F,0x67,0x69,0x6E,0x20,0x46,0x61
0000e3 6c69
0000e4 6465
0000e5 0a21
0000e6 0a00      	.DB  0x69,0x6C,0x65,0x64,0x21,0xA,0x0,0xA
0000e7 6f43
0000e8 666e
0000e9 7269
0000ea 206d      	.DB  0x43,0x6F,0x6E,0x66,0x69,0x72,0x6D,0x20
0000eb 6150
0000ec 7373
0000ed 6f77
0000ee 6472      	.DB  0x50,0x61,0x73,0x73,0x77,0x6F,0x72,0x64
0000ef 203a
0000f0 0a00
0000f1 6552
0000f2 6967      	.DB  0x3A,0x20,0x0,0xA,0x52,0x65,0x67,0x69
0000f3 7473
0000f4 6172
0000f5 6974
0000f6 6e6f      	.DB  0x73,0x74,0x72,0x61,0x74,0x69,0x6F,0x6E
0000f7 5320
0000f8 6375
0000f9 6563
0000fa 7373      	.DB  0x20,0x53,0x75,0x63,0x63,0x65,0x73,0x73
0000fb 7566
0000fc 216c
0000fd 000a
0000fe 520a      	.DB  0x66,0x75,0x6C,0x21,0xA,0x0,0xA,0x52
0000ff 6765
000100 7369
000101 7274
000102 7461      	.DB  0x65,0x67,0x69,0x73,0x74,0x72,0x61,0x74
000103 6f69
000104 206e
000105 6146
000106 6c69      	.DB  0x69,0x6F,0x6E,0x20,0x46,0x61,0x69,0x6C
000107 6465
000108 0a21
000109 5600
00010a 6c6f      	.DB  0x65,0x64,0x21,0xA,0x0,0x56,0x6F,0x6C
00010b 6174
00010c 6567
00010d 203a
00010e 2e25      	.DB  0x74,0x61,0x67,0x65,0x3A,0x20,0x25,0x2E
00010f 6632
000110 0056
000111 450a
000112 746e      	.DB  0x32,0x66,0x56,0x0,0xA,0x45,0x6E,0x74
000113 7265
000114 7420
000115 6d69
000116 2065      	.DB  0x65,0x72,0x20,0x74,0x69,0x6D,0x65,0x20
000117 4828
000118 3a48
000119 4d4d
00011a 533a      	.DB  0x28,0x48,0x48,0x3A,0x4D,0x4D,0x3A,0x53
00011b 2953
00011c 203a
00011d 2500
00011e 3a64      	.DB  0x53,0x29,0x3A,0x20,0x0,0x25,0x64,0x3A
00011f 6425
000120 253a
000121 0064
000122 6954      	.DB  0x25,0x64,0x3A,0x25,0x64,0x0,0x54,0x69
000123 656d
000124 203a
000125 3025
000126 6432      	.DB  0x6D,0x65,0x3A,0x20,0x25,0x30,0x32,0x64
000127 253a
000128 3230
000129 3a64
00012a 3025      	.DB  0x3A,0x25,0x30,0x32,0x64,0x3A,0x25,0x30
00012b 6432
00012c 0a00
00012d 6e45
00012e 6574      	.DB  0x32,0x64,0x0,0xA,0x45,0x6E,0x74,0x65
00012f 2072
000130 6873
000131 7475
000132 6f64      	.DB  0x72,0x20,0x73,0x68,0x75,0x74,0x64,0x6F
000133 6e77
000134 6420
000135 7275
000136 7461      	.DB  0x77,0x6E,0x20,0x64,0x75,0x72,0x61,0x74
000137 6f69
000138 206e
000139 4d28
00013a 3a4d      	.DB  0x69,0x6F,0x6E,0x20,0x28,0x4D,0x4D,0x3A
00013b 5353
00013c 3a29
00013d 0020
00013e 6853      	.DB  0x53,0x53,0x29,0x3A,0x20,0x0,0x53,0x68
00013f 7475
000140 6f64
000141 6e77
000142 6920      	.DB  0x75,0x74,0x64,0x6F,0x77,0x6E,0x20,0x69
000143 206e
000144 3025
000145 6432
000146 253a      	.DB  0x6E,0x20,0x25,0x30,0x32,0x64,0x3A,0x25
000147 3230
000148 0064
000149 6e45
00014a 6574      	.DB  0x30,0x32,0x64,0x0,0x45,0x6E,0x74,0x65
00014b 2072
00014c 7355
00014d 7265
00014e 616e      	.DB  0x72,0x20,0x55,0x73,0x65,0x72,0x6E,0x61
00014f 656d
000150 203a
000151 4d00
000152 6e65      	.DB  0x6D,0x65,0x3A,0x20,0x0,0x4D,0x65,0x6E
000153 3a75
000154 0020      	.DB  0x75,0x3A,0x20,0x0
                 _0x2020060:
D:\Uni\Term-8\riz-lab\Project\Debug\List\final-project.asm(1229): warning: .cseg .db misalignment - padding zero byte
000155 0001      	.DB  0x1
                 _0x2020000:
000156 4e2d
000157 4e41
000158 4900
000159 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
D:\Uni\Term-8\riz-lab\Project\Debug\List\final-project.asm(1232): warning: .cseg .db misalignment - padding zero byte
00015a 0000      	.DB  0x0
                 _0x2060003:
00015b c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
00015c 0008      	.DW  0x08
00015d 0006      	.DW  0x06
00015e 009e      	.DW  __REG_VARS*2
                 
00015f 0091      	.DW  0x91
000160 063a      	.DW  _predefinedUsers
000161 00a6      	.DW  _0x3*2
                 
000162 0014      	.DW  0x14
000163 0500      	.DW  _0x4
000164 014e      	.DW  _0x0*2
                 
000165 0012      	.DW  0x12
000166 0514      	.DW  _0x4+20
000167 0162      	.DW  _0x0*2+20
                 
000168 0013      	.DW  0x13
000169 0526      	.DW  _0x4+38
00016a 0174      	.DW  _0x0*2+38
                 
00016b 0006      	.DW  0x06
00016c 08b2      	.DW  _menuOptions
00016d 0138      	.DW  _0x5*2
                 
00016e 0012      	.DW  0x12
00016f 0539      	.DW  _0x11
000170 0187      	.DW  _0x0*2+57
                 
000171 0012      	.DW  0x12
000172 054b      	.DW  _0x11+18
000173 0187      	.DW  _0x0*2+57
                 
000174 0010      	.DW  0x10
000175 055d      	.DW  _0x11+36
000176 0199      	.DW  _0x0*2+75
                 
000177 0014      	.DW  0x14
000178 056d      	.DW  _0x1D
000179 01a9      	.DW  _0x0*2+91
                 
00017a 0014      	.DW  0x14
00017b 0581      	.DW  _0x1D+20
00017c 01a9      	.DW  _0x0*2+91
                 
00017d 0010      	.DW  0x10
00017e 0595      	.DW  _0x1D+40
00017f 01bd      	.DW  _0x0*2+111
                 
000180 0014      	.DW  0x14
000181 05a5      	.DW  _0x27
000182 01cd      	.DW  _0x0*2+127
                 
000183 001b      	.DW  0x1B
000184 05b9      	.DW  _0x29
000185 01e1      	.DW  _0x0*2+147
                 
000186 0017      	.DW  0x17
000187 05d4      	.DW  _0x29+27
000188 01fc      	.DW  _0x0*2+174
                 
000189 0019      	.DW  0x19
00018a 05eb      	.DW  _0x3A
00018b 0222      	.DW  _0x0*2+212
                 
00018c 0002      	.DW  0x02
00018d 0604      	.DW  _0x3A+25
00018e 01bb      	.DW  _0x0*2+109
                 
00018f 0023      	.DW  0x23
000190 0606      	.DW  _0x3E
000191 0259      	.DW  _0x0*2+267
                 
000192 0011      	.DW  0x11
000193 0629      	.DW  _0x54
000194 0292      	.DW  _0x0*2+324
                 
000195 0001      	.DW  0x01
000196 08ff      	.DW  __seed_G101
000197 02aa      	.DW  _0x2020060*2
                 
000198 0002      	.DW  0x02
000199 0903      	.DW  __base_y_G103
00019a 02b6      	.DW  _0x2060003*2
                 
                 _0xFFFFFFFF:
00019b 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00019c 94f8      	CLI
00019d 27ee      	CLR  R30
00019e bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00019f e0f1      	LDI  R31,1
0001a0 bff5      	OUT  MCUCR,R31
0001a1 bfe5      	OUT  MCUCR,R30
0001a2 93e0 006c 	STS  XMCRB,R30
                 
                 ;CLEAR R2-R14
0001a4 e08d      	LDI  R24,(14-2)+1
0001a5 e0a2      	LDI  R26,2
0001a6 27bb      	CLR  R27
                 __CLEAR_REG:
0001a7 93ed      	ST   X+,R30
0001a8 958a      	DEC  R24
0001a9 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0001aa e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0001ab e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0001ac e0a0      	LDI  R26,LOW(__SRAM_START)
0001ad e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
0001ae 93ed      	ST   X+,R30
0001af 9701      	SBIW R24,1
0001b0 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0001b1 ebe8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0001b2 e0f2      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0001b3 9185      	LPM  R24,Z+
0001b4 9195      	LPM  R25,Z+
0001b5 9700      	SBIW R24,0
0001b6 f061      	BREQ __GLOBAL_INI_END
0001b7 91a5      	LPM  R26,Z+
0001b8 91b5      	LPM  R27,Z+
0001b9 9005      	LPM  R0,Z+
0001ba 9015      	LPM  R1,Z+
0001bb 01bf      	MOVW R22,R30
0001bc 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0001bd 9005      	LPM  R0,Z+
0001be 920d      	ST   X+,R0
0001bf 9701      	SBIW R24,1
0001c0 f7e1      	BRNE __GLOBAL_INI_LOOP
0001c1 01fb      	MOVW R30,R22
0001c2 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0001c3 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0001c4 bfed      	OUT  SPL,R30
0001c5 e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0001c6 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0001c7 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0001c8 e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0001c9 940c 02d3 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;#include <mega64.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;#include <stdlib.h>
                 ;#include <string.h>
                 ;#include <alcd.h>
                 ;
                 ;#define LED1 PORTD.0
                 ;#define LED2 PORTD.1
                 ;#define KEY_PORT PORTD.2
                 ;#define VOLTAGE_PIN ADC0
                 ;#define BUZZER PORTD.3
                 ;#define SHUTDOWN_MINUTE 5
                 ;
                 ;// ADC conversion result
                 ;unsigned int adc_result;
                 ;
                 ;// Time struct
                 ;typedef struct
                 ;{
                 ;    int hours;
                 ;    int minutes;
                 ;    int seconds;
                 ;} Time;
                 ;
                 ;typedef struct
                 ;{
                 ;    char username[20];
                 ;    char password[20];
                 ;} User;
                 ;
                 ;User predefinedUsers[] = { {"user1", "pass1"}, {"user2", "pass2"}, {"user3", "pass3"}, {"user4", "pass4"} };
                 
                 	.DSEG
                 ;User registeredUsers[10];  // Limit new users to 10
                 ;int numPredefinedUsers = sizeof(predefinedUsers) / sizeof(User);
                 ;int numRegisteredUsers = 0;
                 ;
                 ;char inputBuffer[20];
                 ;int bufferIndex = 0;
                 ;char tempPassword[20];
                 ;
                 ;char loggedUser[20];
                 ;int isRegistering = 0;
                 ;
                 ;Time currentTime = {0, 0, 0};
                 ;Time shutdownTime = {0, 0, 0};
                 ;
                 ;// Menu options
                 ;char* menuOptions[] = {"Voltage measurement", "Setting the clock", "Automatic shutdown"};
                 _0x4:
000500           	.BYTE 0x39
                 ;int numMenuOptions = sizeof(menuOptions) / sizeof(char*);
                 ;
                 ;// Menu state
                 ;int isMenuOpen = 0;
                 ;int menuSelection = 0;
                 ;float voltage;
                 ;char voltageStr[20];
                 ;char timeBuffer[10];
                 ;char c; //read until new line for clock
                 ;// Display the time on LCD
                 ;char lcdBuffer[20];
                 ;// Display the remaining time on LCD
                 ;char lcdBuffer[20];
                 ;//Diration for shutdown
                 ;char durationBuffer[10];
                 ;int i = 0; //counter for for :)
                 ;
                 ;void send_string(char *str)
                 ; 0000 0043 {
                 
                 	.CSEG
                 _send_string:
                 ; .FSTART _send_string
                 ; 0000 0044     while (*str != 0)
0001cb 93ba      	ST   -Y,R27
0001cc 93aa      	ST   -Y,R26
                 ;	*str -> Y+0
                 _0x7:
0001cd 81a8      	LD   R26,Y
0001ce 81b9      	LDD  R27,Y+1
0001cf 91ec      	LD   R30,X
0001d0 30e0      	CPI  R30,0
0001d1 f061      	BREQ _0x9
                 ; 0000 0045     {
                 ; 0000 0046         while ((UCSR0A & (1 << UDRE0)) == 0);
                 _0xA:
0001d2 9b5d      	SBIS 0xB,5
0001d3 cffe      	RJMP _0xA
                 ; 0000 0047         UDR0 = *str;
0001d4 81a8      	LD   R26,Y
0001d5 81b9      	LDD  R27,Y+1
0001d6 91ec      	LD   R30,X
0001d7 b9ec      	OUT  0xC,R30
                 ; 0000 0048         str++;
0001d8 81e8      	LD   R30,Y
0001d9 81f9      	LDD  R31,Y+1
0001da 9631      	ADIW R30,1
0001db 83e8      	ST   Y,R30
0001dc 83f9      	STD  Y+1,R31
                 ; 0000 0049     }
0001dd cfef      	RJMP _0x7
                 _0x9:
                 ; 0000 004A }
0001de 940c 037d 	JMP  _0x20C0003
                 ; .FEND
                 ;
                 ;void check_user()
                 ; 0000 004D {
                 _check_user:
                 ; .FSTART _check_user
                 ; 0000 004E     int i;
                 ; 0000 004F     for (i = 0; i < numPredefinedUsers; i++)
0001e0 931a      	ST   -Y,R17
0001e1 930a      	ST   -Y,R16
                 ;	i -> R16,R17
                +
0001e2 e000     +LDI R16 , LOW ( 0 )
0001e3 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0xE:
                +
0001e4 1506     +CP R16 , R6
0001e5 0517     +CPC R17 , R7
                 	__CPWRR 16,17,6,7
0001e6 f464      	BRGE _0xF
                 ; 0000 0050     {
                 ; 0000 0051         if (strcmp(predefinedUsers[i].username, inputBuffer) == 0)
0001e7 940e 03c1 	CALL SUBOPT_0x0
0001e9 940e 03c7 	CALL SUBOPT_0x1
0001eb f421      	BRNE _0x10
                 ; 0000 0052         {
                 ; 0000 0053             send_string("\nEnter Password: ");
                +
0001ec e3a9     +LDI R26 , LOW ( _0x11 + ( 0 ) )
0001ed e0b5     +LDI R27 , HIGH ( _0x11 + ( 0 ) )
                 	__POINTW2MN _0x11,0
0001ee dfdc      	RCALL _send_string
                 ; 0000 0054             return;
0001ef c070      	RJMP _0x20C0004
                 ; 0000 0055         }
                 ; 0000 0056     }
                 _0x10:
                +
0001f0 5f0f     +SUBI R16 , LOW ( - 1 )
0001f1 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0001f2 cff1      	RJMP _0xE
                 _0xF:
                 ; 0000 0057     for (i = 0; i < numRegisteredUsers; i++)
                +
0001f3 e000     +LDI R16 , LOW ( 0 )
0001f4 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x13:
                +
0001f5 1508     +CP R16 , R8
0001f6 0519     +CPC R17 , R9
                 	__CPWRR 16,17,8,9
0001f7 f47c      	BRGE _0x14
                 ; 0000 0058     {
                 ; 0000 0059         if (strcmp(registeredUsers[i].username, inputBuffer) == 0)
0001f8 940e 03c1 	CALL SUBOPT_0x0
0001fa 940e 03d1 	CALL SUBOPT_0x2
0001fc 940e 032d 	CALL _strcmp
0001fe 30e0      	CPI  R30,0
0001ff f421      	BRNE _0x15
                 ; 0000 005A         {
                 ; 0000 005B             send_string("\nEnter Password: ");
                +
000200 e4ab     +LDI R26 , LOW ( _0x11 + ( 18 ) )
000201 e0b5     +LDI R27 , HIGH ( _0x11 + ( 18 ) )
                 	__POINTW2MN _0x11,18
000202 dfc8      	RCALL _send_string
                 ; 0000 005C             return;
000203 c05c      	RJMP _0x20C0004
                 ; 0000 005D         }
                 ; 0000 005E     }
                 _0x15:
                +
000204 5f0f     +SUBI R16 , LOW ( - 1 )
000205 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000206 cfee      	RJMP _0x13
                 _0x14:
                 ; 0000 005F     // If username not found, register new user
                 ; 0000 0060     isRegistering = 1;
000207 e0e1      	LDI  R30,LOW(1)
000208 e0f0      	LDI  R31,HIGH(1)
000209 016f      	MOVW R12,R30
                 ; 0000 0061     strcpy(registeredUsers[numRegisteredUsers].username, inputBuffer);
00020a 01f4      	MOVW R30,R8
00020b e2a8      	LDI  R26,LOW(40)
00020c e0b0      	LDI  R27,HIGH(40)
00020d 940e 03ee 	CALL __MULW12U
00020f 940e 03d1 	CALL SUBOPT_0x2
000211 940e 0341 	CALL _strcpy
                 ; 0000 0062     send_string("\nNew Password: ");
                +
000213 e5ad     +LDI R26 , LOW ( _0x11 + ( 36 ) )
000214 e0b5     +LDI R27 , HIGH ( _0x11 + ( 36 ) )
                 	__POINTW2MN _0x11,36
000215 dfb5      	RCALL _send_string
                 ; 0000 0063 }
000216 c049      	RJMP _0x20C0004
                 ; .FEND
                 
                 	.DSEG
                 _0x11:
000539           	.BYTE 0x34
                 ;
                 ;void check_password()
                 ; 0000 0066 {
                 
                 	.CSEG
                 _check_password:
                 ; .FSTART _check_password
                 ; 0000 0067     int i;
                 ; 0000 0068     for (i = 0; i < numPredefinedUsers; i++)
000217 931a      	ST   -Y,R17
000218 930a      	ST   -Y,R16
                 ;	i -> R16,R17
                +
000219 e000     +LDI R16 , LOW ( 0 )
00021a e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x17:
                +
00021b 1506     +CP R16 , R6
00021c 0517     +CPC R17 , R7
                 	__CPWRR 16,17,6,7
00021d f4dc      	BRGE _0x18
                 ; 0000 0069     {
                 ; 0000 006A         if (strcmp(predefinedUsers[i].username, inputBuffer) == 0)
00021e 940e 03c1 	CALL SUBOPT_0x0
000220 940e 03c7 	CALL SUBOPT_0x1
000222 f499      	BRNE _0x19
                 ; 0000 006B         {
                 ; 0000 006C             if (strcmp(predefinedUsers[i].password, inputBuffer) == 0)
000223 940e 03c1 	CALL SUBOPT_0x0
                +
000225 5be2     +SUBI R30 , LOW ( - _predefinedUsers - ( 20 ) )
000226 4ff9     +SBCI R31 , HIGH ( - _predefinedUsers - ( 20 ) )
                 	__ADDW1MN _predefinedUsers,20
000227 940e 03d8 	CALL SUBOPT_0x3
000229 f461      	BRNE _0x1A
                 ; 0000 006D             {
                 ; 0000 006E                 strcpy(loggedUser, predefinedUsers[i].username);
00022a 940e 03e0 	CALL SUBOPT_0x4
00022c 5ce6      	SUBI R30,LOW(-_predefinedUsers)
00022d 4ff9      	SBCI R31,HIGH(-_predefinedUsers)
00022e 01df      	MOVW R26,R30
00022f 940e 0341 	CALL _strcpy
                 ; 0000 006F                 LED2 = 1; // Turn on the LED2
000231 9a91      	SBI  0x12,1
                 ; 0000 0070                 send_string("\nLogin Successful!\n");
                +
000232 e6ad     +LDI R26 , LOW ( _0x1D + ( 0 ) )
000233 e0b5     +LDI R27 , HIGH ( _0x1D + ( 0 ) )
                 	__POINTW2MN _0x1D,0
000234 df96      	RCALL _send_string
                 ; 0000 0071                 return;
000235 c02a      	RJMP _0x20C0004
                 ; 0000 0072             }
                 ; 0000 0073         }
                 _0x1A:
                 ; 0000 0074     }
                 _0x19:
                +
000236 5f0f     +SUBI R16 , LOW ( - 1 )
000237 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000238 cfe2      	RJMP _0x17
                 _0x18:
                 ; 0000 0075     for (i = 0; i < numRegisteredUsers; i++)
                +
000239 e000     +LDI R16 , LOW ( 0 )
00023a e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x1F:
                +
00023b 1508     +CP R16 , R8
00023c 0519     +CPC R17 , R9
                 	__CPWRR 16,17,8,9
00023d f4f4      	BRGE _0x20
                 ; 0000 0076     {
                 ; 0000 0077         if (strcmp(registeredUsers[i].username, inputBuffer) == 0)
00023e 940e 03c1 	CALL SUBOPT_0x0
000240 940e 03d1 	CALL SUBOPT_0x2
000242 940e 032d 	CALL _strcmp
000244 30e0      	CPI  R30,0
000245 f499      	BRNE _0x21
                 ; 0000 0078         {
                 ; 0000 0079             if (strcmp(registeredUsers[i].password, inputBuffer) == 0)
000246 940e 03c1 	CALL SUBOPT_0x0
                +
000248 51e2     +SUBI R30 , LOW ( - _registeredUsers - ( 20 ) )
000249 4ff9     +SBCI R31 , HIGH ( - _registeredUsers - ( 20 ) )
                 	__ADDW1MN _registeredUsers,20
00024a 940e 03d8 	CALL SUBOPT_0x3
00024c f461      	BRNE _0x22
                 ; 0000 007A             {
                 ; 0000 007B                 strcpy(loggedUser, registeredUsers[i].username);
00024d 940e 03e0 	CALL SUBOPT_0x4
00024f 52e6      	SUBI R30,LOW(-_registeredUsers)
000250 4ff9      	SBCI R31,HIGH(-_registeredUsers)
000251 01df      	MOVW R26,R30
000252 940e 0341 	CALL _strcpy
                 ; 0000 007C                 LED2 = 1; // Turn on the LED2
000254 9a91      	SBI  0x12,1
                 ; 0000 007D                 send_string("\nLogin Successful!\n");
                +
000255 e8a1     +LDI R26 , LOW ( _0x1D + ( 20 ) )
000256 e0b5     +LDI R27 , HIGH ( _0x1D + ( 20 ) )
                 	__POINTW2MN _0x1D,20
000257 df73      	RCALL _send_string
                 ; 0000 007E                 return;
000258 c007      	RJMP _0x20C0004
                 ; 0000 007F             }
                 ; 0000 0080         }
                 _0x22:
                 ; 0000 0081     }
                 _0x21:
                +
000259 5f0f     +SUBI R16 , LOW ( - 1 )
00025a 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00025b cfdf      	RJMP _0x1F
                 _0x20:
                 ; 0000 0082     send_string("\nLogin Failed!\n");
                +
00025c e9a5     +LDI R26 , LOW ( _0x1D + ( 40 ) )
00025d e0b5     +LDI R27 , HIGH ( _0x1D + ( 40 ) )
                 	__POINTW2MN _0x1D,40
00025e df6c      	RCALL _send_string
                 ; 0000 0083     LED2 = 0; // Turn off the LED2
00025f 9891      	CBI  0x12,1
                 ; 0000 0084 }
                 _0x20C0004:
000260 9109      	LD   R16,Y+
000261 9119      	LD   R17,Y+
000262 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x1D:
00056d           	.BYTE 0x38
                 ;
                 ;void check_new_password()
                 ; 0000 0087 {
                 
                 	.CSEG
                 _check_new_password:
                 ; .FSTART _check_new_password
                 ; 0000 0088     strcpy(tempPassword, inputBuffer);
000263 e7ee      	LDI  R30,LOW(_tempPassword)
000264 e0f8      	LDI  R31,HIGH(_tempPassword)
000265 93fa      	ST   -Y,R31
000266 93ea      	ST   -Y,R30
000267 e6aa      	LDI  R26,LOW(_inputBuffer)
000268 e0b8      	LDI  R27,HIGH(_inputBuffer)
000269 940e 0341 	CALL _strcpy
                 ; 0000 0089     send_string("\nConfirm Password: ");
                +
00026b eaa5     +LDI R26 , LOW ( _0x27 + ( 0 ) )
00026c e0b5     +LDI R27 , HIGH ( _0x27 + ( 0 ) )
                 	__POINTW2MN _0x27,0
00026d df5d      	RCALL _send_string
                 ; 0000 008A }
00026e 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x27:
0005a5           	.BYTE 0x14
                 ;
                 ;void check_confirm_password()
                 ; 0000 008D {
                 
                 	.CSEG
                 _check_confirm_password:
                 ; .FSTART _check_confirm_password
                 ; 0000 008E     if (strcmp(tempPassword, inputBuffer) == 0)
00026f e7ee      	LDI  R30,LOW(_tempPassword)
000270 e0f8      	LDI  R31,HIGH(_tempPassword)
000271 940e 03d8 	CALL SUBOPT_0x3
000273 f499      	BRNE _0x28
                 ; 0000 008F     {
                 ; 0000 0090         strcpy(registeredUsers[numRegisteredUsers].password, tempPassword);
000274 01f4      	MOVW R30,R8
000275 e2a8      	LDI  R26,LOW(40)
000276 e0b0      	LDI  R27,HIGH(40)
000277 940e 03ee 	CALL __MULW12U
                +
000279 51e2     +SUBI R30 , LOW ( - _registeredUsers - ( 20 ) )
00027a 4ff9     +SBCI R31 , HIGH ( - _registeredUsers - ( 20 ) )
                 	__ADDW1MN _registeredUsers,20
00027b 93fa      	ST   -Y,R31
00027c 93ea      	ST   -Y,R30
00027d e7ae      	LDI  R26,LOW(_tempPassword)
00027e e0b8      	LDI  R27,HIGH(_tempPassword)
00027f 940e 0341 	CALL _strcpy
                 ; 0000 0091         numRegisteredUsers++;
000281 01f4      	MOVW R30,R8
000282 9631      	ADIW R30,1
000283 014f      	MOVW R8,R30
                 ; 0000 0092         send_string("\nRegistration Successful!\n");
                +
000284 eba9     +LDI R26 , LOW ( _0x29 + ( 0 ) )
000285 e0b5     +LDI R27 , HIGH ( _0x29 + ( 0 ) )
                 	__POINTW2MN _0x29,0
000286 c002      	RJMP _0x5D
                 ; 0000 0093     }
                 ; 0000 0094     else
                 _0x28:
                 ; 0000 0095     {
                 ; 0000 0096         send_string("\nRegistration Failed!\n");
                +
000287 eda4     +LDI R26 , LOW ( _0x29 + ( 27 ) )
000288 e0b5     +LDI R27 , HIGH ( _0x29 + ( 27 ) )
                 	__POINTW2MN _0x29,27
                 _0x5D:
000289 df41      	RCALL _send_string
                 ; 0000 0097     }
                 ; 0000 0098     isRegistering = 0;
00028a 24cc      	CLR  R12
00028b 24dd      	CLR  R13
                 ; 0000 0099 }
00028c 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x29:
0005b9           	.BYTE 0x32
                 ;
                 ;interrupt [USART0_RXC] void usart_rx_isr(void)
                 ; 0000 009C {
                 
                 	.CSEG
                 _usart_rx_isr:
                 ; .FSTART _usart_rx_isr
00028d 920a      	ST   -Y,R0
00028e 921a      	ST   -Y,R1
00028f 92fa      	ST   -Y,R15
000290 936a      	ST   -Y,R22
000291 937a      	ST   -Y,R23
000292 938a      	ST   -Y,R24
000293 939a      	ST   -Y,R25
000294 93aa      	ST   -Y,R26
000295 93ba      	ST   -Y,R27
000296 93ea      	ST   -Y,R30
000297 93fa      	ST   -Y,R31
000298 b7ef      	IN   R30,SREG
000299 93ea      	ST   -Y,R30
                 ; 0000 009D     char data = UDR0;
                 ; 0000 009E     if (data == '\n')
00029a 931a      	ST   -Y,R17
                 ;	data -> R17
00029b b11c      	IN   R17,12
00029c 301a      	CPI  R17,10
00029d f4f9      	BRNE _0x2B
                 ; 0000 009F     {
                 ; 0000 00A0         inputBuffer[bufferIndex] = '\0'; // Null-terminate the received string
00029e e6aa      	LDI  R26,LOW(_inputBuffer)
00029f e0b8      	LDI  R27,HIGH(_inputBuffer)
0002a0 0daa      	ADD  R26,R10
0002a1 1dbb      	ADC  R27,R11
0002a2 e0e0      	LDI  R30,LOW(0)
0002a3 93ec      	ST   X,R30
                 ; 0000 00A1         if (loggedUser[0] == '\0')
0002a4 91e0 0892 	LDS  R30,_loggedUser
0002a6 30e0      	CPI  R30,0
0002a7 f489      	BRNE _0x2C
                 ; 0000 00A2         {
                 ; 0000 00A3             if (isRegistering == 0)
0002a8 2c0c      	MOV  R0,R12
0002a9 280d      	OR   R0,R13
0002aa f411      	BRNE _0x2D
                 ; 0000 00A4             {
                 ; 0000 00A5                 check_user();
0002ab df34      	RCALL _check_user
                 ; 0000 00A6             }
                 ; 0000 00A7             else if (isRegistering == 1)
0002ac c00b      	RJMP _0x2E
                 _0x2D:
0002ad e0e1      	LDI  R30,LOW(1)
0002ae e0f0      	LDI  R31,HIGH(1)
0002af 15ec      	CP   R30,R12
0002b0 05fd      	CPC  R31,R13
0002b1 f429      	BRNE _0x2F
                 ; 0000 00A8             {
                 ; 0000 00A9                 check_new_password();
0002b2 dfb0      	RCALL _check_new_password
                 ; 0000 00AA                 isRegistering++;
0002b3 01f6      	MOVW R30,R12
0002b4 9631      	ADIW R30,1
0002b5 016f      	MOVW R12,R30
                 ; 0000 00AB             }
                 ; 0000 00AC             else
0002b6 c001      	RJMP _0x30
                 _0x2F:
                 ; 0000 00AD             {
                 ; 0000 00AE                 check_confirm_password();
0002b7 dfb7      	RCALL _check_confirm_password
                 ; 0000 00AF             }
                 _0x30:
                 _0x2E:
                 ; 0000 00B0         }
                 ; 0000 00B1         else
0002b8 c001      	RJMP _0x31
                 _0x2C:
                 ; 0000 00B2         {
                 ; 0000 00B3             check_password();
0002b9 df5d      	RCALL _check_password
                 ; 0000 00B4         }
                 _0x31:
                 ; 0000 00B5         bufferIndex = 0;
0002ba 24aa      	CLR  R10
0002bb 24bb      	CLR  R11
                 ; 0000 00B6     }
                 ; 0000 00B7     else
0002bc c007      	RJMP _0x32
                 _0x2B:
                 ; 0000 00B8     {
                 ; 0000 00B9         inputBuffer[bufferIndex] = data;
0002bd 01f5      	MOVW R30,R10
0002be 59e6      	SUBI R30,LOW(-_inputBuffer)
0002bf 4ff7      	SBCI R31,HIGH(-_inputBuffer)
0002c0 8310      	ST   Z,R17
                 ; 0000 00BA         bufferIndex++;
0002c1 01f5      	MOVW R30,R10
0002c2 9631      	ADIW R30,1
0002c3 015f      	MOVW R10,R30
                 ; 0000 00BB     }
                 _0x32:
                 ; 0000 00BC }
0002c4 9119      	LD   R17,Y+
0002c5 91e9      	LD   R30,Y+
0002c6 bfef      	OUT  SREG,R30
0002c7 91f9      	LD   R31,Y+
0002c8 91e9      	LD   R30,Y+
0002c9 91b9      	LD   R27,Y+
0002ca 91a9      	LD   R26,Y+
0002cb 9199      	LD   R25,Y+
0002cc 9189      	LD   R24,Y+
0002cd 9179      	LD   R23,Y+
0002ce 9169      	LD   R22,Y+
0002cf 90f9      	LD   R15,Y+
0002d0 9019      	LD   R1,Y+
0002d1 9009      	LD   R0,Y+
0002d2 9518      	RETI
                 ; .FEND
                 ;
                 ;unsigned char get7SegmentCode(unsigned char digit)
                 ; 0000 00BF {
                 ; 0000 00C0     unsigned char segmentCodes[] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F};
                 ; 0000 00C1     if (digit < 10)
                 ;	digit -> Y+10
                 ;	segmentCodes -> Y+0
                 ; 0000 00C2         return segmentCodes[digit];
                 ; 0000 00C3     return 0;
                 ; 0000 00C4 }
                 ;
                 ;void display_on_7segment(float voltage)
                 ; 0000 00C7 {
                 ; 0000 00C8     static unsigned char digitIndex = 0;
                 ; 0000 00C9     static unsigned int digitCodes[4] = {0};
                 ; 0000 00CA 
                 ; 0000 00CB     // Calculate digit codes once when voltage changes
                 ; 0000 00CC     static float lastVoltage = -1.0f;
                 
                 	.DSEG
                 
                 	.CSEG
                 ; 0000 00CD     if (voltage != lastVoltage)
                 ;	voltage -> Y+0
                 ; 0000 00CE     {
                 ; 0000 00CF         int intVoltage = (int)(voltage * 100);  // Convert to integer to avoid floating point division
                 ; 0000 00D0         digitCodes[0] = get7SegmentCode(intVoltage / 1000);  // Thousands
                 ;	voltage -> Y+2
                 ;	intVoltage -> Y+0
                 ; 0000 00D1         digitCodes[1] = get7SegmentCode((intVoltage % 1000) / 100);  // Hundreds
                 ; 0000 00D2         digitCodes[2] = get7SegmentCode((intVoltage % 100) / 10);  // Tens
                 ; 0000 00D3         digitCodes[3] = get7SegmentCode(intVoltage % 10);  // Ones
                 ; 0000 00D4         lastVoltage = voltage;
                 ; 0000 00D5     }
                 ; 0000 00D6 
                 ; 0000 00D7     // Turn off all digits
                 ; 0000 00D8     PORTA = 0;
                 ; 0000 00D9 
                 ; 0000 00DA     // Set segments
                 ; 0000 00DB     PORTA = digitCodes[digitIndex];
                 ; 0000 00DC 
                 ; 0000 00DD     // Turn on the current digit
                 ; 0000 00DE     PORTA |= (1 << (digitIndex + 4));
                 ; 0000 00DF 
                 ; 0000 00E0     // Go to the next digit
                 ; 0000 00E1     digitIndex = (digitIndex + 1) % 4;
                 ; 0000 00E2 }
                 ;
                 ;void measure_voltage()
                 ; 0000 00E5 {
                 ; 0000 00E6     // Start the ADC conversion
                 ; 0000 00E7     ADCSRA |= (1 << ADSC);
                 ; 0000 00E8 
                 ; 0000 00E9     // Wait for conversion to complete
                 ; 0000 00EA     while (ADCSRA & (1 << ADSC));
                 ; 0000 00EB 
                 ; 0000 00EC     // Get the result
                 ; 0000 00ED     adc_result = ADCL | (ADCH << 8);
                 ; 0000 00EE 
                 ; 0000 00EF     // Display the voltage on the 7-segment display and LCD
                 ; 0000 00F0     voltage = (adc_result / 1024.0) * 5;
                 ; 0000 00F1     lcd_gotoxy(0, 1);
                 ; 0000 00F2     sprintf(voltageStr, "Voltage: %.2fV", voltage);
                 ; 0000 00F3     lcd_puts(voltageStr);
                 ; 0000 00F4 
                 ; 0000 00F5 
                 ; 0000 00F6     // Assuming you have a function to display numbers on 7-segment
                 ; 0000 00F7     display_on_7segment(voltage);
                 ; 0000 00F8 }
                 ;
                 ;void set_clock()
                 ; 0000 00FB {
                 ; 0000 00FC     // Ask the user to input time
                 ; 0000 00FD     send_string("\nEnter time (HH:MM:SS): ");
                 ; 0000 00FE     while (c = UDR0, c != '\n') // read until newline
                 ; 0000 00FF     {
                 ; 0000 0100         strncat(timeBuffer, &c, 1);
                 ; 0000 0101     }
                 ; 0000 0102     // Remove newline character from fgets
                 ; 0000 0103     timeBuffer[strcspn(timeBuffer, "\n")] = 0;
                 ; 0000 0104 
                 ; 0000 0105     sscanf(timeBuffer, "%d:%d:%d", &currentTime.hours, &currentTime.minutes, &currentTime.seconds);
                 ; 0000 0106 
                 ; 0000 0107     // Display the time on LCD
                 ; 0000 0108     sprintf(lcdBuffer, "Time: %02d:%02d:%02d", currentTime.hours, currentTime.minutes, currentTime.seconds);
                 ; 0000 0109     lcd_gotoxy(0, 1);
                 ; 0000 010A     lcd_puts(lcdBuffer);
                 ; 0000 010B }
                 
                 	.DSEG
                 _0x3A:
0005eb           	.BYTE 0x1B
                 ;
                 ;void auto_shutdown()
                 ; 0000 010E {
                 
                 	.CSEG
                 ; 0000 010F     // Ask the user to input shutdown duration
                 ; 0000 0110     send_string("\nEnter shutdown duration (MM:SS): ");
                 ; 0000 0111     while (c = UDR0, c != '\n') // read until newline
                 ; 0000 0112     {
                 ; 0000 0113         strncat(durationBuffer, &c, 1);
                 ; 0000 0114     }
                 ; 0000 0115     sscanf(durationBuffer, "%d:%d", &shutdownTime.minutes, &shutdownTime.seconds);
                 ; 0000 0116 
                 ; 0000 0117     // Start a countdown
                 ; 0000 0118     while (shutdownTime.minutes != 0 || shutdownTime.seconds != 0)
                 ; 0000 0119     {
                 ; 0000 011A         // Decrement the time
                 ; 0000 011B         if (--shutdownTime.seconds < 0)
                 ; 0000 011C         {
                 ; 0000 011D             shutdownTime.seconds = 59;
                 ; 0000 011E             shutdownTime.minutes--;
                 ; 0000 011F         }
                 ; 0000 0120 
                 ; 0000 0121         // Display the remaining time on LCD
                 ; 0000 0122         sprintf(lcdBuffer, "Shutdown in %02d:%02d", shutdownTime.minutes, shutdownTime.seconds);
                 ; 0000 0123         lcd_gotoxy(0, 1);
                 ; 0000 0124         lcd_puts(lcdBuffer);
                 ; 0000 0125 
                 ; 0000 0126         // Beep the buzzer when there is 1 minute left
                 ; 0000 0127         if (shutdownTime.minutes == 1 && shutdownTime.seconds == 0)
                 ; 0000 0128         {
                 ; 0000 0129             PORTD |= (1 << BUZZER);
                 ; 0000 012A         }
                 ; 0000 012B 
                 ; 0000 012C         // Delay for a second
                 ; 0000 012D         for(i = 0; i < 1000; i++)
                 ; 0000 012E             delay_ms(1); // Using delay_ms() in a loop
                 ; 0000 012F }
                 ; 0000 0130 
                 ; 0000 0131     // Shutdown the system
                 ; 0000 0132     PORTD &= ~(1 << LED1);
                 ; 0000 0133     PORTD &= ~(1 << LED2);
                 ; 0000 0134     PORTD &= ~(1 << BUZZER);
                 ; 0000 0135     lcd_clear();
                 ; 0000 0136     PORTA = 0; // Turn off 7-segment
                 ; 0000 0137 }
                 
                 	.DSEG
                 _0x3E:
000606           	.BYTE 0x23
                 ;
                 ;void main(void)
                 ; 0000 013A {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 013B     // Port D is output for LEDs
                 ; 0000 013C     DDRD.0 = 1;
0002d3 9a88      	SBI  0x11,0
                 ; 0000 013D     DDRD.1 = 1;
0002d4 9a89      	SBI  0x11,1
                 ; 0000 013E 
                 ; 0000 013F     // Turn on the LED1
                 ; 0000 0140     LED1 = 1;
0002d5 9a90      	SBI  0x12,0
                 ; 0000 0141 
                 ; 0000 0142     // Initialize USART
                 ; 0000 0143     UCSR0A = 0x00;
0002d6 e0e0      	LDI  R30,LOW(0)
0002d7 b9eb      	OUT  0xB,R30
                 ; 0000 0144     UCSR0B = 0x18;
0002d8 e1e8      	LDI  R30,LOW(24)
0002d9 b9ea      	OUT  0xA,R30
                 ; 0000 0145     UCSR0C = 0x06;
0002da e0e6      	LDI  R30,LOW(6)
0002db 93e0 0095 	STS  149,R30
                 ; 0000 0146     UBRR0L = 51; // for 9600 bps with 8MHz clock
0002dd e3e3      	LDI  R30,LOW(51)
0002de b9e9      	OUT  0x9,R30
                 ; 0000 0147 
                 ; 0000 0148     // Enable Global Interrupts
                 ; 0000 0149     #asm("sei")
0002df 9478      	sei
                 ; 0000 014A 
                 ; 0000 014B     send_string("Enter Username: ");
                +
0002e0 e2a9     +LDI R26 , LOW ( _0x54 + ( 0 ) )
0002e1 e0b6     +LDI R27 , HIGH ( _0x54 + ( 0 ) )
                 	__POINTW2MN _0x54,0
0002e2 dee8      	RCALL _send_string
                 ; 0000 014C 
                 ; 0000 014D     while (1)
                 _0x55:
                 ; 0000 014E {
                 ; 0000 014F     if (isMenuOpen == 1)
0002e3 91a0 08b8 	LDS  R26,_isMenuOpen
0002e5 91b0 08b9 	LDS  R27,_isMenuOpen+1
0002e7 9711      	SBIW R26,1
0002e8 f509      	BRNE _0x58
                 ; 0000 0150     {
                 ; 0000 0151         // Display the menu on LCD
                 ; 0000 0152         lcd_gotoxy(0, 0);
0002e9 e0e0      	LDI  R30,LOW(0)
0002ea 93ea      	ST   -Y,R30
0002eb e0a0      	LDI  R26,LOW(0)
0002ec 940e 036e 	CALL _lcd_gotoxy
                 ; 0000 0153         lcd_putsf("Menu: ");
                +
0002ee eaa3     +LDI R26 , LOW ( 2 * _0x0 + ( 341 ) )
0002ef e0b2     +LDI R27 , HIGH ( 2 * _0x0 + ( 341 ) )
                 	__POINTW2FN _0x0,341
0002f0 940e 03ae 	CALL _lcd_putsf
                 ; 0000 0154         lcd_gotoxy(0, 1);
0002f2 e0e0      	LDI  R30,LOW(0)
0002f3 93ea      	ST   -Y,R30
0002f4 e0a1      	LDI  R26,LOW(1)
0002f5 940e 036e 	CALL _lcd_gotoxy
                 ; 0000 0155         lcd_puts(menuOptions[menuSelection]);
0002f7 91e0 08ba 	LDS  R30,_menuSelection
0002f9 91f0 08bb 	LDS  R31,_menuSelection+1
0002fb eba2      	LDI  R26,LOW(_menuOptions)
0002fc e0b8      	LDI  R27,HIGH(_menuOptions)
0002fd 0fee      	LSL  R30
0002fe 1fff      	ROL  R31
0002ff 0fae      	ADD  R26,R30
000300 1fbf      	ADC  R27,R31
000301 940e 03f6 	CALL __GETW1P
000303 01df      	MOVW R26,R30
000304 940e 039f 	CALL _lcd_puts
                 ; 0000 0156 
                 ; 0000 0157         // Display selection on 7-segment
                 ; 0000 0158         PORTA = menuSelection + 1;
000306 91e0 08ba 	LDS  R30,_menuSelection
000308 5fef      	SUBI R30,-LOW(1)
000309 bbeb      	OUT  0x1B,R30
                 ; 0000 0159     }
                 ; 0000 015A 
                 ; 0000 015B     if (PIND & (1 << KEY_PORT))
                 _0x58:
00030a b210      	IN   R1,16
00030b e0e0      	LDI  R30,0
00030c 9992      	SBIC 0x12,2
00030d e0e1      	LDI  R30,1
00030e e0a1      	LDI  R26,LOW(1)
00030f e0b0      	LDI  R27,HIGH(1)
000310 940e 03e5 	CALL __LSLW12
000312 2da1      	MOV  R26,R1
000313 e0b0      	LDI  R27,0
000314 23ea      	AND  R30,R26
000315 23fb      	AND  R31,R27
000316 9730      	SBIW R30,0
000317 f099      	BREQ _0x59
                 ; 0000 015C     {
                 ; 0000 015D         // Menu button is pressed
                 ; 0000 015E         if (isMenuOpen == 0)
000318 91e0 08b8 	LDS  R30,_isMenuOpen
00031a 91f0 08b9 	LDS  R31,_isMenuOpen+1
00031c 9730      	SBIW R30,0
00031d f439      	BRNE _0x5A
                 ; 0000 015F         {
                 ; 0000 0160             // Open the menu
                 ; 0000 0161             isMenuOpen = 1;
00031e e0e1      	LDI  R30,LOW(1)
00031f e0f0      	LDI  R31,HIGH(1)
000320 93e0 08b8 	STS  _isMenuOpen,R30
000322 93f0 08b9 	STS  _isMenuOpen+1,R31
                 ; 0000 0162         }
                 ; 0000 0163         else
000324 c006      	RJMP _0x5B
                 _0x5A:
                 ; 0000 0164         {
                 ; 0000 0165             // Close the menu
                 ; 0000 0166             isMenuOpen = 0;
000325 e0e0      	LDI  R30,LOW(0)
000326 93e0 08b8 	STS  _isMenuOpen,R30
000328 93e0 08b9 	STS  _isMenuOpen+1,R30
                 ; 0000 0167             PORTA = 0; // Turn off 7-segment
00032a bbeb      	OUT  0x1B,R30
                 ; 0000 0168         }
                 _0x5B:
                 ; 0000 0169     }
                 ; 0000 016A }
                 _0x59:
00032b cfb7      	RJMP _0x55
                 ; 0000 016B 
                 ; 0000 016C }
                 _0x5C:
00032c cfff      	RJMP _0x5C
                 ; .FEND
                 
                 	.DSEG
                 _0x54:
000629           	.BYTE 0x11
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _strcmp:
                 ; .FSTART _strcmp
00032d 93ba      	ST   -Y,R27
00032e 93aa      	ST   -Y,R26
00032f 91e9          ld   r30,y+
000330 91f9          ld   r31,y+
000331 91a9          ld   r26,y+
000332 91b9          ld   r27,y+
                 strcmp0:
000333 916d          ld   r22,x+
000334 9171          ld   r23,z+
000335 1767          cp   r22,r23
000336 f421          brne strcmp1
000337 2366          tst  r22
000338 f7d1          brne strcmp0
                 strcmp3:
000339 27ee          clr  r30
00033a 9508          ret
                 strcmp1:
00033b 1b67          sub  r22,r23
00033c f3e1          breq strcmp3
00033d e0e1          ldi  r30,1
00033e f408          brcc strcmp2
00033f 50e2          subi r30,2
                 strcmp2:
000340 9508          ret
                 ; .FEND
                 _strcpy:
                 ; .FSTART _strcpy
000341 93ba      	ST   -Y,R27
000342 93aa      	ST   -Y,R26
000343 91e9          ld   r30,y+
000344 91f9          ld   r31,y+
000345 91a9          ld   r26,y+
000346 91b9          ld   r27,y+
000347 01cd          movw r24,r26
                 strcpy0:
000348 9161          ld   r22,z+
000349 936d          st   x+,r22
00034a 2366          tst  r22
00034b f7e1          brne strcpy0
00034c 01fc          movw r30,r24
00034d 9508          ret
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G103:
                 ; .FSTART __lcd_write_nibble_G103
00034e 93aa      	ST   -Y,R26
00034f b3e8      	IN   R30,0x18
000350 70ef      	ANDI R30,LOW(0xF)
000351 2fae      	MOV  R26,R30
000352 81e8      	LD   R30,Y
000353 7fe0      	ANDI R30,LOW(0xF0)
000354 2bea      	OR   R30,R26
000355 bbe8      	OUT  0x18,R30
                +
000356 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000357 958a     +DEC R24
000358 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000359 9ac2      	SBI  0x18,2
                +
00035a e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00035b 958a     +DEC R24
00035c f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00035d 98c2      	CBI  0x18,2
                +
00035e e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00035f 958a     +DEC R24
000360 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000361 c03b      	RJMP _0x20C0002
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000362 93aa      	ST   -Y,R26
000363 81a8      	LD   R26,Y
000364 dfe9      	RCALL __lcd_write_nibble_G103
000365 81e8          ld    r30,y
000366 95e2          swap  r30
000367 83e8          st    y,r30
000368 81a8      	LD   R26,Y
000369 dfe4      	RCALL __lcd_write_nibble_G103
                +
00036a e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
00036b 958a     +DEC R24
00036c f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
00036d c02f      	RJMP _0x20C0002
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
00036e 93aa      	ST   -Y,R26
00036f 81e8      	LD   R30,Y
000370 e0f0      	LDI  R31,0
000371 5fed      	SUBI R30,LOW(-__base_y_G103)
000372 4ff6      	SBCI R31,HIGH(-__base_y_G103)
000373 81e0      	LD   R30,Z
000374 81a9      	LDD  R26,Y+1
000375 0fae      	ADD  R26,R30
000376 dfeb      	RCALL __lcd_write_data
000377 81e9      	LDD  R30,Y+1
000378 93e0 0907 	STS  __lcd_x,R30
00037a 81e8      	LD   R30,Y
00037b 93e0 0908 	STS  __lcd_y,R30
                 _0x20C0003:
00037d 9622      	ADIW R28,2
00037e 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
00037f 93aa      	ST   -Y,R26
000380 81a8      	LD   R26,Y
000381 30aa      	CPI  R26,LOW(0xA)
000382 f031      	BREQ _0x2060005
000383 91e0 0909 	LDS  R30,__lcd_maxx
000385 91a0 0907 	LDS  R26,__lcd_x
000387 17ae      	CP   R26,R30
000388 f058      	BRLO _0x2060004
                 _0x2060005:
000389 e0e0      	LDI  R30,LOW(0)
00038a 93ea      	ST   -Y,R30
00038b 91a0 0908 	LDS  R26,__lcd_y
00038d 5faf      	SUBI R26,-LOW(1)
00038e 93a0 0908 	STS  __lcd_y,R26
000390 dfdd      	RCALL _lcd_gotoxy
000391 81a8      	LD   R26,Y
000392 30aa      	CPI  R26,LOW(0xA)
000393 f049      	BREQ _0x20C0002
                 _0x2060004:
000394 91e0 0907 	LDS  R30,__lcd_x
000396 5fef      	SUBI R30,-LOW(1)
000397 93e0 0907 	STS  __lcd_x,R30
000399 9ac0      	SBI  0x18,0
00039a 81a8      	LD   R26,Y
00039b dfc6      	RCALL __lcd_write_data
00039c 98c0      	CBI  0x18,0
                 _0x20C0002:
00039d 9621      	ADIW R28,1
00039e 9508      	RET
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
00039f 93ba      	ST   -Y,R27
0003a0 93aa      	ST   -Y,R26
0003a1 931a      	ST   -Y,R17
                 _0x2060008:
0003a2 81a9      	LDD  R26,Y+1
0003a3 81ba      	LDD  R27,Y+1+1
0003a4 91ed      	LD   R30,X+
0003a5 83a9      	STD  Y+1,R26
0003a6 83ba      	STD  Y+1+1,R27
0003a7 2f1e      	MOV  R17,R30
0003a8 30e0      	CPI  R30,0
0003a9 f019      	BREQ _0x206000A
0003aa 2fa1      	MOV  R26,R17
0003ab dfd3      	RCALL _lcd_putchar
0003ac cff5      	RJMP _0x2060008
                 _0x206000A:
0003ad c010      	RJMP _0x20C0001
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
0003ae 93ba      	ST   -Y,R27
0003af 93aa      	ST   -Y,R26
0003b0 931a      	ST   -Y,R17
                 _0x206000B:
0003b1 81e9      	LDD  R30,Y+1
0003b2 81fa      	LDD  R31,Y+1+1
0003b3 9631      	ADIW R30,1
0003b4 83e9      	STD  Y+1,R30
0003b5 83fa      	STD  Y+1+1,R31
0003b6 9731      	SBIW R30,1
0003b7 91e4      	LPM  R30,Z
0003b8 2f1e      	MOV  R17,R30
0003b9 30e0      	CPI  R30,0
0003ba f019      	BREQ _0x206000D
0003bb 2fa1      	MOV  R26,R17
0003bc dfc2      	RCALL _lcd_putchar
0003bd cff3      	RJMP _0x206000B
                 _0x206000D:
                 _0x20C0001:
0003be 8118      	LDD  R17,Y+0
0003bf 9623      	ADIW R28,3
0003c0 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _predefinedUsers:
00063a           	.BYTE 0xA0
                 _registeredUsers:
0006da           	.BYTE 0x190
                 _inputBuffer:
00086a           	.BYTE 0x14
                 _tempPassword:
00087e           	.BYTE 0x14
                 _loggedUser:
000892           	.BYTE 0x14
                 _currentTime:
0008a6           	.BYTE 0x6
                 _shutdownTime:
0008ac           	.BYTE 0x6
                 _menuOptions:
0008b2           	.BYTE 0x6
                 _isMenuOpen:
0008b8           	.BYTE 0x2
                 _menuSelection:
0008ba           	.BYTE 0x2
                 _voltage:
0008bc           	.BYTE 0x4
                 _voltageStr:
0008c0           	.BYTE 0x14
                 _timeBuffer:
0008d4           	.BYTE 0xA
                 _c:
0008de           	.BYTE 0x1
                 _lcdBuffer:
0008df           	.BYTE 0x14
                 _durationBuffer:
0008f3           	.BYTE 0xA
                 _i:
0008fd           	.BYTE 0x2
                 __seed_G101:
0008ff           	.BYTE 0x4
                 __base_y_G103:
000903           	.BYTE 0x4
                 __lcd_x:
000907           	.BYTE 0x1
                 __lcd_y:
000908           	.BYTE 0x1
                 __lcd_maxx:
000909           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x0:
                +
0003c1 e2a8     +LDI R26 , 40
0003c2 9fa0     +MUL R26 , R16
0003c3 01f0     +MOVW R30 , R0
0003c4 9fa1     +MUL R26 , R17
0003c5 0df0     +ADD R31 , R0
                 	__MULBNWRU 16,17,40
0003c6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x1:
0003c7 5ce6      	SUBI R30,LOW(-_predefinedUsers)
0003c8 4ff9      	SBCI R31,HIGH(-_predefinedUsers)
0003c9 93fa      	ST   -Y,R31
0003ca 93ea      	ST   -Y,R30
0003cb e6aa      	LDI  R26,LOW(_inputBuffer)
0003cc e0b8      	LDI  R27,HIGH(_inputBuffer)
0003cd 940e 032d 	CALL _strcmp
0003cf 30e0      	CPI  R30,0
0003d0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x2:
0003d1 52e6      	SUBI R30,LOW(-_registeredUsers)
0003d2 4ff9      	SBCI R31,HIGH(-_registeredUsers)
0003d3 93fa      	ST   -Y,R31
0003d4 93ea      	ST   -Y,R30
0003d5 e6aa      	LDI  R26,LOW(_inputBuffer)
0003d6 e0b8      	LDI  R27,HIGH(_inputBuffer)
0003d7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x3:
0003d8 93fa      	ST   -Y,R31
0003d9 93ea      	ST   -Y,R30
0003da e6aa      	LDI  R26,LOW(_inputBuffer)
0003db e0b8      	LDI  R27,HIGH(_inputBuffer)
0003dc 940e 032d 	CALL _strcmp
0003de 30e0      	CPI  R30,0
0003df 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
0003e0 e9e2      	LDI  R30,LOW(_loggedUser)
0003e1 e0f8      	LDI  R31,HIGH(_loggedUser)
0003e2 93fa      	ST   -Y,R31
0003e3 93ea      	ST   -Y,R30
0003e4 cfdc      	RJMP SUBOPT_0x0
                 
                 
                 	.CSEG
                 __LSLW12:
0003e5 23ee      	TST  R30
0003e6 2e0e      	MOV  R0,R30
0003e7 01fd      	MOVW R30,R26
0003e8 f021      	BREQ __LSLW12R
                 __LSLW12L:
0003e9 0fee      	LSL  R30
0003ea 1fff      	ROL  R31
0003eb 940a      	DEC  R0
0003ec f7e1      	BRNE __LSLW12L
                 __LSLW12R:
0003ed 9508      	RET
                 
                 __MULW12U:
0003ee 9ffa      	MUL  R31,R26
0003ef 2df0      	MOV  R31,R0
0003f0 9feb      	MUL  R30,R27
0003f1 0df0      	ADD  R31,R0
0003f2 9fea      	MUL  R30,R26
0003f3 2de0      	MOV  R30,R0
0003f4 0df1      	ADD  R31,R1
0003f5 9508      	RET
                 
                 __GETW1P:
0003f6 91ed      	LD   R30,X+
0003f7 91fc      	LD   R31,X
0003f8 9711      	SBIW R26,1
0003f9 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega64 register use summary:
r0 :  15 r1 :   6 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   2 r7 :   2 
r8 :   6 r9 :   2 r10:   5 r11:   2 r12:   6 r13:   3 r14:   0 r15:   2 
r16:  16 r17:  28 r18:   0 r19:   0 r20:   0 r21:   0 r22:  11 r23:   5 
r24:  19 r25:   4 r26:  78 r27:  43 r28:   4 r29:   1 r30: 151 r31:  47 
x  :  11 y  : 100 z  :  12 
Registers used: 26 out of 35 (74.3%)

ATmega64 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   2 add   :   6 
adiw  :   8 and   :   2 andi  :   2 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   9 
brge  :   4 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   0 brmi  :   0 brne  :  24 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  33 
cbi   :   3 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   7 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   7 cpc   :   5 cpi   :  11 cpse  :   0 dec   :   6 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   4 inc   :   0 jmp   :  37 ld    :  44 ldd   :  10 ldi   :  96 
lds   :  12 lpm   :   9 lsl   :   2 lsr   :   0 mov   :  10 movw  :  20 
mul   :   5 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   2 
ori   :   0 out   :  13 pop   :   0 push  :   0 rcall :  20 ret   :  16 
reti  :   1 rjmp  :  26 rol   :   2 ror   :   0 sbc   :   0 sbci  :  13 
sbi   :   7 sbic  :   1 sbis  :   1 sbiw  :   8 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  56 std   :   5 sts   :  10 sub   :   1 subi  :  17 swap  :   1 
tst   :   3 wdr   :   0 
Instructions used: 49 out of 116 (42.2%)

ATmega64 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0007f4   1352    684   2036   65536   3.1%
[.dseg] 0x000100 0x00090a      0   1034   1034    4096  25.2%
[.eseg] 0x000000 0x000000      0      0      0    2048   0.0%

Assembly complete, 0 errors, 14 warnings
