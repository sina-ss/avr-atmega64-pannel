;#include <mega64.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <stdio.h>
;#include <stdlib.h>
;#include <string.h>
;#include <alcd.h>
;
;#define LED1 PORTD.0
;#define LED2 PORTD.1
;
;typedef struct
;{
;    char username[20];
;    char password[20];
;} User;
;
;User users[] = { {"user1", "pass1"}, {"user2", "pass2"}, {"user3", "pass3"}, {"user4", "pass4"} };

	.DSEG
;int numUsers = sizeof(users) / sizeof(User);
;
;char inputBuffer[20];
;int bufferIndex = 0;
;
;char loggedUser[20];
;
;void send_string(char *str)
; 0000 001A {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 001B     while (*str != 0)
;PCODE: $0000000F VOL: 0
;	*str -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 001C     {
; 0000 001D         while ((UCSR0A & (1 << UDRE0)) == 0);
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 001E         UDR0 = *str;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 001F         str++;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0020     }
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0021 }
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;
;void check_user()
; 0000 0024 {
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0025     int i;
; 0000 0026     for (i = 0; i < numUsers; i++)
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;	i -> R16,R17
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0027     {
; 0000 0028         if (strcmp(users[i].username, inputBuffer) == 0)
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0029         {
; 0000 002A             send_string("\nEnter Password: ");
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 002B             return;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 002C         }
; 0000 002D     }
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 002E 
; 0000 002F     // If username not found, register new user
; 0000 0030     send_string("\nNew Password: ");
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0031 }
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0

	.DSEG
_0xE:
	.BYTE 0x22
;
;void check_password()
; 0000 0034 {

	.CSEG
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0035     int i;
; 0000 0036     for (i = 0; i < numUsers; i++)
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;	i -> R16,R17
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0037     {
; 0000 0038         if (strcmp(users[i].username, inputBuffer) == 0)
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0039         {
; 0000 003A             if (strcmp(users[i].password, inputBuffer) == 0)
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 003B             {
; 0000 003C                 strcpy(loggedUser, users[i].username);
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 003D                 LED2 = 1; // Turn on the LED2
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 003E                 send_string("\nLogin Successful!\n");
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 003F                 return;
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0040             }
; 0000 0041         }
;PCODE: $00000078 VOL: 0
; 0000 0042     }
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0043     send_string("\nLogin Failed!\n");
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 0044     LED2 = 0; // Turn off the LED2
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 0045 }
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0

	.DSEG
_0x16:
	.BYTE 0x24
;
;interrupt [USART0_RXC] void usart_rx_isr(void)
; 0000 0048 {

	.CSEG
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 0049     char data = UDR0;
; 0000 004A     if (data == '\n')
;PCODE: $00000089 VOL: 0
;	data -> R17
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 004B     {
; 0000 004C         inputBuffer[bufferIndex] = '\0'; // Null-terminate the received string
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 004D         if (loggedUser[0] == '\0')
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 004E         {
; 0000 004F             check_user();
;PCODE: $00000096 VOL: 0
; 0000 0050         }
; 0000 0051         else
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 0052         {
; 0000 0053             check_password();
;PCODE: $00000099 VOL: 0
; 0000 0054         }
;PCODE: $0000009A VOL: 0
; 0000 0055         bufferIndex = 0;
;PCODE: $0000009B VOL: 0
; 0000 0056     }
; 0000 0057     else
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 0058     {
; 0000 0059         inputBuffer[bufferIndex] = data;
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 005A         bufferIndex++;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 005B     }
;PCODE: $000000A4 VOL: 0
; 0000 005C }
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;
;void main(void)
; 0000 005F {
;PCODE: $000000A9 VOL: 0
; 0000 0060     // Port D is output for LEDs
; 0000 0061     DDRD.0 = 1;
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 0062     DDRD.1 = 1;
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 0063 
; 0000 0064     // Turn on the LED1
; 0000 0065     LED1 = 1;
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 0066 
; 0000 0067     // Initialize USART
; 0000 0068     UCSR0A = 0x00;
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 0069     UCSR0B = 0x18;
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 006A     UCSR0C = 0x06;
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 006B     UBRR0L = 51; // for 9600 bps with 8MHz clock
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 006C 
; 0000 006D     // Enable Global Interrupts
; 0000 006E     #asm("sei")
;PCODE: $000000B8 VOL: 0
	sei
;PCODE: $000000B9 VOL: 0
; 0000 006F 
; 0000 0070     send_string("Enter Username: ");
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 0071 
; 0000 0072     while (1)
;PCODE: $000000BD VOL: 0
; 0000 0073     {
; 0000 0074         // Your code here
; 0000 0075     }
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 0076 }
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0

	.DSEG
_0x23:
	.BYTE 0x11
