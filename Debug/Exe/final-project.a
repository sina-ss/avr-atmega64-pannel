;#include <mega64.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <stdio.h>
;#include <stdlib.h>
;#include <string.h>
;#include <alcd.h>
;
;#define LED1 PORTD.0
;#define LED2 PORTD.1
;
;typedef struct
;{
;    char username[20];
;    char password[20];
;} User;
;
;User predefinedUsers[] = { {"user1", "pass1"}, {"user2", "pass2"}, {"user3", "pass3"}, {"user4", "pass4"} };

	.DSEG
;User registeredUsers[10];  // Limit new users to 10
;int numPredefinedUsers = sizeof(predefinedUsers) / sizeof(User);
;int numRegisteredUsers = 0;
;
;char inputBuffer[20];
;int bufferIndex = 0;
;char tempPassword[20];
;
;char loggedUser[20];
;int isRegistering = 0;
;
;void send_string(char *str)
; 0000 001E {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 001F     while (*str != 0)
;PCODE: $0000000F VOL: 0
;	*str -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0020     {
; 0000 0021         while ((UCSR0A & (1 << UDRE0)) == 0);
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0022         UDR0 = *str;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0023         str++;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0024     }
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0025 }
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;
;void check_user()
; 0000 0028 {
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0029     int i;
; 0000 002A     for (i = 0; i < numPredefinedUsers; i++)
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;	i -> R16,R17
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 002B     {
; 0000 002C         if (strcmp(predefinedUsers[i].username, inputBuffer) == 0)
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 002D         {
; 0000 002E             send_string("\nEnter Password: ");
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 002F             return;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0030         }
; 0000 0031     }
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0032     for (i = 0; i < numRegisteredUsers; i++)
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0033     {
; 0000 0034         if (strcmp(registeredUsers[i].username, inputBuffer) == 0)
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0035         {
; 0000 0036             send_string("\nEnter Password: ");
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0037             return;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0038         }
; 0000 0039     }
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 003A     // If username not found, register new user
; 0000 003B     isRegistering = 1;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 003C     strcpy(registeredUsers[numRegisteredUsers].username, inputBuffer);
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 003D     send_string("\nNew Password: ");
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 003E }
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0

	.DSEG
_0xE:
	.BYTE 0x34
;
;void check_password()
; 0000 0041 {

	.CSEG
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0042     int i;
; 0000 0043     for (i = 0; i < numPredefinedUsers; i++)
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;	i -> R16,R17
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 0044     {
; 0000 0045         if (strcmp(predefinedUsers[i].username, inputBuffer) == 0)
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 0046         {
; 0000 0047             if (strcmp(predefinedUsers[i].password, inputBuffer) == 0)
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 0048             {
; 0000 0049                 strcpy(loggedUser, predefinedUsers[i].username);
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 004A                 LED2 = 1; // Turn on the LED2
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 004B                 send_string("\nLogin Successful!\n");
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 004C                 return;
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 004D             }
; 0000 004E         }
;PCODE: $0000009D VOL: 0
; 0000 004F     }
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 0050     for (i = 0; i < numRegisteredUsers; i++)
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 0051     {
; 0000 0052         if (strcmp(registeredUsers[i].username, inputBuffer) == 0)
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 0053         {
; 0000 0054             if (strcmp(registeredUsers[i].password, inputBuffer) == 0)
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 0055             {
; 0000 0056                 strcpy(loggedUser, registeredUsers[i].username);
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 0057                 LED2 = 1; // Turn on the LED2
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 0058                 send_string("\nLogin Successful!\n");
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 0059                 return;
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 005A             }
; 0000 005B         }
;PCODE: $000000CC VOL: 0
; 0000 005C     }
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 005D     send_string("\nLogin Failed!\n");
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 005E     LED2 = 0; // Turn off the LED2
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 005F }
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0

	.DSEG
_0x1A:
	.BYTE 0x38
;
;void check_new_password()
; 0000 0062 {

	.CSEG
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 0063     strcpy(tempPassword, inputBuffer);
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 0064     send_string("\nConfirm Password: ");
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 0065 }
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0

	.DSEG
_0x24:
	.BYTE 0x14
;
;void check_confirm_password()
; 0000 0068 {

	.CSEG
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 0069     if (strcmp(tempPassword, inputBuffer) == 0)
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 006A     {
; 0000 006B         strcpy(registeredUsers[numRegisteredUsers].password, tempPassword);
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 006C         numRegisteredUsers++;
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 006D         send_string("\nRegistration Successful!\n");
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 006E     }
; 0000 006F     else
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 0070     {
; 0000 0071         send_string("\nRegistration Failed!\n");
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 0072     }
;PCODE: $00000101 VOL: 0
; 0000 0073     isRegistering = 0;
;PCODE: $00000102 VOL: 0
; 0000 0074 }
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0

	.DSEG
_0x26:
	.BYTE 0x32
;
;interrupt [USART0_RXC] void usart_rx_isr(void)
; 0000 0077 {

	.CSEG
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 0078     char data = UDR0;
; 0000 0079     if (data == '\n')
;PCODE: $00000107 VOL: 0
;	data -> R17
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 007A     {
; 0000 007B         inputBuffer[bufferIndex] = '\0'; // Null-terminate the received string
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 007C         if (loggedUser[0] == '\0')
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 007D         {
; 0000 007E             if (isRegistering == 0)
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 007F             {
; 0000 0080                 check_user();
;PCODE: $00000116 VOL: 0
; 0000 0081             }
; 0000 0082             else if (isRegistering == 1)
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 0083             {
; 0000 0084                 check_new_password();
;PCODE: $0000011C VOL: 0
; 0000 0085                 isRegistering++;
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0000 0086             }
; 0000 0087             else
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 0088             {
; 0000 0089                 check_confirm_password();
;PCODE: $00000122 VOL: 0
; 0000 008A             }
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 008B         }
; 0000 008C         else
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 008D         {
; 0000 008E             check_password();
;PCODE: $00000127 VOL: 0
; 0000 008F         }
;PCODE: $00000128 VOL: 0
; 0000 0090         bufferIndex = 0;
;PCODE: $00000129 VOL: 0
; 0000 0091     }
; 0000 0092     else
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 0093     {
; 0000 0094         inputBuffer[bufferIndex] = data;
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0000 0095         bufferIndex++;
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 0096     }
;PCODE: $00000132 VOL: 0
; 0000 0097 }
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;
;void main(void)
; 0000 009A {
;PCODE: $00000137 VOL: 0
; 0000 009B     // Port D is output for LEDs
; 0000 009C     DDRD.0 = 1;
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 009D     DDRD.1 = 1;
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0000 009E 
; 0000 009F     // Turn on the LED1
; 0000 00A0     LED1 = 1;
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0000 00A1 
; 0000 00A2     // Initialize USART
; 0000 00A3     UCSR0A = 0x00;
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0000 00A4     UCSR0B = 0x18;
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0000 00A5     UCSR0C = 0x06;
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0000 00A6     UBRR0L = 51; // for 9600 bps with 8MHz clock
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0000 00A7 
; 0000 00A8     // Enable Global Interrupts
; 0000 00A9     #asm("sei")
;PCODE: $00000146 VOL: 0
	sei
;PCODE: $00000147 VOL: 0
; 0000 00AA 
; 0000 00AB     send_string("Enter Username: ");
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0000 00AC 
; 0000 00AD     while (1)
;PCODE: $0000014B VOL: 0
; 0000 00AE     {
; 0000 00AF         // Your code here
; 0000 00B0     }
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
; 0000 00B1 }
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0

	.DSEG
_0x36:
	.BYTE 0x11
